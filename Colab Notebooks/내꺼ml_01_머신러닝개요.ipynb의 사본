{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"내꺼ml_01_머신러닝개요.ipynb의 사본","provenance":[{"file_id":"1Elx1UG5Eq0kLhbgy8wu_i83mdB_WWhN6","timestamp":1617603070653}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Hv85-XvEcKaa"},"source":["### 구글드라이브 연동"]},{"cell_type":"code","metadata":{"id":"pmqLJy7icJ4g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307005,"user_tz":-540,"elapsed":1656,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"b0b88709-01fd-447d-ee3d-fe24dd64ed63"},"source":["# 구글드라이브 연동\n","from google.colab import drive\n","drive.mount('/gdrive', force_remount=True)\n","\n","# 구글 드라이브 파일 확인\n","!ls '/gdrive/My Drive/temp/'\n","\n","# 반복되는 드라이브 경로 변수화\n","drive_path = '/gdrive/My Drive/temp/'"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Mounted at /gdrive\n"," 매수종목1.txt\t\t   example.docx\t\t   sample.xlsx\n"," 매수종목2.txt\t\t   exmaple.docx\t\t   score.csv\n"," adult.data\t\t   height_weight.txt\t   seoul.html\n"," auto-mpg.csv\t\t   HelloWorld.xlsx\t   stock-data.csv\n"," bmi_500.csv\t\t   little-char.png\t  'stock price.xlsx'\n"," citibike.csv\t\t   population_number.csv  'stock valuation.xlsx'\n","'투표 결과.csv'\t\t   ram_price.csv\t   test.db.db\n"," 매수종목.csv\t\t   ratings_small.txt\t   test.txt\n"," database\t\t   ratings_test.txt\t   Traffic_Accident_2017.csv\n"," data_mine.csv\t\t   ratings_train.txt\t   train.csv\n"," data_population.csv\t   sample1.pdf\t\t   user_id_mean.csv\n"," data_studentlist_en.csv   sample2.pdf\t\t   주가데이터.xlsx\n"," demo.docx\t\t   sample_merge.pdf\t   남북한발전전력량.xlsx\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"83-BXRyoTPQv"},"source":["### 머신러닝(Machine Learning) 종류\n","\n","- 지도학습 (Supervised Learning)\n","- 비지도학습 (Unsupervised Learning)\n","- 강화학습 (Reinforcement Learning)\n"]},{"cell_type":"markdown","metadata":{"id":"UFEBkpUCToVw"},"source":["지도학습 (Supervised Learning)\n","\n","- 데이터에 대한 Label(명시적인 답)이 주어진 상태에서 컴퓨터를 학습시키는 방법. \n","\n","- 분류(Classification)와 회귀(Regression)로 나뉘어진다.\n","> (ex. 스팸 메일 분류, 집 가격 예측, 손글씨 숫자 판별, 신용카드 의심거래 감지, 의료영상 이미지기반 종양판단)\n"]},{"cell_type":"markdown","metadata":{"id":"lVyfBjNjT8Xt"},"source":["비지도학습 (Unsupervised Learning)\n","\n","- 데이터에 대한 Label(명시적인 답)이 없는 상태에서 컴퓨터를 학습시키는 방법.\n","\n","- 데이터의 숨겨진 특징, 구조, 패턴 파악.\n","\n","- 데이터를 비슷한 특성끼리 묶는 클러스터링(Clustering)과 차원축소(Dimensionality Reduction)등이 있다.\n","> (ex. 블로그 글 주제구분, 고객 취향별 그룹화, 웹사이트 비정상 접근 탐지, 이미지 감색 처리, 소비자 그룹 마케팅)\n","\n","좋은 입력 데이터를 만들어내는 방법 -> 특성추출(특성공학)\n"]},{"cell_type":"markdown","metadata":{"id":"kcXUmDjUUTjO"},"source":["강화학습 (Reinforcement Learning)\n","\n","- 지도학습과 비슷하지만 완전한 답(Label)을 제공하지 않는 특징이 있다.\n","\n","- 기계는 더 많은 보상을 얻을 수 있는 방향으로 행동을 학습\n","\n","> (ex. 게임이나 로봇 학습)\n"]},{"cell_type":"markdown","metadata":{"id":"EiJ3i6uloi8c"},"source":["머신러닝 vs 딥러닝\n","\n","|구분| Machine Learning| Deep Learning|\n","|---|---|---|\n","|훈련 데이터 크기| 작음| 큼|\n","|시스템 성능| 저 사양| 고 사양|\n","|feature 선택| 전문가 (사람) |알고리즘|\n","|feature 수| 많음 |적음|\n","|문제 해결 접근법| 문제를 분리 -> 각각 답을 얻음 -> 결과 통합| end-to-end (결과를 바로 얻음)|\n","|실행 시간| 짧음 |김|\n","|해석력 |해석 가능| 해석 어려움|"]},{"cell_type":"markdown","metadata":{"id":"Wf4lQ1hzUmsx"},"source":["### [scikit-learn](https://scikit-learn.org/stable/index.html)\n","\n","- 파이썬에 머신러닝 프레임워크 라이브러리\n","\n","- 회귀, 분류, 군집, 차원축소, 특성공학, 전처리, 교차검증, 파이프라인 등 머신러닝에 필요한 기능 제공\n","\n","- 학습을 위한 샘플 데이터 제공\n"]},{"cell_type":"markdown","metadata":{"id":"1jePDfQLiMJM"},"source":["#### scikit-learn으로 XOR 연산 학습해보기\n","\n","XOR연산?\n","\n","- 두값이 서로 같으면 0, 다르면 1  (배타적 논리 합)\n","\n","|P(입력)| Q(입력)| R(출력)|\n","|---|---|---|\n","| 0| 0| 0|\n","| 0| 1| 1|\n","| 1| 0| 1|\n","| 1| 1| 0|\n"]},{"cell_type":"code","metadata":{"id":"2xAnNAbTTLo_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307005,"user_tz":-540,"elapsed":1650,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"0914be42-b8bb-405b-9c61-fecebf537588"},"source":["from sklearn import svm\n","\n","\n","\n","# XOR의 계산 결과 데이터\n","xor_input = [\n","   # P, Q, Result\n","    [0, 0, 0],\n","    [0, 1, 1],\n","    [1, 0, 1],\n","    [1, 1, 0]\n","]\n","\n","# 학습을 위해 데이터와 레이블 분리하기 --- (※1)\n","xor_data = []\n","xor_label = []\n","for row in xor_input:\n","  p = row[0]\n","  q = row[1]\n","  r = row[2]\n","  xor_data.append([p,q])\n","  xor_label.append(r)\n","\n","# 데이터 학습시키기 --- (※2)\n","model = svm.SVC()                        # 사이킷런의 svm이라는 모듈을 사용하여 분석 모델을 만든다.\n","model.fit(xor_data,xor_label)            # 지도학습. 문제랑 답을 다 주는 형식이다. 생성한 모델에 문제와 답을 제시해준다. 이렇게 학습된 모델이 만들어진다. \n","\n","# 데이터 예측하기 --- (※3)\n","pre = model.predict(xor_data)            # 모델이 다 만들어 졌으니, 이제 문제를 넣어보자. 답이 잘 나오는지 확인해보자.\n","print(\"예측데이터:\",xor_data)\n","print(\"예측 결과:\",pre)\n","\n","# 결과 확인하기 --- (※4)\n","\n","ok=0; total=0\n","for idx,answer in enumerate(xor_label):\n","  p=pre[idx]\n","  if p==answer:\n","    ok+=1\n","    total +=1\n","print(\"정답률:\",ok,'/',total,'=', ok/total)"],"execution_count":31,"outputs":[{"output_type":"stream","text":["예측데이터: [[0, 0], [0, 1], [1, 0], [1, 1]]\n","예측 결과: [0 1 1 0]\n","정답률: 4 / 4 = 1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b5tr1SAwlhJe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307006,"user_tz":-540,"elapsed":1646,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"9f45bac8-9f05-4509-a075-a2e8fa074561"},"source":["# pandas 라이브러리를 사용하여 코드 간략화\n","# 위 코드는 행렬 안에있는 행렬이니깐\n","\n","import pandas as pd\n","from sklearn import svm, metrics           ##metrics 가 뭐지?? 이따 정답률을 구할때 쓰는 모델이다.\n","\n","# XOR 연산\n","xor_input = [\n","    [0, 0, 0],\n","    [0, 1, 1],\n","    [1, 0, 1],\n","    [1, 1, 0]\n","]\n","\n","# 입력을 학습 전용 데이터와 테스트 전용 데이터로 분류하기 --- (※1)\n","xor_df = pd.DataFrame(xor_input)\n","# print(xor_df)\n","xor_data = xor_df[[0,1]]\n","# print(xor_data)\n","xor_label = xor_df[[2]]\n","# print(xor_label)\n","\n","# 데이터 학습과 예측하기 --- (※2)\n","model = svm.SVC()                         #svm모델의 SVC메서드를 생성\n","model.fit(xor_data,xor_label)             #문제와 답을 주어 학습된 모델 생성\n","pre = model.predict(xor_data)             #생성된 모델에 다른 문제를 던져주며 그 결과를 pre에 저장. 과연 정답이 나올까?\n","\n","# # 정답률 구하기 --- (※3)\n","ac_score = metrics.accuracy_score(xor_label, pre)\n","print('정답률:', ac_score)"],"execution_count":32,"outputs":[{"output_type":"stream","text":["정답률: 1.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"u_RAOvk1pZsd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307529,"user_tz":-540,"elapsed":2164,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"aed1ba52-3f6b-4d16-cbbf-90106781b610"},"source":["# KNN 분류 모델을 이용\n","import pandas as pd\n","from sklearn import svm, metrics\n","from sklearn.neighbors import KNeighborsClassifier          # <- 모델추가. 이번엔 KNN 모델을 쓸거얌.\n","\n","# XOR 연산\n","xor_input = [\n","    [0, 0, 0],\n","    [0, 1, 1],\n","    [1, 0, 1],\n","    [1, 1, 0]\n","]\n","\n","# 입력을 학습 전용 데이터와 테스트 전용 데이터로 분류하기 --- (※1)\n","xor_df = pd.DataFrame(xor_input)                          #자동으로 기본 인덱스 (0.1.2.3)을 생성함.\n","xor_data = xor_df[ [0,1] ]\n","xor_label = xor_df[ [2] ]\n","\n","# 데이터 학습과 예측하기 --- (※2)\n","model = KNeighborsClassifier(n_neighbors=1)\n","model.fit(xor_data, xor_label)\n","pre = model.predict(xor_data)\n","\n","# 정답률 구하기 --- (※3)\n","ac_score = metrics.accuracy_score(xor_label, pre)         #(답지와 내가 푼 답을 비교하여 정답률을 내어준다.)\n","print('정답률:', ac_score)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["정답률: 1.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:21: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"Bz0d-Lj4qovy"},"source":["진행순서\n","\n",">1. model = 머신러닝모델 생성  # svm.SVC() or KNeighborsClassifier(n_neighbors=1) \n","1. model.fit(문제 , 답)\n","1. 예측결과 = model.predict(값을 얻고 싶은 데이터 )\n","1. ac_score = metrics.accuracy_score(실제답, 예측결과)\n","\n","clf (classifier) - scikit-learn 에서 [Estimator](https://en.wikipedia.org/wiki/Estimator) 인스턴스인 분류기를 지칭\n"]},{"cell_type":"markdown","metadata":{"id":"AfJQYJV5u_8R"},"source":["[머신러닝 용어집](https://developers.google.com/machine-learning/glossary)"]},{"cell_type":"markdown","metadata":{"id":"Q_kZVFHf1SxC"},"source":["#### 모델 저장과 불러오기 - pickle\n","\n","\n","- 우리가 만든 머신러닝 모델을 배포, 저장 , 혹은 불러오는 방법은 두가지가 있다.\n","  1. pickle을 사용하는 방법\n","  2. joblib을 사용하는 방법\n"]},{"cell_type":"code","metadata":{"id":"-AGaQ43_1PXw","executionInfo":{"status":"ok","timestamp":1617698307529,"user_tz":-540,"elapsed":2160,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["\n","\n","\n","import pickle  # 모델을 피클 파일로 저장해보자.\n","\n","with open('xor_model.pkl', 'wb') as f:\n","  pickle.dump(model,f)   # 위에서 생성한 모델을 피클파일로 저장시킴. 이것이 모델이 가장 심플한 배포 방법.\n","\n"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"sHyOFhVL2Fq1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307530,"user_tz":-540,"elapsed":2156,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"eecae4d8-0d8c-4155-dfe0-b976247b71fc"},"source":["import pickle\n","\n","with open('xor_model.pkl', 'rb') as f:  # 피클파일 불러오기/\n","  model2 = pickle.load(f)\n","\n","\n","# 문제\n","x_test = [\n","    [1, 1]\n","]\n","\n","# 모델 예측                         # 다운받은 머신러닝 모델을 가지고, 문제를 넣어 써보자.\n","pre = model2.predict(x_test)\n","pre[0]"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"9kBBb96z3egM"},"source":["#### 모델 저장과 불러오기 - joblib"]},{"cell_type":"code","metadata":{"id":"abR36aP63BvO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307530,"user_tz":-540,"elapsed":2151,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"538a8d9d-40db-43d1-843b-9e2b19d66e9b"},"source":["from sklearn.externals import joblib\n","\n","joblib.dump(model, 'xor_model_2.pkl')\n"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['xor_model_2.pkl']"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"vFKBHbSZ3Rf0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307530,"user_tz":-540,"elapsed":2146,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"6b6af43b-b26e-4f65-a648-8e2ee443639c"},"source":["from sklearn.externals import joblib\n","\n","model3 = joblib.load('xor_model_2.pkl')\n","\n","# 문제\n","x_test = [\n","    [1, 1]\n","]\n","\n","# 모델 예측\n","\n","pre = model3.predict(x_test)        #model3을 이용하여 input 값을 통해 결괏값 예측\n","pre[0]"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"l12FSyxUw0IX"},"source":["#### scikit-learn 연습 01\n","\n","AND 연산 모델 작성\n","\n","AND연산?\n","\n","- 두값이 서로 참이면 1, 아니면 0 \n","\n","|P(입력)| Q(입력)| R(출력)|\n","|---|---|---|\n","| 0| 0| 0|\n","| 0| 1| 0|\n","| 1| 0| 0|\n","| 1| 1| 1|"]},{"cell_type":"code","metadata":{"id":"fI8JO2JWalgC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307531,"user_tz":-540,"elapsed":2139,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"dac32220-1a8c-4db0-c614-671f7191747a"},"source":["# KNN 분류 모델을 이용\n","import pandas as pd\n","from sklearn import svm, metrics\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","# AND 연산\n","and_input = [\n","    [0, 0, 0],\n","    [0, 1, 0],\n","    [1, 0, 0],\n","    [1, 1, 1]\n","]\n","\n","# 입력을 학습 전용 데이터와 테스트 전용 데이터로 분류하기 --- (※1)\n","\n","asd = pd.DataFrame(and_input)\n","question = asd[[0,1]]\n","answer= asd[[2]]\n","\n","# 데이터 학습과 예측하기 --- (※2)\n","model = KNeighborsClassifier(n_neighbors=1)                # 모델을 제시. KNN 모델을 사용하자. \n","model.fit(question, answer)                                # 주어진 모델로 데이터 학습\n","pre = model.predict(question)                              # 문제 풀기. 학습이 잘 되었나 확인을 해보자.\n","\n","# 정답률 구하기 --- (※3)\n","ac_score = metrics.accuracy_score(answer, pre)             # 이미 알고있는 답(답지), 결과를 원하는 새로운 데이터(내가 시험지에 쓴 답) 을 비교\n","print('정답률:', ac_score)"],"execution_count":38,"outputs":[{"output_type":"stream","text":["정답률: 1.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:22: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"UohtQMQOkFGS"},"source":["#### 분류? 회귀?\n","\n","- 같은 종류의 꽃(붓꽃)을 세 품종 중 하나로 예측하는 것-분류\n","- 이메일에서 스팸 메일을 예측하는 것-분류\n","- 웹사이트의 글로부터 어떤 언어의 웹사이트인지 예측하는 것-분류\n","- 어떤 사람의 교육수준, 나이, 주거지를 바탕으로 연간 소득을 예측하는 것-회귀\n","- 옥수수 농장에서 전년도 수확량과 날씨, 고용 인원수 등으로 올해 수확량을 예측하는 것 - 회귀\n","- 다음 학기 성적 점수를 예측하는 것 - 회귀\n","- 키와 몸무게를 가지고 비만도를 예측하는 것 - 회귀...."]},{"cell_type":"markdown","metadata":{"id":"ulNYSJJHbeXU"},"source":["#### scikit-learn 연습 02\n","\n","비만도 데이터 학습\n","\n","- 500명의 키와 몸무게, 비만도 라벨을 이용해 비만을 판단하는 모델을 만들어보자."]},{"cell_type":"code","metadata":{"id":"3LOS1fxAcD8Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617698307531,"user_tz":-540,"elapsed":2129,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"20ea6fe2-ab71-4bbe-96c7-f8a8f6201f66"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn import metrics # 평가를 위한 모듈 ex)정답률이라던가 정답률\n","\n","data = pd.read_csv(drive_path + 'bmi_500.csv', index_col='Label')\n","\n","data.index.unique()\n"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Obesity', 'Normal', 'Overweight', 'Extreme Obesity', 'Weak',\n","       'Extremely Weak'],\n","      dtype='object', name='Label')"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"hMWXsU1cX-NS","colab":{"base_uri":"https://localhost:8080/","height":284},"executionInfo":{"status":"ok","timestamp":1617698307532,"user_tz":-540,"elapsed":2124,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"49a6467a-953b-4993-f8b8-e839304f1f80"},"source":["data.describe()   # 데이타프레임에 대한 각종 수치 정보를 볼 수 있다."],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>500.000000</td>\n","      <td>500.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>169.944000</td>\n","      <td>106.000000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>16.375261</td>\n","      <td>32.382607</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>140.000000</td>\n","      <td>50.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>156.000000</td>\n","      <td>80.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>170.500000</td>\n","      <td>106.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>184.000000</td>\n","      <td>136.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>199.000000</td>\n","      <td>160.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           Height      Weight\n","count  500.000000  500.000000\n","mean   169.944000  106.000000\n","std     16.375261   32.382607\n","min    140.000000   50.000000\n","25%    156.000000   80.000000\n","50%    170.500000  106.000000\n","75%    184.000000  136.000000\n","max    199.000000  160.000000"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ks3rSbka7IIG","executionInfo":{"status":"ok","timestamp":1617698398133,"user_tz":-540,"elapsed":616,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"30702d57-59b5-4d2c-dd16-760d74024695"},"source":["display(data.loc['Normal'])   # index = 'Normal' 인 행만 불러온다.  \n","\n","# data['Normal'이 에러가 났던 이유 = data['열 정보'] 이기 때문에, 행 기준으로 찾으려면 .loc 로 해야됨.\n","t = []\n","\n","\n","list = data.index.unique()\n","for i in list:\n","  t.append(data[data.index == i])\n","\n","# t = [ data[data.index == i] for i in list]\n","\n","display(t)\n","\n"],"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Male</td>\n","      <td>189</td>\n","      <td>87</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Male</td>\n","      <td>195</td>\n","      <td>81</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Male</td>\n","      <td>155</td>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Male</td>\n","      <td>191</td>\n","      <td>79</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Female</td>\n","      <td>172</td>\n","      <td>67</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Female</td>\n","      <td>178</td>\n","      <td>65</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Male</td>\n","      <td>167</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Female</td>\n","      <td>151</td>\n","      <td>55</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Male</td>\n","      <td>187</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>Normal</th>\n","      <td>Female</td>\n","      <td>164</td>\n","      <td>59</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>69 rows × 3 columns</p>\n","</div>"],"text/plain":["        Gender  Height  Weight\n","Label                         \n","Normal    Male     189      87\n","Normal    Male     195      81\n","Normal    Male     155      51\n","Normal    Male     191      79\n","Normal  Female     172      67\n","...        ...     ...     ...\n","Normal  Female     178      65\n","Normal    Male     167      64\n","Normal  Female     151      55\n","Normal    Male     187      80\n","Normal  Female     164      59\n","\n","[69 rows x 3 columns]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["[         Gender  Height  Weight\n"," Label                          \n"," Obesity    Male     174      96\n"," Obesity  Female     185     110\n"," Obesity  Female     169     103\n"," Obesity  Female     159      80\n"," Obesity  Female     169      97\n"," ...         ...     ...     ...\n"," Obesity    Male     146      85\n"," Obesity  Female     188     115\n"," Obesity    Male     173     111\n"," Obesity    Male     198     136\n"," Obesity  Female     184     121\n"," \n"," [130 rows x 3 columns],         Gender  Height  Weight\n"," Label                         \n"," Normal    Male     189      87\n"," Normal    Male     195      81\n"," Normal    Male     155      51\n"," Normal    Male     191      79\n"," Normal  Female     172      67\n"," ...        ...     ...     ...\n"," Normal  Female     178      65\n"," Normal    Male     167      64\n"," Normal  Female     151      55\n"," Normal    Male     187      80\n"," Normal  Female     164      59\n"," \n"," [69 rows x 3 columns],             Gender  Height  Weight\n"," Label                             \n"," Overweight  Female     195     104\n"," Overweight    Male     149      61\n"," Overweight    Male     189     104\n"," Overweight    Male     174      90\n"," Overweight  Female     192     101\n"," ...            ...     ...     ...\n"," Overweight  Female     149      61\n"," Overweight  Female     195     104\n"," Overweight  Female     188      99\n"," Overweight    Male     198     109\n"," Overweight  Female     167      79\n"," \n"," [68 rows x 3 columns],                  Gender  Height  Weight\n"," Label                                  \n"," Extreme Obesity    Male     147      92\n"," Extreme Obesity    Male     154     111\n"," Extreme Obesity  Female     153     107\n"," Extreme Obesity  Female     157     110\n"," Extreme Obesity    Male     140     129\n"," ...                 ...     ...     ...\n"," Extreme Obesity    Male     152      98\n"," Extreme Obesity  Female     150     153\n"," Extreme Obesity  Female     141     136\n"," Extreme Obesity    Male     150      95\n"," Extreme Obesity    Male     173     131\n"," \n"," [198 rows x 3 columns],        Gender  Height  Weight\n"," Label                        \n"," Weak     Male     187      62\n"," Weak     Male     178      52\n"," Weak   Female     195      65\n"," Weak   Female     176      54\n"," Weak     Male     195      69\n"," Weak     Male     184      57\n"," Weak     Male     191      62\n"," Weak     Male     168      50\n"," Weak     Male     188      57\n"," Weak     Male     193      65\n"," Weak     Male     196      69\n"," Weak   Female     180      58\n"," Weak   Female     193      61\n"," Weak     Male     185      60\n"," Weak     Male     191      62\n"," Weak     Male     179      56\n"," Weak   Female     195      61\n"," Weak     Male     174      54\n"," Weak   Female     180      59\n"," Weak     Male     188      65\n"," Weak     Male     179      56\n"," Weak   Female     170      53,                 Gender  Height  Weight\n"," Label                                 \n"," Extremely Weak  Female     191      54\n"," Extremely Weak    Male     193      54\n"," Extremely Weak    Male     181      51\n"," Extremely Weak    Male     198      50\n"," Extremely Weak  Female     190      50\n"," Extremely Weak  Female     196      50\n"," Extremely Weak  Female     185      52\n"," Extremely Weak    Male     188      54\n"," Extremely Weak  Female     183      50\n"," Extremely Weak  Female     163      57\n"," Extremely Weak    Male     190      50\n"," Extremely Weak    Male     182      50\n"," Extremely Weak  Female     198      50]"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"w3bAyRh0MwPg","executionInfo":{"status":"aborted","timestamp":1617698307532,"user_tz":-540,"elapsed":2113,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["data[ (data['Gender'] == 'Male') & (data.index == 'Normal') ] ## Boolean index 복습"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"EPx7jWb8OwsE","executionInfo":{"status":"ok","timestamp":1617700261284,"user_tz":-540,"elapsed":676,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"54405074-7682-432d-c318-9ee0b6ce8a2b"},"source":["## 몸무게 별로 (인덱스 활용) 분류하여 그들의 키와 몸무게에 대한 산점도를 그려보자. \n","\n","plt.figure(figsize=(5,5))\n","list = data.index.unique()\n","color = ['black','blue','green','pink','purple','red']\n","for i,c in zip(list, color):\n","  plt.scatter(data.loc[i][\"Weight\"],data.loc[i][\"Height\"], c = c, label=i)\n","# data.loc[\"Normal\",[\"Weight\",\"Height\"]]\n","\n"],"execution_count":45,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"C7ty2IjNe6vu"},"source":["모델링\n","\n","1. 문제와 답으로 분리\n","\n","2. 훈련셋과 평가셋으로 분리  // 시험문제까지 배워버리면 안되잖아?? 그걸 방지한다.\n","\n","3. 모델생성 및 하이퍼파라미터 조정\n","\n","4. 학습 및 평가"]},{"cell_type":"code","metadata":{"id":"ghl5B6zbYAdX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617700271091,"user_tz":-540,"elapsed":714,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"51c97d31-1727-4de5-b693-f2ac172d20dc"},"source":["data = pd.read_csv(drive_path + 'bmi_500.csv')\n","\n","x = data.loc[:, 'Height':'Weight']                #x 변수엔 키와 무게 열\n","y = data.loc[:, 'Label']                          #y 변수엔 체중클래스 알려주는 열\n","\n","x_train = x.iloc[:350, :]                         #모델\n","y_train = y.iloc[:350]\n","\n","x_test = x.iloc[350:, :]\n","y_test = y.iloc[350:]\n","\n","model = KNeighborsClassifier(n_neighbors=10)\n","model.fit(x_train, y_train)                       #문제와 답을 통해 학습\n","pre = model.predict(x_test)                       #시험문제 풀어서 input\n","metrics.accuracy_score(pre, y_test)               #푼 시험문제를  채점해서 결과 알려줌\n","\n","\n","#캐글에서, 정답률을 높이거나 데이터의 정확성? 등을 따져서 심사함"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9333333333333333"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"jfvnaxqjfN0U","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617700273668,"user_tz":-540,"elapsed":726,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"cc42c0f5-4577-4d2f-b27d-fb84dfa8d9b1"},"source":["# 예측 활용\n","model.predict([[100, 20], [185, 43]])\n","# 키 100 몸무게 20인 사람이랑, 키 185 몸무게 43인 사람은 결과가 어떻게 나올까?\n"],"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Normal', 'Extremely Weak'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"iZWe59qfy3yP","colab":{"base_uri":"https://localhost:8080/","height":793},"executionInfo":{"status":"ok","timestamp":1617700277674,"user_tz":-540,"elapsed":1237,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"74371651-9082-4063-bc38-92c4328eaebf"},"source":["# Hyper Parameter 조정\n","index = []\n","score = []\n","for i in range(1, 30):\n","  knn = KNeighborsClassifier(n_neighbors=i)\n","  knn.fit(x_train, y_train)\n","  index.append(i)\n","  score.append( knn.score(x_test, y_test) )\n","  print('K가', i, '일때 정확도: {:.2f}'.format(score[i-1]))\n","\n","plt.plot(index, score)"],"execution_count":48,"outputs":[{"output_type":"stream","text":["K가 1 일때 정확도: 0.89\n","K가 2 일때 정확도: 0.89\n","K가 3 일때 정확도: 0.89\n","K가 4 일때 정확도: 0.89\n","K가 5 일때 정확도: 0.91\n","K가 6 일때 정확도: 0.92\n","K가 7 일때 정확도: 0.90\n","K가 8 일때 정확도: 0.91\n","K가 9 일때 정확도: 0.91\n","K가 10 일때 정확도: 0.93\n","K가 11 일때 정확도: 0.89\n","K가 12 일때 정확도: 0.91\n","K가 13 일때 정확도: 0.91\n","K가 14 일때 정확도: 0.89\n","K가 15 일때 정확도: 0.89\n","K가 16 일때 정확도: 0.89\n","K가 17 일때 정확도: 0.89\n","K가 18 일때 정확도: 0.89\n","K가 19 일때 정확도: 0.86\n","K가 20 일때 정확도: 0.87\n","K가 21 일때 정확도: 0.85\n","K가 22 일때 정확도: 0.85\n","K가 23 일때 정확도: 0.85\n","K가 24 일때 정확도: 0.85\n","K가 25 일때 정확도: 0.85\n","K가 26 일때 정확도: 0.85\n","K가 27 일때 정확도: 0.85\n","K가 28 일때 정확도: 0.84\n","K가 29 일때 정확도: 0.84\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f759a7380d0>]"]},"metadata":{"tags":[]},"execution_count":48},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"78ukD-195M_p"},"source":["### 머신러닝(Machine Learning) 진행 과정\n","\n","1. ProblemIdentification (문제정의)\n","2. Data Collect(데이터 수집)\n","3. Data Preprocessing(데이터 전처리)\n","4. EDA(탐색적 데이터분석)\n","5. Model 선택, Hyper Parameter 조정\n","6. 학습\n","7. 모델 Evaluation(평가)\n"]},{"cell_type":"markdown","metadata":{"id":"-I4zA6pOMk9Z"},"source":["1. 문제정의\n"," - 지도학습 : 분류, 회귀\n"," - 비지도학습 : 군집, 차원축소\n"," - 강화학습\n","\n","2. 데이터 수집\n"," - File Data, Database, 공공데이터, kaggle\n"," - Web Crawler (뉴스, SNS, 블로그)\n"," - IoT 센서를 통한 수집\n","\n","3. 데이터 전처리\n"," - 결측치, 이상치 수정\n"," - Encoding : Categorical Data를 수치 데이터로 변경, 원핫인코딩\n"," - Feature Engineering (특성공학) : 단위 변환, 새로운 속성 추가 (MinMaxScaler, StandardScaler, RobustScaler)\n","\n","4. EDA\n"," - 시각화를 통해 특성 선택 : (scatterplot, pairplot, boxplot, heatmap)\n"," - 사용할 Feature 선택 : 전처리 전략수립\n","    > 어떤 Column을 쓸거냐? 예를들어, 비만도를 구하는데 가장 중요한 column은 키와 몸무게로 판단되므로 굳이 성별 까지 넣을 필요는 없다. 이를 탐색적 분석이라고 한다. 시각화 할때는, 선형 플롯은 잘 안쓰고 관계를 보는 테이블을 자주 쓴다.\n","\n","\n","5. Model 선택, Hyper Parameter 조정\n"," - 목적에 맞는 적절한 모델 선택\n","  - 지도학습\n","\t - 분류 : knn, Logistic Regression, SVM, Decision Tree, RandomForest, GradientBoosting\n","\t - 회귀 : knn, Linear Regression, Lasso, Ridge, Decision Tree, RandomForest, GradientBoosting\n"," - 하이퍼파라미터 튜닝\n","\n","6. 학습\n"," - model.fit(X_train, y_train) : train 데이터와 test 데이터를 7:3 정도로 나눔 (train_test_split)\n"," - model.predict(X_test) :  (cross_val_score)\n"," > test 데이터는 학습에 넣으면 안됨!!\n","\n","\n","\n","7. 평가\n"," -\t지도학습\n","\t - 분류 : 정확도, 정밀도, 재현율, f1-score\n","\t - 회귀 : R^2, MSE, RMSE\n","\n"," -\t비지도학습\n","\t- ARI 값"]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"내꺼ml_04_지도학습_Ridge_Lasso_Regression.ipynb의 사본","provenance":[{"file_id":"1uexTLBROxCfZZOvXES1CAipXOVajjc5D","timestamp":1617780384080}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"m_B-TcuF2G5X","colab":{"base_uri":"https://localhost:8080/","height":501},"executionInfo":{"status":"ok","timestamp":1617894580251,"user_tz":-540,"elapsed":8220,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"c0b1571b-ac22-4ad6-98bb-324d1043e947"},"source":["!pip install mglearn\n","import mglearn\n","import sklearn\n","sklearn.__version__"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting mglearn\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/65/38/8aced26fce0b2ae82c3c87cd3b6105f38ca6d9d51704ecc44aa54473e6b9/mglearn-0.1.9.tar.gz (540kB)\n","\r\u001b[K     |▋                               | 10kB 12.9MB/s eta 0:00:01\r\u001b[K     |█▏                              | 20kB 9.1MB/s eta 0:00:01\r\u001b[K     |█▉                              | 30kB 8.3MB/s eta 0:00:01\r\u001b[K     |██▍                             | 40kB 7.1MB/s eta 0:00:01\r\u001b[K     |███                             | 51kB 4.1MB/s eta 0:00:01\r\u001b[K     |███▋                            | 61kB 4.5MB/s eta 0:00:01\r\u001b[K     |████▎                           | 71kB 4.8MB/s eta 0:00:01\r\u001b[K     |████▉                           | 81kB 5.0MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 92kB 5.3MB/s eta 0:00:01\r\u001b[K     |██████                          | 102kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████▊                         | 112kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 122kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████▉                        | 133kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████▌                       | 143kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████                       | 153kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████▊                      | 163kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████▎                     | 174kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████                     | 184kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████▌                    | 194kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 204kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 215kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████▍                  | 225kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 235kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████▋                 | 245kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 256kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 266kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 276kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 286kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▋              | 296kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 307kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 317kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████████▍            | 327kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 337kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████▋           | 348kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 358kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 368kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 378kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 389kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 399kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 409kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▉       | 419kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▌      | 430kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 440kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▊     | 450kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 460kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 471kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 481kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 491kB 5.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▊  | 501kB 5.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 512kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 522kB 5.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▌| 532kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 542kB 5.4MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from mglearn) (1.19.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mglearn) (3.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from mglearn) (0.22.2.post1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from mglearn) (1.1.5)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from mglearn) (7.1.2)\n","Requirement already satisfied: cycler in /usr/local/lib/python3.7/dist-packages (from mglearn) (0.10.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.7/dist-packages (from mglearn) (2.4.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from mglearn) (1.0.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mglearn) (1.3.1)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mglearn) (2.8.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mglearn) (2.4.7)\n","Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->mglearn) (1.4.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->mglearn) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler->mglearn) (1.15.0)\n","Building wheels for collected packages: mglearn\n","  Building wheel for mglearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mglearn: filename=mglearn-0.1.9-py2.py3-none-any.whl size=582638 sha256=548f56b57bbbbb9aff68ab1c1db5b9fd4242cdc665ffe2163b010e83b080befd\n","  Stored in directory: /root/.cache/pip/wheels/eb/a6/ea/a6a3716233fa62fc561259b5cb1e28f79e9ff3592c0adac5f0\n","Successfully built mglearn\n","Installing collected packages: mglearn\n","Successfully installed mglearn-0.1.9\n"],"name":"stdout"},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'0.22.2.post1'"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"gTZHDr3OogcO"},"source":["# 지도학습 - 규제선형모델 (Ridge_Lasso_Regression)\n"]},{"cell_type":"markdown","metadata":{"id":"GeEb2zESkWkI"},"source":["Linear Regression의 문제\n","\n","- 단순 선형회귀 : 단 하나의 특성(feature)을 가지고 라벨값(label) 또는 타깃(target)을 예측하기 위한\n","회귀 모델을 찾는 것\n","- 다중 선형회귀 : 여러 개의 특성을 활용해서 회귀모델을 찾는 것 ( = 다변수 선형회귀 라고도 함)\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"wwoirwFLOZa6"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"naenDMKWko1w"},"source":["다중 선형 회귀 모델은 과대적합(overfitting) 될 때가 종종 발생\n","<br>\n","확장 보스턴 데이터셋 같은 경우 이게 발생했다.\n","\n","주어진 샘플들의 특성값들과 라벨값의 관계를 필요이상으로 너무 자세하게 복잡하게 분석했다는 것\n","- 새로운 데이터가 주어졌을 때 제대로 예측해내기가 어려움 (일반화 능력이 떨어짐)\n","- Ridge / Lasso / Elastic Regression 등장"]},{"cell_type":"markdown","metadata":{"id":"ZxqInZoR3GeR"},"source":["Bias(편향) 오차와 Variance(분산) 오차\n","\n","특성이 증가하면 복잡성이 증가 -> variance는 증가, bias는 감소 -> Overfitting 발생\n","\n","<center>\n"," <img src=\"https://t1.daumcdn.net/cfile/tistory/99CDCC33599AC28F07\" alt=\"편향과 분산\" width=\"40%\" />\n","\n"," Bias(편향) 오차와 Variance(분산) 오차를 표현\n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"oD2GVA7J5PIU"},"source":["- bias 감소가 variance의 증가와 같아지는 최적의 point를 찾아야 함\n","- Overfitting 문제 해결 : 데이터의 복잡도 줄이기, 정규화를 통한 분산 감소\n","\n","<center>\n"," <img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F996DB433599AC34225B9BD\" alt=\"모델 복잡도\" width=\"40%\" />\n","\n"," 모델 복잡도\n","\n","</center>\n","\n","학습을 시킬수록 (=모델 복잡도가 올라갈 수록) Bias(편향)은 줄어드나(↓)  Variance(분산)는 올라간다(↑)\n","\n","학습이 덜될수록 (=모델 복잡도가 낮을수록) Bias(편향)은 올라가나(↑) Variance(분산)는 내려간다(↓)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lW0YyHhd-MAx"},"source":["\n","|구분| 모델 복잡도| 적합성|\n","|---|---|---|\n","|Bias 오차가 낮은 & Variance 오차가 높은|복잡| 과대적합(over fitting)|\n"," |Bias 오차가 높은 Variance 오차가 낮은| 단순| 과소적합(under fitting)|\n","\n","* Bias(편향) 에러가 높아지는 것은  많은 데이터를 고려하지 않아 (=모델이 너무 단순)  정확한 예측을 하지 못하는 경우\n","\n","* Variance(분산) 에러는 노이즈까지 전부 학습하여 (=모델이 너무 복잡) 약간의 input에도 예측 Y 값이 크게 흔들리는 것\n","\n","이 두가지 에러가 상호 Trade-off 관계에 있어서 이 둘을 모두 잡는 것은 불가능 한 딜레마가 발생"]},{"cell_type":"markdown","metadata":{"id":"XggniyAHpb9n"},"source":["정규화(Regularization, 규제)\n","\n","- 과대적합이 되지 않도록 모델을 강제로 제한하는 것을 의미.\n","- 가중치(w)의 값을 조정하여 제약을 주는 것.\n","\n","- L1 규제 : Lasso\n","  - <font  color=yellow>w의 모든 원소에 똑같은 힘으로 규제를 적용하는 방법. 특정 계수들은 0이 됨.      \n","  - 특성선택(Feature Selection)이 자동으로 이루어진다.</font>\n","\n","- L2 규제 : Ridge\n","  - <font  color=yellow>w의 모든 원소에 골고루 규제를 적용하여 0에 가깝게 만든다.</font>\n"]},{"cell_type":"markdown","metadata":{"id":"zHeJUocP-DZR"},"source":["## Ridge Regression"]},{"cell_type":"markdown","metadata":{"id":"xm-rHLfBFiuz"},"source":["평균제곱오차식에 alpha 항이 추가\n","- alpha 값을 크게 하면 패널티 효과가 커지고(가중치 감소),\n","- alpha 값을 작게 하면 그 반대가 된다."]},{"cell_type":"markdown","metadata":{"id":"OC0QA0yjmhrT"},"source":["- 기존 선형회귀에서는 적절한 가중치와 편향을 찾아내는 것이 관건\n","- 추가적인 제약 조건(규제항)을 포함 – 가중치에 대한 제곱의 합을 사용\n","- <font  color=yellow>MSE가 최소가 되게 하는 가중치(w)와 편향(b)을 찾는</font> 동시에 <font  color=yellow> MSE와 규제항의 합이 최소</font>가 되어야 함 -> 가중치 W의 모든 원소가 0이 되거나 0에 근사하도록 -> <font  color=yellow>학습한 가중치 (W)의 제곱을 규제항 (L2 규제)</font>으로 사용\n","\n","> \\\\( cost(W,b)\\\\ =MSE+규제항\\\\ =MSE+\\alpha \\cdot { L }_{ 2 }norm\\\\ =\\cfrac { 1 }{ m } \\sum\\limits _{ i=1 }^{ m }{ (H({ x }^{ (i) })-{ y }^{ (i) }) } ^{ 2 }+\\alpha \\sum\\limits _{ j=1 }^{ n }{ { w }_{ j }^{ 2 } } \\\\ (n : 가중치의 개수, α : 규제의 정도) \\\\)\n","\n","> MSE에 의한 Overfitting을 줄이기 위해 α를 크게 함 -> 정확도 감소 -> α가 너무 크면 MSE의 비중이 작아져서 과소적합 가능성 증가\n","\n","- α가 증가하면 bias는 증가하고 variance는 감소하며 α가 0이 되면 MSE와 동일하게 되어 선형 회귀모델이 됨 -> Ridge 모델은 <font  color=yellow>bias을 약간 손해보면서 variance를 크게 줄여</font> 성능의 향상\n","- 단점 : <font  color=yellow>몇몇 변수가 중요하더라도 모든 변수에 대해 적합을 해야 하고 완벽한 0은 나오지 않음</font> -> 예측의 문제가 아니라 해석의 문제"]},{"cell_type":"markdown","metadata":{"id":"eSxLnLuiIMTI"},"source":["Ridge()\n","```\n","Ridge(alpha, fit_intercept, normalize, copy_X, max_iter, tol, solver, random_state)\n","```\n","\n","- alpha : 값이 클수록 강력한 정규화(규제) 설정하여 분산을 줄임, 양수로 설정\n","- fit_intercept : 모형에 상수항 (절편)이 있는가 없는가를 결정하는 인수 (default : True)\n","- normalize : 매개변수 무시 여부\n","- copy_X : X의 복사 여부\n","- max_iter : 계산에 사용할 작업 수\n","- tol : 정밀도\n","- solver : 계산에 사용할 알고리즘 (auto, svd, cholesky, lsqr, sparse_cg, sag, saga)\n","- random_state : 난수 seed 설정\n"]},{"cell_type":"markdown","metadata":{"id":"B750N3Vajl4k"},"source":["#### Ridge_Lasso_Regression 실습 01\n","\n","확장 보스턴 집값 셋에 선형회귀 적용"]},{"cell_type":"code","metadata":{"id":"WNWaeRb-O3yY","executionInfo":{"status":"ok","timestamp":1617894580251,"user_tz":-540,"elapsed":8210,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n","%matplotlib inline"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"XZHI09W-jlXi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894580252,"user_tz":-540,"elapsed":8201,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"046c7ea4-ebd2-43a8-d8fd-0d224078e67d"},"source":["# 확장 보스턴 집값\n","import mglearn\n","from sklearn.model_selection import train_test_split\n","\n","X,y = mglearn.datasets.load_extended_boston()\n","X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=0)\n","model_lr = LinearRegression()\n","model_lr.fit(X_train,y_train)\n","\n"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"ryLkC1Vojyz-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894580252,"user_tz":-540,"elapsed":8190,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"bfb8abd8-3b2a-4eeb-cb10-ad57462773ed"},"source":["# 훈련 세트 점수\n","\n","model_lr.score(X_train,y_train)\n"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9520519609032727"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"Dok3l3PYjvO6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894580253,"user_tz":-540,"elapsed":8181,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"99fde8bc-3ca3-4df7-85b9-e3e70d1fbfbd"},"source":["# 테스트 세트 점수\n","model_lr.score(X_test,y_test)\n"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.607472195966557"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"jgo3UgzhlDJs"},"source":["- 훈련 셋에 비해 테스트 셋의 경우 정확도가 많이 떨어짐 -> 과대적합"]},{"cell_type":"markdown","metadata":{"id":"aiDpGVLn1GOX"},"source":["확장 보스턴 집값 셋에 릿지회귀 적용"]},{"cell_type":"code","metadata":{"id":"6_tFVO-Bk65j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894580253,"user_tz":-540,"elapsed":8171,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"26a65ffc-a775-4056-a1f7-d7695e8fd7a9"},"source":["# model_ridge\n","model_ridge_1 = Ridge().fit(X_train, y_train)\n","\n","print(\"훈련 세트 점수: {:.2f}\".format( model_ridge_1.score(X_train, y_train) ))\n","print(\"테스트 세트 점수: {:.2f}\".format( model_ridge_1.score(X_test, y_test) ))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["훈련 세트 점수: 0.89\n","테스트 세트 점수: 0.75\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sxHams2JdANR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894580254,"user_tz":-540,"elapsed":8160,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"fa6dee12-97a1-4255-c7e4-1bd74e6f710a"},"source":["model_ridge_10 = Ridge(alpha=10).fit(X_train, y_train)\n","\n","print(\"훈련 세트 점수: {:.2f}\".format( model_ridge_10.score(X_train, y_train) ))\n","print(\"테스트 세트 점수: {:.2f}\".format( model_ridge_10.score(X_test, y_test) ))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["훈련 세트 점수: 0.79\n","테스트 세트 점수: 0.64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5b_4GUNhmsTI"},"source":["- x 축은 coef_의 원소를 위치대로 나열한 것 (x=0은 첫 번째 특성에 연관된 계수이고 x=1은 두 번째 특성에 연관된 계수로 x=100까지 계속)\n","- y 축은 각 계수의 수치\n","\n","- alpha=10일 때 대부분의 계수는 -3과 3 사이에 위치\n","- alpha=1일 때 Ridge 모델의 계수는 좀 더 증가\n","- alpha=0.1일 때 계수는 더 커지며 아무런 규제가 없는(alpha=0) 선형 회귀의 계수는 값이 더 커져 그림 밖으로 넘어감."]},{"cell_type":"markdown","metadata":{"id":"y9KIWU8GmuqQ"},"source":["#### 학습곡선 (Learning Curve)\n","\n","데이터셋의 크기에 따른 모델의 성능 변화를 나타낸 그래프"]},{"cell_type":"markdown","metadata":{"id":"JyYd6Io7KEr1"},"source":["- alpha 값을 고정하고 훈련 데이터의 크기 변화에 따른 모델의 성능 변화를 나타낸 그래프\n","\n","- 보스턴 주택가격 데이터셋에서 여러 가지 크기로 샘플링하여 LinearRegression과 Ridge(alpha=1)을 적용한 것"]},{"cell_type":"code","metadata":{"id":"A-CcGhgGmwUv","colab":{"base_uri":"https://localhost:8080/","height":325},"executionInfo":{"status":"ok","timestamp":1617894588325,"user_tz":-540,"elapsed":16221,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"382c05ad-5a46-46cf-c6f1-074c7844e124"},"source":["mglearn.plots.plot_ridge_n_samples()"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYoAAAE0CAYAAAAyvnQVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd3xT5f4H8M+Tne5JJx20Tdu0ZbVsQUCmIuIFB6h49So4cOHi/q5y3deJoqKCXgduUa8iQgEVUVAEymzZBVq66G7aptnP74+TlFDatLRJ07Tf9+uVV5PznJzzTQj55pmHcc5BCCGEtEXk7gAIIYT0bJQoCCGEOESJghBCiEOUKAghhDhEiYIQQohDlCgIIYQ4JHF3ABcrJyenn0QieQ9AOijREUJ6BwuAXJPJdFtmZma5u4NpyeMShUQieS88PDw1NDS0RiQS0SQQQojHs1gsrKKiQl1WVvYegJnujqclT/xFnh4aGqqhJEEI6S1EIhEPDQ2tg9BS0uN4YqIQUZIghPQ21u+1Hvmd3CODIoQQ0nNQouiixYsXR+p0OtaZ5/72229eM2fOjG9vv9OnT0tHjBih6sw52vL6668H+/r6Dk5JSVEnJCSkjR8/PrGwsLC5z+rSSy9NzMvLk7f23OHDhyd//vnn/s6Mpzfw5M/CtGnTBrTc/umnn/ovXLgw2pnnak9UVFRGfHx8WnJysnrAgAFpy5YtC+nO81+Mjv6b9QbM0xYF3L9//+lBgwZVujsOG8ZYZm1t7V5/f39LyzKj0QipVOqOsNr1+uuvB69fv94/Ozv7pMViwcyZMwf4+/ubPv3008L2njt8+PDkBx54oGzu3Ll13RGrp+gNnwV3xWB7f6KiojK+++6748OGDdPt2rVLMXr0aPXx48cPxsXFGZ15np5q//79IYMGDYpzdxwtUY2iC2666aYYABg2bFhKSkqKurKyUjx79uy46667LjYzMzM5IyNDDQAzZ86MT09PT1WpVOrJkycnVFRUiAFg3bp1vunp6akAcPToUVlgYOCge+65Jyo1NVUdFxeXvnHjRh/7Mtt5GWOZS5YsCU9PT0+Njo7O+PDDDwNsZR9++GFAfHx8WmpqqnrJkiXhjLHMuro6h//OIpEIY8eOrS8uLpbZtkVFRWXs2rVLAQA5OTmKgQMHpiQmJqbNmDFjgF6vb/7VbCtLSkpKu+qqq+IHDRqUYqttFBQUSKdNmzYgIyMjVaVSqZcsWRLe9Xe9Z+otnwV79jWNdevW+aakpKjnzZsXq1Kp1MnJyeo9e/YobPu+8cYbwQMHDkxJS0tLHTlypGr//v1yANi5c6cyMzMzWa1WpyYkJKQ99dRT/WzPae39sTds2DCdn5+fuaCgQAoA+/fvl48bNy4pPT09NTk5Wb18+fLgjrxWxljm4sWLI9PT01MfeuihyOrqatF1110Xa/tc3nLLLf1NJhMA4MEHH4yIj49PS0lJUaempqorKyvF9fX1ounTpw9ISEhIS05OVl9++eXN74nt3wwA3nzzzWCVSqW2/dsWFxdLbO/jmDFjkq644ooBiYmJaUOHDk2xr717Ao8KtjVXvbktueW2qenh1XeNT6xo1JtE897dkdSyfNaQqMpbxsRXlWt0kttX705oWT53eEz59cNjato798cff1z4ySefhO7ateuI/a/IvLw8rz/++OOon5+fBQBWrlx5JiIiwgQA9957b+S///3v8Lfeequ45fFqa2slo0ePbnjjjTeK33777aB//vOf0VOnTj3S2rn9/PzMubm5hzdt2uR94403Jvz973+vPXPmjOT++++P+/333w9nZGTon3zyyX6tPbclnU7HNm7c6D9nzpxWX/P8+fPj77jjjvJ77rmn6ueff/aeMmVKin3Z3Xffffauu+6q/u2337wmTJjQ/B9n7ty5cY8//njp9OnTG3Q6HRszZoxqxIgR2quvvlrTkbgu2qoJF3wWkHplNcYuroC+QYSPrrzgs4BB11VixB1VqC+T4PO5F3wWkPn3cmTe3Gc+C46cOHFC8d///vfUmDFjmh599NHwJ554ImLt2rWnsrOzfb755pvAv/7666hSqeRfffWV3y233BK/Z8+eI0lJSfpt27YdUyqVvK6uTjR06NDUGTNmaIYOHapr7f2xt2nTJu/AwEDTiBEjmoxGI+bNmzfgk08+OTVkyBBdTU2NaMiQIepx48Y1hoSEmNp7rUql0pKbm3sYAK677rrYcePG1X/55ZcFZrMZs2bNil++fHnIjTfeWLNq1aqw0tLS/T4+Prympkbk4+Nj+fzzzwPq6+vF+fn5eQBgS+72du3apXjqqaeidu3adTg2NtZ43333RS5YsCDmxx9/PAkABw8e9N6zZ09eYmKi8frrr4996aWXwt54440L/t17KqpRuMDMmTNr7D/4K1euDE5LS0tVqVTqb7/9NvjgwYNerT3Py8vLYmvOGTduXGNhYWGrfQQAcMstt9QAwMSJExsrKiqkWq2W/fbbb95qtboxIyNDDwCLFi2qchTn9u3b/VJSUtShoaGDqqqqJLfeemt1y32qq6tFx48fV951111VAHDZZZc1JiUlNdmXLVy4sNoas1alUjUBgEajEe3cudP3gQceiElJSVEPHjw4tby8XJqXl6doeY7ezFM+Cx0RHx+vHzNmTBMAjB49urGgoEAOAN99913A4cOHvYYMGZKakpKifvzxx6NLS0ulANDQ0CC6/vrr41QqlXr48OEp5eXl0t27dyvben8A4Nprr02Ii4tLnz59esrjjz9erFAo+IEDBxQnT55UzJ07d0BKSop61KhRKUajkR08eFDRkde6cOHC5ubqzZs3Byxfvjw8JSVFnZaWpj548KD3sWPHFMHBwebY2Fj9NddcE//KK6+EaDQasVQqRVZWljY/P19x0003xbz//vuBCoXigvb6TZs2+U2YMKEuNjbWCAD33ntvxfbt2/1s5ZmZmQ2JiYlGABgxYkTjqVOn2vz37Ik8vkbx/aJLjrZV5i2XWByV9/NTmByVd5aPj4/Zdj87O9vngw8+CP3zzz+PREZGmt55552g999/P7S158lksub/MBKJhJvN5tZ2AyB8kVj3AwAYjcaL7kQdM2aMJjs7+2RNTY1owoQJqsWLF0e98847RRd7HMYuPLXZbAZjDPv37z8sl8u7pyNswZa2/y3lPhaH5b7hJoflneQpn4WOkMvlzTGJxWKYzWYGAJxzzJ07t/K1114rafmcBx98MCosLMz49ddfn5JKpRgzZkySTqdr/oFq//7YfPXVV/nDhg3Tvf/++4GLFi2KmzhxYi7nHAEBAaYjR44carn/p59+2u7ACvtaHucc33333Qm1Wm1oud/evXsPb9q0yeenn37yGzZsWOoPP/xwfMSIEU2HDh3KW7dund+GDRv8n3zyyajDhw/ntXdOey3eO25r6vIUVKPoIm9vb0t1dfUFVVGb6upqsa+vrzksLMzU1NTEVq9e7bJRHOPGjWs8dOiQt2200ttvvx3c3nMAIDAw0LJy5cqC1atXh9rag22CgoIsKpWqaeXKlUEAsGXLFq/jx48rbWWJiYlNq1at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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"SK2HwoCJm7lK"},"source":["- 선형 회귀 및 리지 회귀 모두 훈련 셋에서 점수가 테스트 셋보다 높음\n","- 리지 회귀는 규제를 받고 있기 때문에 훈련 셋에서는 선형 회귀보다 전체적으로 점수가 낮음\n","- 테스트 셋에서는 선형 회귀보다 리지 회귀의 점수가 더 높음 \n","- 데이터 수가 400 미만인 경우 선형회귀는 학습을 하지 못하지만 리지 회귀는 학습이 가능\n","- 데이터의 수가 많아지면 선형 회귀의 성능이 리지 회귀의 성능이 같아짐\n","- 데이터가 많아지면 선형 회귀의 훈련 데이터 성능 감소 (과대 적합 감소)"]},{"cell_type":"markdown","metadata":{"id":"VMETHZ_bm9dv"},"source":["## Lasso Regression"]},{"cell_type":"markdown","metadata":{"id":"q7W0ttDOJhLJ"},"source":["- 릿지 회귀의 단점을 해결하기 위해 대안으로 나온 방법\n","학습한 가중치의 절대값을 규제항(L1 규제)으로 사용 – 가중치의 절대값의 합을 사용\n","- 학습한 가중치의 절대값을 규제항(L1 규제)으로 사용 – 가중치의 절대값의 합을 사용\n","- 연산을 몇번 진행할거닞에 대한 max_iter 항이 기본적으로 필요함\n","\n","> \\\\(  \\begin{align} \n","cost(W,b)   \\\\ \n","& =MSE+규제항 \\\\  \n","& =MSE+\\alpha \\cdot { L }_{ 1 }norm \\\\  \n","& =\\cfrac { 1 }{ m } \\sum\\limits_{ i=1 }^{ m }{ (H({ x }^{ (i) })-{ y }^{ (i) }) } ^{ 2 }+\\alpha \\sum\\limits_{ j=1 }^{ n }{ \\left| { w }_{ j } \\right|  }  \\\\\n","& (n:가중치의개수,α:규제의정도)  \\end{align} \\\\)\n","\n","\n","- 적당한 α만으로 몇몇 계수를 정확하게 0으로 만들 수 있음 -> 해석을 용이하게 함\n","- MSE와 규제항의 합이 최소가 되게 하는 파라미터 W와 b를 찾는 것이 Lasso의 목표\n","- MSE항이 작아질 수록 오차가 작아지고, L1-norm이 작아질 수록 많은 가중치들이 0이 되거나 0에 가까워짐 -> 데이터 전 처리에 주로 사용 (필요 없는 데이터 제거)\n","- Ridge와 Lasso의 성능 차이는 사용하는 데이터의 상황에 따라 다름 -> 유의미한 변수가 적을 때는 Lasso가 반대의 경우는 Ridge가 더 좋은 성능을 보임."]},{"cell_type":"markdown","metadata":{"id":"x60tFa_hIwF3"},"source":["Lasso()\n","```\n","Lasso(alpha, fit_intercept, normalize, precompute, copy_X, max_iter, tol, warm_start, positive, solver, random_state, selection)\n","```\n","- alpha : 값이 클수록 강력한 정규화(규제) 설정하여 분산을 줄임, 양수로 설정\n","- fit_intercept : 모형에 상수항 (절편)이 있는가 없는가를 결정하는 인수 (default : True)\n","- normalize : 매개변수 무시 여부\n","- precompute : 계산속도를 높이기 위해 미리 계산된 그램 매트릭스를 사용할 것인지 여부\n","- copy_X : X의 복사 여부\n","- max_iter : 계산에 사용할 작업 수  ★\n","- tol : 정밀도\n","- warm_start : 이전 모델을 초기화로 적합하게 사용할 것인지 여부\n","- positive : 계수가 양수로 사용할 것인지 여부\n","- solver : 계산에 사용할 알고리즘 (auto, svd, cholesky, lsqr, sparse_cg, sag, saga)\n","- random_state : 난수 seed 설정\n","- selection : 계수의 업데이트 방법 설정 (random으로 설정하면 tol이 1e-4보다 높을 때 빠른 수렴)"]},{"cell_type":"code","metadata":{"id":"5UKOcWuwnpO9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894588325,"user_tz":-540,"elapsed":16211,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"7ae1a354-7ee0-4db8-891b-3765108a5dbd"},"source":["from sklearn.linear_model import Lasso\n","\n","# lasso\n","# 기본 alpha값 1, 기본 반복횟수 1000\n","model_lasso= Lasso() \n","model_lasso.fit(X_train,y_train)\n","\n","print(\"훈련 세트 점수: {:.2f}\".format( model_lasso.score(X_train, y_train) ))\n","print(\"테스트 세트 점수: {:.2f}\".format( model_lasso.score(X_test, y_test) ))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["훈련 세트 점수: 0.29\n","테스트 세트 점수: 0.21\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"c2-Ynff2dJ_A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894588326,"user_tz":-540,"elapsed":16202,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"1b21a858-29d8-46ed-bcd2-67ab68466e44"},"source":["\n","\n","model_lasso_alpha_001 = Lasso(alpha=0.002, max_iter=10000).fit(X_train, y_train)\n","\n","print(\"훈련 세트 점수: {:.2f}\".format( model_lasso_alpha_001.score(X_train, y_train) ))\n","print(\"테스트 세트 점수: {:.2f}\".format( model_lasso_alpha_001.score(X_test, y_test) ))\n","print(\"사용한 특성 수: {}\".format(np.sum(model_lasso_alpha_001.coef_ != 0)))        # 원래 100개가 넘는 속성이 있었는데, 라쏘 모델이 이중 의미없다고 판단한건 다 거르고 일부만 사용했다.\n","                                                                                    # 즉 coef_를 통해 가중치들을 출력해보면, 라쏘 모델이 필요없다고 판단되어 날린 가중치는 전부 0으로 되어 있을 것이다.\n","                                                                                    \n","\n","#알파값.테스트값을 조정하면서 테스트값이 최대가 되는 지점을 찾자."],"execution_count":11,"outputs":[{"output_type":"stream","text":["훈련 세트 점수: 0.93\n","테스트 세트 점수: 0.78\n","사용한 특성 수: 56\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"X09krxNGK-Cl","executionInfo":{"status":"ok","timestamp":1617894588978,"user_tz":-540,"elapsed":16844,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"e3e4165d-24a4-4e9b-c111-29896ace7e54"},"source":["plt.plot(model_lasso_alpha_001.coef_,'v',label=\"Lasso alpha 0,01\")\n","plt.legend()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f09ae70de50>"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"baAgXBxpnO3X"},"source":["- alpha=1일 때 가중치가 대부분 0\n","- alpha=0.01이면 0이 되는 특성이 약간 감소\n","- alpha=0.0001이면 규제가 약해져서 값도 커짐\n","\n","- alpha=0.1인 리지 회귀는 alpha=0.01인 라쏘 회귀와 성능이 비슷하지만 리지 회귀를 사용하면 어떤 계수도 0이 되지 않음.\n","\n","- 보통 리지 회귀를 주로 사용하지만 특성이 많고 그 중 일부분만 사용하고자 한다면 라쏘가 좋은 선택 ★★★★"]},{"cell_type":"code","metadata":{"id":"ucNkl0J1UY9_","executionInfo":{"status":"ok","timestamp":1617894588980,"user_tz":-540,"elapsed":16837,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":[""],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nX0vWJyMzyHw"},"source":["## ElasticNet Regression"]},{"cell_type":"markdown","metadata":{"id":"qNhBEvwxz1nb"},"source":["- 선형 회귀에 2가지 규제항 (L1 규제항, L2 규제항)을 추가한 것\n","\n","> \\begin{align}\n","cost(W,b)\\\\ \n","& =MSE+규제항\\\\\n","& =MSE+ { \\alpha }_{ 1 }\\cdot { L }_{ 1 }norm + { \\alpha }_{ 2 }\\cdot { L }_{ 2 }norm\\\\\n","& =\\cfrac { 1 }{ m } \\sum\\limits _{ i=1 }^{ m }{ (H({ x }^{ (i) })-{ y }^{ (i) }) } ^{ 2 } +\\alpha _{ 1 }\\sum\\limits _{ j=1 }^{ n }{ \\left| { w }_{ j } \\right|  +\\alpha _{ 2 }\\sum\\limits_{ j=1 }^{ n }{ { w }_{ j }^{ 2 } } } \\\\\n","& (n:가중치의개수,α:규제의정도) \\end{align}"]},{"cell_type":"markdown","metadata":{"id":"Sulpmmg910dE"},"source":["ElasticNet()\n","```\n","ElasticNet(alpha, l1_ratio, fit_intercept, normalize, precompute, max_iter, copy_X,\n","tol, warm_start, positive, random_state, selection)\n","```\n","- alpha : 값이 클수록 강력한 정규화(규제) 설정하여 분산을 줄임, 양수로 설정\n","- l1_ratio : L1 규제의 비율 (혼합비율?)\n","- fit_intercept : 모형에 상수항 (절편)이 있는가 없는가를 결정하는 인수 (default : True)\n","- normalize : 매개변수 무시 여부\n","- precompute : 계산속도를 높이기 위해 미리 계산된 그램 매트릭스를 사용할 것인지 여부\n","- copy_X : X의 복사 여부\n","- max_iter : 계산에 사용할 작업 수\n","- tol : 정밀도\n","- warm_start : 이전 모델을 초기화로 적합하게 사용할 것인지 여부\n","- positive : 계수가 양수로 사용할 것인지 여부\n","- random_state : 난수 seed 설정\n","- selection : 계수의 업데이트 방법 설정 (random으로 설정하면 tol이 1e-4보다 높을 때 빠른 수렴)"]},{"cell_type":"markdown","metadata":{"id":"0eXTUaIV94K9"},"source":["## 다항회귀"]},{"cell_type":"code","metadata":{"id":"yHOmjG5DxhDn","colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"status":"ok","timestamp":1617894588981,"user_tz":-540,"elapsed":16830,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"49ccf294-44df-4c07-f0ad-8cfd08d9f809"},"source":["#특성공학 할때 사용\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","n = 100\n","\n","x = 6 * np.random.rand(n, 1) - 3\n","y = 0.5 * x**2 + x + 2 + np.random.rand(n, 1)   #noise 부여\n","\n","plt.scatter(x, y, s=5)\n"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7f09ae185510>"]},"metadata":{"tags":[]},"execution_count":13},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"SpYNOsFfyNL_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894588982,"user_tz":-540,"elapsed":16820,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"ee34e8bd-fa6e-44f0-b06f-5c3f67bf6a59"},"source":["from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import PolynomialFeatures\n","\n","# 데이터 변환 과정과 머신러닝을 연결해주는 파이프라인\n","from sklearn.pipeline import make_pipeline  \n","\n","poly_features = PolynomialFeatures(degree=2, include_bias=True)      #다항회귀 모델 생성\n","x_poly = poly_features.fit_transform(x)                               #모델에 학습 데이터 부여\n","# np.array.concatenate(x,x_poly)\n","\n","x_poly"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.00000000e+00,  1.44143951e+00,  2.07774787e+00],\n","       [ 1.00000000e+00, -3.76002451e-01,  1.41377843e-01],\n","       [ 1.00000000e+00,  3.63139672e-01,  1.31870421e-01],\n","       [ 1.00000000e+00,  1.94772074e+00,  3.79361606e+00],\n","       [ 1.00000000e+00,  8.36681838e-01,  7.00036497e-01],\n","       [ 1.00000000e+00,  1.21837905e+00,  1.48444750e+00],\n","       [ 1.00000000e+00,  1.45926032e+00,  2.12944067e+00],\n","       [ 1.00000000e+00, -9.06704076e-01,  8.22112281e-01],\n","       [ 1.00000000e+00, -2.24422080e+00,  5.03652699e+00],\n","       [ 1.00000000e+00,  1.66910443e+00,  2.78590961e+00],\n","       [ 1.00000000e+00,  2.51696416e+00,  6.33510859e+00],\n","       [ 1.00000000e+00, -3.55906850e-01,  1.26669686e-01],\n","       [ 1.00000000e+00,  1.15935766e+00,  1.34411018e+00],\n","       [ 1.00000000e+00, -6.55264149e-01,  4.29371105e-01],\n","       [ 1.00000000e+00, -2.00287638e+00,  4.01151378e+00],\n","       [ 1.00000000e+00,  1.23337776e-01,  1.52122069e-02],\n","       [ 1.00000000e+00, -4.15719834e-02,  1.72822980e-03],\n","       [ 1.00000000e+00, -1.92958183e+00,  3.72328603e+00],\n","       [ 1.00000000e+00,  1.85166581e+00,  3.42866626e+00],\n","       [ 1.00000000e+00, -1.68690218e+00,  2.84563895e+00],\n","       [ 1.00000000e+00, -1.40554426e+00,  1.97555468e+00],\n","       [ 1.00000000e+00, -2.07175779e+00,  4.29218033e+00],\n","       [ 1.00000000e+00, -1.81413712e+00,  3.29109351e+00],\n","       [ 1.00000000e+00, -9.71848675e-01,  9.44489848e-01],\n","       [ 1.00000000e+00, -9.65196162e-01,  9.31603631e-01],\n","       [ 1.00000000e+00, -2.90444190e+00,  8.43578278e+00],\n","       [ 1.00000000e+00,  6.43166170e-01,  4.13662722e-01],\n","       [ 1.00000000e+00,  1.05602009e+00,  1.11517842e+00],\n","       [ 1.00000000e+00,  1.45864198e+00,  2.12763644e+00],\n","       [ 1.00000000e+00,  1.88605705e+00,  3.55721118e+00],\n","       [ 1.00000000e+00,  1.28026867e+00,  1.63908786e+00],\n","       [ 1.00000000e+00, -2.65828247e+00,  7.06646567e+00],\n","       [ 1.00000000e+00,  2.37293125e+00,  5.63080274e+00],\n","       [ 1.00000000e+00,  2.35087542e+00,  5.52661525e+00],\n","       [ 1.00000000e+00, -6.98998283e-01,  4.88598599e-01],\n","       [ 1.00000000e+00,  1.67907733e+00,  2.81930068e+00],\n","       [ 1.00000000e+00,  2.89101595e+00,  8.35797321e+00],\n","       [ 1.00000000e+00,  1.69842534e+00,  2.88464862e+00],\n","       [ 1.00000000e+00, -6.21500908e-01,  3.86263379e-01],\n","       [ 1.00000000e+00, -9.92629214e-02,  9.85312756e-03],\n","       [ 1.00000000e+00, -3.14721096e-01,  9.90493684e-02],\n","       [ 1.00000000e+00, -2.09358817e+00,  4.38311141e+00],\n","       [ 1.00000000e+00,  2.47358105e+00,  6.11860321e+00],\n","       [ 1.00000000e+00,  2.91899089e+00,  8.52050780e+00],\n","       [ 1.00000000e+00,  2.72102246e+00,  7.40396323e+00],\n","       [ 1.00000000e+00,  1.12107714e+00,  1.25681395e+00],\n","       [ 1.00000000e+00,  1.31470437e+00,  1.72844759e+00],\n","       [ 1.00000000e+00, -5.19124604e-01,  2.69490354e-01],\n","       [ 1.00000000e+00,  1.41660287e+00,  2.00676369e+00],\n","       [ 1.00000000e+00, -1.97213446e+00,  3.88931432e+00],\n","       [ 1.00000000e+00,  1.11098798e+00,  1.23429430e+00],\n","       [ 1.00000000e+00, -1.59072721e+00,  2.53041307e+00],\n","       [ 1.00000000e+00,  2.07426514e+00,  4.30257587e+00],\n","       [ 1.00000000e+00, -1.28204998e+00,  1.64365214e+00],\n","       [ 1.00000000e+00, -1.99129484e+00,  3.96525516e+00],\n","       [ 1.00000000e+00, -9.12971048e-01,  8.33516135e-01],\n","       [ 1.00000000e+00,  1.03387696e-01,  1.06890156e-02],\n","       [ 1.00000000e+00, -2.96957459e+00,  8.81837323e+00],\n","       [ 1.00000000e+00,  2.01567395e+00,  4.06294149e+00],\n","       [ 1.00000000e+00,  2.55834389e-01,  6.54512346e-02],\n","       [ 1.00000000e+00,  2.20959826e-01,  4.88232445e-02],\n","       [ 1.00000000e+00,  8.99720478e-02,  8.09496938e-03],\n","       [ 1.00000000e+00,  3.95907788e-01,  1.56742977e-01],\n","       [ 1.00000000e+00,  9.74261083e-01,  9.49184657e-01],\n","       [ 1.00000000e+00, -1.51447493e+00,  2.29363432e+00],\n","       [ 1.00000000e+00,  6.76250255e-01,  4.57314407e-01],\n","       [ 1.00000000e+00,  1.29973713e+00,  1.68931660e+00],\n","       [ 1.00000000e+00, -3.79293977e-02,  1.43863921e-03],\n","       [ 1.00000000e+00, -2.38750754e+00,  5.70019223e+00],\n","       [ 1.00000000e+00, -1.52790496e+00,  2.33449357e+00],\n","       [ 1.00000000e+00,  2.74294226e+00,  7.52373225e+00],\n","       [ 1.00000000e+00,  2.23545842e-01,  4.99727435e-02],\n","       [ 1.00000000e+00,  2.80335919e+00,  7.85882277e+00],\n","       [ 1.00000000e+00, -1.54140924e+00,  2.37594244e+00],\n","       [ 1.00000000e+00,  2.66592856e+00,  7.10717509e+00],\n","       [ 1.00000000e+00,  2.94241912e+00,  8.65783026e+00],\n","       [ 1.00000000e+00, -1.22170891e+00,  1.49257267e+00],\n","       [ 1.00000000e+00, -2.31861443e+00,  5.37597286e+00],\n","       [ 1.00000000e+00,  6.43487768e-01,  4.14076507e-01],\n","       [ 1.00000000e+00, -1.46092635e+00,  2.13430579e+00],\n","       [ 1.00000000e+00, -4.96821434e-01,  2.46831538e-01],\n","       [ 1.00000000e+00, -2.95638868e+00,  8.74023405e+00],\n","       [ 1.00000000e+00, -1.21663508e+00,  1.48020093e+00],\n","       [ 1.00000000e+00,  1.99518645e+00,  3.98076895e+00],\n","       [ 1.00000000e+00, -8.96448712e-02,  8.03620293e-03],\n","       [ 1.00000000e+00,  9.77110529e-01,  9.54744985e-01],\n","       [ 1.00000000e+00,  2.13358723e-01,  4.55219445e-02],\n","       [ 1.00000000e+00, -1.50544800e+00,  2.26637368e+00],\n","       [ 1.00000000e+00, -3.65693139e-01,  1.33731472e-01],\n","       [ 1.00000000e+00, -1.48888358e+00,  2.21677431e+00],\n","       [ 1.00000000e+00,  2.04798312e+00,  4.19423485e+00],\n","       [ 1.00000000e+00,  2.03374579e+00,  4.13612194e+00],\n","       [ 1.00000000e+00,  9.29931429e-01,  8.64772462e-01],\n","       [ 1.00000000e+00, -1.10832771e+00,  1.22839032e+00],\n","       [ 1.00000000e+00,  1.15517096e+00,  1.33441996e+00],\n","       [ 1.00000000e+00, -2.58751751e+00,  6.69524688e+00],\n","       [ 1.00000000e+00, -3.04407657e-01,  9.26640218e-02],\n","       [ 1.00000000e+00, -2.93145576e+00,  8.59343285e+00],\n","       [ 1.00000000e+00,  1.16006998e+00,  1.34576236e+00],\n","       [ 1.00000000e+00, -3.31527180e-01,  1.09910271e-01]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"O9OjQssiUJ9Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894588982,"user_tz":-540,"elapsed":16810,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"f25c6d1c-8258-4a00-a296-9151fbafa60d"},"source":[" x[0],x_poly[0]"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([1.44143951]), array([1.        , 1.44143951, 2.07774787]))"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"dZvuiKsX9l0b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894588983,"user_tz":-540,"elapsed":16801,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"40d665e2-a2f8-4344-a3ef-eba7a730fe70"},"source":["model = LinearRegression()\n","model.fit(x_poly, y)\n","model.coef_, model.intercept_"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([[0.        , 0.98914181, 0.4992275 ]]), array([2.44382171]))"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"YyCW-fT9yr-y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894588984,"user_tz":-540,"elapsed":16789,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"b1e1382d-95cb-4cf2-d18a-bec684a77cff"},"source":["# make_pipeline\n","# 파이프라인이란? 전처리과정과 모델 선정 까지 합쳐서 한 라인으로 쓸 수 있는 \n","\n","model_lr = make_pipeline(poly_features, LinearRegression()).fit(x, y)   #다항 모델과 선형모델을 합쳐놓은 모델.\n","print(model_lr.steps[1][1].coef_)\n","model_lr.steps\n","\n","#모델 합쳐서 쓰는건 모델 여러개 배우면 가르쳐준다. 기존에 있는 모델을 순서를 어떻게 조합하냐에 따라 A라는 모델에 처리가 되면 그 결과가 나오는데\n","#그걸 B에 넣으면 C가 나올테고 뭐 이런식으로 만들기도 한다."],"execution_count":17,"outputs":[{"output_type":"stream","text":["[[0.         0.98914181 0.4992275 ]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[('polynomialfeatures',\n","  PolynomialFeatures(degree=2, include_bias=True, interaction_only=False,\n","                     order='C')),\n"," ('linearregression',\n","  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False))]"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"gu2AjaFHzHbv","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1617894589939,"user_tz":-540,"elapsed":17734,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"8193eb0a-d82e-4ade-ac67-5fe3100f577d"},"source":["# 다항회귀 그래프\n","plt.scatter(x, y, s=5)\n","# x_poly.shape\n","# y.shape\n","# x.shape\n","xx = np.linspace(-3, 3, 1000)\n","yy =  model_lr.predict(xx[:].reshape(-1,1))\n","plt.plot(xx,yy)   # newaxis = None  #  x값 엄청 많이 줘서  선처럼 보이네!\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"M8EjGdzxewY5"},"source":["#### PolynomialFeatures()\n","```\n","PolynomialFeatures(degree=2, *, interaction_only=False, include_bias=True)\n","```\n","\n","- degree : 차수\n","- interaction_only: True면 2차항에서 상호작용항만 출력\n","- include_bias : 상수항 생성 여부\n","\n","\n","다항 변환\n","\n","- 입력값  x 를 다항식으로 변환한다.\n","\n","> \\\\( x \\;\\; \\rightarrow \\;\\; [ 1, x, x^2, x^3, \\cdots ] \\\\) <br>\n"," \n","> 만약 열의 갯수가 두 개이고 2차 다항식으로 변환하는 경우에는 다음처럼 변환한다.\n","\n","> \\\\( [x_1, x_2] \\;\\; \\rightarrow \\;\\; [ 1, x_1, x_2, x_1^2, x_1x_2, x_2^2 ] \\\\)  <br>\n","\n","> 예) <br>\n","> \\\\( [x_1=0, x_2=1]  \\;\\; \\rightarrow \\;\\; [1, 0, 1, 0, 0, 1] \\\\) <br>\n","\n","> \\\\( [x_1=2, x_2=3]  \\;\\; \\rightarrow \\;\\; [1,2,3,4,6,9] \\\\)\n"," \n"]},{"cell_type":"code","metadata":{"id":"jHM8-qVkhLWs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894589940,"user_tz":-540,"elapsed":17724,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"434079a9-2ea7-4900-917b-5497863f7c91"},"source":["from sklearn.preprocessing import PolynomialFeatures\n","X = np.arange(6).reshape(3, 2)\n","X"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 1],\n","       [2, 3],\n","       [4, 5]])"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"q_Dv4F23hMw9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894589940,"user_tz":-540,"elapsed":17718,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"60e771e2-f5c2-4d51-de98-20597ca6f6f0"},"source":["poly = PolynomialFeatures(2)\n","poly.fit_transform(X)"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.,  0.,  1.,  0.,  0.,  1.],\n","       [ 1.,  2.,  3.,  4.,  6.,  9.],\n","       [ 1.,  4.,  5., 16., 20., 25.]])"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"xDAye58LhOO-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894589941,"user_tz":-540,"elapsed":17713,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"211e5bf3-7601-4a33-a1ff-93813ede2b40"},"source":["# 다항차수는 적용하지 않고, 오직 상호작용(교호작용) 효과만을 분석하려면 \n","# interaction_only=True 옵션을 설정해주면 됩니다. \n","# degree를 가지고 교호작용을 몇 개 수준까지 볼지 설정해줄 수 있습니다.\n","\n","poly = PolynomialFeatures(interaction_only=True)\n","poly.fit_transform(X)"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.,  0.,  1.,  0.],\n","       [ 1.,  2.,  3.,  6.],\n","       [ 1.,  4.,  5., 20.]])"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"qQZh4ZjczIEl"},"source":["## Linear / Ridge / Lasso / ElasticNet Regression의 비교"]},{"cell_type":"markdown","metadata":{"id":"mtF4iw6UDHxR"},"source":["|구분| 릿지회귀| 라쏘회귀| 엘라스틱넷|\n","|---|---|---|---|\n","|제약식| L2 norm| L1 norm| L1+L2 norm|\n","|변수선택 |불가능| 가능| 가능|\n","|solution| closed form| 명시해 없음| 명시해 없음|\n","|장점| 변수간 상관관계가 높아도 좋은 성능| 변수간 상관관계가 높으면 성능↓| 변수간 상관관계를 반영한 정규화|\n","|특징| 크기가 큰 변수를 우선 적으로 줄임|비중요 변수를 우선적 으로 줄임|상관관계가 큰 변수를 동시에 선택/배제|"]},{"cell_type":"code","metadata":{"id":"7VC1y0wi1bY8","executionInfo":{"status":"ok","timestamp":1617894589941,"user_tz":-540,"elapsed":17708,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 데이터 생성\n","import numpy as np\n","import pandas as pd\n","import seaborn as sb\n","\n","def make_nonlinear(seed=0):                                                 #2, 데이터 수집, \n","    np.random.seed(seed)      # 랜덤 시작값 초기화\n","    n_samples = 30\n","    X = np.sort(np.random.rand(n_samples))\n","    y = np.sin(2 * np.pi * X) + np.random.randn(n_samples) * 0.1\n","    X = X[:, np.newaxis]       #차원 변경\n","    return (X, y)\n","\n","\n","X, y = make_nonlinear()\n","dfX = pd.DataFrame(X, columns=[\"x\"])                                        #3. 데이터 전처리\n","dfY = pd.DataFrame(y, columns=[\"y\"])\n","df = pd.concat([dfX, dfY], axis=1)"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"SF5AM9Rq1kI0","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1617894589942,"user_tz":-540,"elapsed":17703,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"2bc4b17c-c14d-4e92-d2a2-a2504f3154e4"},"source":["from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.pipeline import make_pipeline  # 데이터 변환 과정과 머신러닝을 연결해주는 파이프라인\n","from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n","import matplotlib.pyplot as plt\n","\n","                                                                            #4. 시각화 생략\n","# LinearRegression                                                          \n","poly = PolynomialFeatures(5)                                                #5.6 모델 생성 및 학습습\n","model_lr = make_pipeline(poly, LinearRegression())\n","model_lr.fit(X, y)\n","\n","xx = np.linspace(0, 1, 1000)                                                #7. 평가\n","y_pred = model_lr.predict(xx.reshape(-1, 1))\n","\n","plt.scatter(X, y)                                                        \n","plt.plot(xx, y_pred)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f09ad860f10>]"]},"metadata":{"tags":[]},"execution_count":23},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Qknf3pu91pDb","executionInfo":{"status":"ok","timestamp":1617894589942,"user_tz":-540,"elapsed":17698,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# Ridge Regression\n"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"pmn7LcLh1tUn","colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"status":"ok","timestamp":1617894589943,"user_tz":-540,"elapsed":17693,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"7d6c9ce8-b2ba-459a-8f27-43723d00cac4"},"source":["# Lasso Regression\n","# 사라지는 것들이 있기 때문에, 규제가 강해지면 선 모양에 가까워진다. 특성을 제외하는 거였잖아!!\n","poly = PolynomialFeatures(5)  \n","model_Lasso = make_pipeline(poly, Lasso(alpha=0.001))\n","model_Lasso.fit(X,y)\n","\n","xx = np.linspace(0, 1, 1000)\n","y_pred = model_Lasso.predict(xx.reshape(-1, 1))\n","\n","\n","plt.scatter(X, y)\n","plt.plot(xx, y_pred)\n","plt.ylim(-1.5, 1.5)"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-1.5, 1.5)"]},"metadata":{"tags":[]},"execution_count":25},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"FSsMLt8u1xdh","executionInfo":{"status":"ok","timestamp":1617894589943,"user_tz":-540,"elapsed":17688,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# ElasticNet Regression\n"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"NtpSWJwNlNPm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894589944,"user_tz":-540,"elapsed":17683,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"b3d23f32-d629-4d71-cd43-c15f6a61f41f"},"source":["from sklearn.datasets import load_iris\n","\n","iris = load_iris()\n","\n","#sepal 꽃밭침\n","#petal 꽃잎\n","iris.feature_names"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['sepal length (cm)',\n"," 'sepal width (cm)',\n"," 'petal length (cm)',\n"," 'petal width (cm)']"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"4zmqaNIRlS_J"},"source":["꽃받침 길이와 꽂잎 길이를 이용한 선형회귀"]},{"cell_type":"code","metadata":{"id":"zQTrmJK4lUvN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894589944,"user_tz":-540,"elapsed":17678,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"2f0bdc61-2da6-4035-e011-6e53f005b382"},"source":["X_all = iris.data\n","X = X_all[:, 0] # 꽃받침 길이\n","y = X_all[:, 2] # 꽃잎 길이\n","\n","print(X[:5])\n","print(y[:5])"],"execution_count":28,"outputs":[{"output_type":"stream","text":["[5.1 4.9 4.7 4.6 5. ]\n","[1.4 1.4 1.3 1.5 1.4]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Hgtf_aQXwQX8"},"source":["[train_test_split()](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)\n","```\n","train_test_split(arrays, test_size, train_size, random_state, shuffle, stratify)\n","```\n","Parameter\n","\n","- arrays : 분할시킬 데이터를 입력 (Python list, Numpy array, Pandas dataframe 등..)\n","- test_size : 테스트 데이터셋의 비율(float)이나 갯수(int) (default = 0.25)\n","- train_size : 학습 데이터셋의 비율(float)이나 갯수(int) (default = test_size의 나머지)\n","- random_state : 데이터 분할시 셔플이 이루어지는데 이를 위한 시드값 (int나 RandomState로 입력)\n","- shuffle : 셔플여부설정 (default = True)\n","- stratify : 지정한 Data의 비율을 유지한다. 예를 들어, Label Set인 Y가 25%의 0과 75%의 1로 이루어진 Binary Set일 때, stratify=Y로 설정하면 나누어진 데이터셋들도 0과 1을 각각 25%, 75%로 유지한 채 분할된다.\n","\n","Return\n","\n","- X_train, X_test, y_train, y_test : arrays에 데이터와 레이블을 둘 다 넣었을 경우의 반환이며, 데이터와 레이블의 순서쌍은 유지된다.\n","- X_train, X_test : arrays에 레이블 없이 데이터만 넣었을 경우의 반환\n"]},{"cell_type":"code","metadata":{"id":"SnXzlTRXlXVr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894589945,"user_tz":-540,"elapsed":17674,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"33981e4c-eca4-42d0-9cfb-6b92f1c5821f"},"source":["from sklearn.model_selection import train_test_split\n","\n","# test_size : 테스트 데이터셋의 비율(float)이나 갯수(int) (default = 0.25)\n","X_train, X_test, y_train, y_test = train_test_split(X.reshape(-1, 1),\n","                                                    y, \n","                                                    test_size=0.2, \n","                                                    random_state=3)\n","X_train.shape"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(120, 1)"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"qDtadHL5lqdB","executionInfo":{"status":"ok","timestamp":1617894589945,"user_tz":-540,"elapsed":17666,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","#두 가지 특성을 시각화 \n"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"id":"qD2CJpBMl0m-","executionInfo":{"status":"ok","timestamp":1617894589947,"user_tz":-540,"elapsed":17660,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["from sklearn.linear_model import LinearRegression\n","\n","# model "],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"vmQ3-Dvil4ug","executionInfo":{"status":"ok","timestamp":1617894589947,"user_tz":-540,"elapsed":17654,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 계수(가중치)와 절편\n"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"iALHX2KPl6Vu","executionInfo":{"status":"ok","timestamp":1617894589948,"user_tz":-540,"elapsed":17650,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["import numpy as np\n","\n","# 4~8까지 값을 일정한 간격을 가지게 200개로 나누어 numpy array를 만듬."],"execution_count":33,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gJmspcqamCaP"},"source":["꽃잎 길이와 꽂잎 너비를 이용한 선형회귀"]},{"cell_type":"code","metadata":{"id":"iLuEOW1emXKP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894590476,"user_tz":-540,"elapsed":18171,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"35b186ef-1887-4297-f3b2-64505472f98d"},"source":["X2 = X_all[:, 2]  # 꽃잎 길이\n","y2 = X_all[:, 3]  # 꽃잎 너비\n","\n","X2.shape"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150,)"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"LsBDp9D7mZxB","executionInfo":{"status":"ok","timestamp":1617894590477,"user_tz":-540,"elapsed":18166,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["X_train2, X_test2, y_train2, y_test2 = train_test_split(X2.reshape(-1, 1),\n","                                                        y2, \n","                                                        test_size=0.2, \n","                                                        random_state = 92)"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"ATn4dokRmd7J","executionInfo":{"status":"ok","timestamp":1617894590479,"user_tz":-540,"elapsed":18163,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["#두 가지 특성을 시각화\n"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"id":"DQ1pQnf5eOKN","executionInfo":{"status":"ok","timestamp":1617894590479,"user_tz":-540,"elapsed":18157,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":[""],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"id":"oz9BAMzlmlHJ","executionInfo":{"status":"ok","timestamp":1617894590480,"user_tz":-540,"elapsed":18151,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 테스트 셋을 사용한 평가\n"],"execution_count":37,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rRVAtuhqQ5AF"},"source":["장단점\n","\n","- k-NN에 비해 더 제약이 있는 것처럼 보이지만 특성이 많은 데이터셋의 경우에는 우수한 성능을 낼 수 있다.\n","- 모델의 복잡도를 제어할 방법이 없어 과대적합 되기 쉽다.\n"]},{"cell_type":"markdown","metadata":{"id":"YqmSlQlSQwI8"},"source":["모델 정규화(Regularization, 규제)을 통해 과대적합을 제어"]},{"cell_type":"markdown","metadata":{"id":"dM7HBz7GDbUX"},"source":["---\n","예측/평가 부분의 추가설명이 필요하므로 이후 pass "]},{"cell_type":"code","metadata":{"id":"jIu2HFrgPgGJ","executionInfo":{"status":"ok","timestamp":1617894590481,"user_tz":-540,"elapsed":18145,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"DYxsl-KuRNbA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894590481,"user_tz":-540,"elapsed":18139,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"1a61c7c2-4535-4d65-9c2d-761b5827a2eb"},"source":["from sklearn.datasets import load_boston\n","\n","boston = load_boston()\n","boston.keys()\n","# print(boston.DESCR)"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename'])"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"nvgAWeVWRjP2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894640022,"user_tz":-540,"elapsed":1046,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"132fecec-0fc8-4398-c207-1bca7f5a6bcc"},"source":["# 데이터 세트 DataFrame 변환\n","X = pd.DataFrame(boston.data, columns = boston.feature_names)\n","y = pd.DataFrame(boston.target)\n","X,y"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(        CRIM    ZN  INDUS  CHAS    NOX  ...  RAD    TAX  PTRATIO       B  LSTAT\n"," 0    0.00632  18.0   2.31   0.0  0.538  ...  1.0  296.0     15.3  396.90   4.98\n"," 1    0.02731   0.0   7.07   0.0  0.469  ...  2.0  242.0     17.8  396.90   9.14\n"," 2    0.02729   0.0   7.07   0.0  0.469  ...  2.0  242.0     17.8  392.83   4.03\n"," 3    0.03237   0.0   2.18   0.0  0.458  ...  3.0  222.0     18.7  394.63   2.94\n"," 4    0.06905   0.0   2.18   0.0  0.458  ...  3.0  222.0     18.7  396.90   5.33\n"," ..       ...   ...    ...   ...    ...  ...  ...    ...      ...     ...    ...\n"," 501  0.06263   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  391.99   9.67\n"," 502  0.04527   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  396.90   9.08\n"," 503  0.06076   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  396.90   5.64\n"," 504  0.10959   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  393.45   6.48\n"," 505  0.04741   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  396.90   7.88\n"," \n"," [506 rows x 13 columns],         0\n"," 0    24.0\n"," 1    21.6\n"," 2    34.7\n"," 3    33.4\n"," 4    36.2\n"," ..    ...\n"," 501  22.4\n"," 502  20.6\n"," 503  23.9\n"," 504  22.0\n"," 505  11.9\n"," \n"," [506 rows x 1 columns])"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"hH9qThAMSmav","executionInfo":{"status":"ok","timestamp":1617894811701,"user_tz":-540,"elapsed":1090,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["\n","# 훈련 데이터와 테스트 데이터 준비\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split( X, y, random_state=41)\n","\n","                                          \n"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"HRL2S88VTW3G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617894902670,"user_tz":-540,"elapsed":849,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"8f144776-ddb6-49fe-b80d-e78fc8573bb6"},"source":["# 모델 선택과 학습\n","model_ridge_boston = Lasso()\n","model_ridge_boston.fit (X_train, y_train)\n"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,\n","      normalize=False, positive=False, precompute=False, random_state=None,\n","      selection='cyclic', tol=0.0001, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"nl4JJMroC7VT"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ID272D3lV_QX","colab":{"base_uri":"https://localhost:8080/","height":212},"executionInfo":{"status":"error","timestamp":1617894923855,"user_tz":-540,"elapsed":729,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"1cacf37d-b234-4519-fcd8-f17cd4eb2024"},"source":["# 예측/평가\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","model_ridge_boston.predict(X_test,y_test)"],"execution_count":50,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-50-a0ccb959785c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmodel_ridge_boston\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: predict() takes 2 positional arguments but 3 were given"]}]},{"cell_type":"code","metadata":{"id":"HbuM5k3xafz0","executionInfo":{"status":"aborted","timestamp":1617894590484,"user_tz":-540,"elapsed":18109,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["\n","# 특성(피처)별 회귀 계수 값 순으로 출력\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TGhB1qdcdBCW","executionInfo":{"status":"aborted","timestamp":1617894590484,"user_tz":-540,"elapsed":18103,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 데이터 조사\n","# 시각화\n","# 2행 4열, axs는 4x2 개의 ax를 갖음\n"],"execution_count":null,"outputs":[]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"py_02-파이썬알고리즘1.ipynb의 사본","provenance":[{"file_id":"1dJQdA4XiwIIwsZ3RCN69Nb2J8r4teAKl","timestamp":1615962429177}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"pfdoOJRz13lo"},"source":["# 알고리즘 개요\r\n","\r\n","알고리즘 : 어떤 일을 하기 위한 명령의 집합\r\n","\r\n","* 현재 대부분 구현되어 있으나 알고리즘들의 차이점들을 이해하지 못하면 미리 구현해 놓은 알고리즘들은 별로 쓸모가 없음\r\n","* 참고 [CodinGame](https://www.codingame.com/start) , [프로그래머스 코딩테스트](https://programmers.co.kr/learn/challenges) ,[코딩도장](https://codingdojang.com/)\r\n","\r\n","여러 가지 다른 알고리즘 간의 장단점을 알게되면\r\n","* 상황에 맞는 알고리즘 선택 (병합정렬 or 퀵정렬)\r\n","* 알고리즘 동작에 맞는 자료구조 (배열 or 리스트)"]},{"cell_type":"markdown","metadata":{"id":"KzYAgY2a2CuN"},"source":["## 첫 알고리즘 이진 탐색\r\n","\r\n","* 전화번호부에서 번호 찾기\r\n","<center>\r\n"," <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRRvIDyK8FrfGEo507k2nWVzHu6Nxp-z8LxLg&usqp=CAU\" alt=\"전화번호부\" width=\"60%\" />\r\n","\r\n","</center>\r\n","\r\n","단순 탐색\r\n","\r\n"," * 순서대로 탐색\r\n"," * 입력으로는 정렬(또는 정렬되지 않은) 원소 리스트\r\n"," * 리스트에 원하는 원소가 있으면 그 원소의 위치를 반환\r\n"," * 리스트에 원하는 원소가 없으면 None 값을 반환\r\n","\r\n","이진 탐색\r\n","\r\n"," * 절반씩 탐색\r\n"," * 입력으로는 정렬된 원소 리스트!\r\n","    - 정렬이 되어 있는 상태에서만 사용한다.\r\n","    - 정렬이 되어 있지 않으면, 정렬하는 과정이 필요\r\n"," * 리스트에 원하는 원소가 있으면 그 원소의 위치를 반환\r\n"," * 리스트에 원하는 원소가 없으면 None 값을 반환\r\n"]},{"cell_type":"markdown","metadata":{"id":"W0IwqRHr3Vln"},"source":["### 퀴즈\r\n","\r\n","* 100개의 숫자의 경우\r\n","\r\n","```\r\n","단순탐색 100번\r\n","이진탐색 7번\r\n","```\r\n","\r\n","* 240,000개의 단어\r\n","\r\n","```\r\n","단순탐색 240,000번\r\n","이진탐색 18번\r\n","```\r\n","\r\n"]},{"cell_type":"code","metadata":{"id":"tV1k1lJc6wgy"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bGNIp6s037nE"},"source":["### 로그는 거듭제곱의 반대말\r\n"," [참고 칸아카데미](https://ko.khanacademy.org/math/a2/x2ec2f6f830c9fb89:logs/x2ec2f6f830c9fb89:log-intro/v/logarithms)\r\n","\r\n","* \"10을 몇 번 곱해야 100 이 될까?\"\r\n","$$ 10^2 = 100 \\leftrightarrow log_{10}100 = 2 $$\r\n","\r\n","* \"10을 몇 번 곱해야 1000 이 될까?\"\r\n","$$ 10^3 = 1000 \\leftrightarrow log_{10}1000 = 3 $$\r\n","\r\n","* \r\n","$$ 2^3 = 8 \\leftrightarrow log_{2}8 = 3 $$\r\n","\r\n","* \r\n","$$ 2^4 = 16 \\leftrightarrow log_{2}16 = 4 $$\r\n","\r\n","* \r\n","$$ 2^5 = 32 \\leftrightarrow log_{2}32 = 5 $$\r\n","\r\n"]},{"cell_type":"markdown","metadata":{"id":"5-xQ6rzD-Ons"},"source":["### 단순 탐색 코드"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IsGUw9nI-Qsj","executionInfo":{"status":"ok","timestamp":1615993690903,"user_tz":-540,"elapsed":610,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"4bb127d2-fbe6-43c4-a6bf-82ab6ef2a942"},"source":["# list : 정렬된 배열\r\n","# item : 검색 아이템\r\n","def simple_search(list, item):\r\n","  for i,v in enumerate(list):    # 몇번째 인덱스인지 알고 싶을때 쓰는 함수이다.\r\n","    if v == item:\r\n","      return i\r\n","\r\n","  return None\r\n","\r\n","\r\n","test_list = [1,3,5,7,9]\r\n","\r\n","print(\"결과\")\r\n","print( simple_search(test_list, 3) )\r\n","print( simple_search(test_list,-1) )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["결과\n","1\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UUaOaQn97_2q"},"source":["### 이진 탐색 코드"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HsHREveB6TJP","executionInfo":{"status":"ok","timestamp":1615994894366,"user_tz":-540,"elapsed":569,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"57103927-8bc9-45ba-b5a0-e9226912ac81"},"source":["def binary_search(list,item):\r\n","  \r\n","  low = 0\r\n","  high = len(list)-1\r\n","  while True:\r\n","    mid = (low + high) // 2\r\n","    if item == list[mid] :\r\n","      return list.index(item)\r\n","      break\r\n","    elif item < list[mid]:\r\n","      high = mid\r\n","      continue\r\n","    elif item > list[mid]:\r\n","      low = mid\r\n","      continue\r\n","\r\n","\r\n","\r\n","\r\n","test_list = [1,3,5,7,9]\r\n","print(\"결과\")\r\n","print( binary_search(test_list, 3) )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["결과\n","1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QCTpotCH7hhj"},"source":["### 함수 주석 작성\r\n","```\r\n","def func(a: str, b: float = 3.5) -> int:\r\n","    return a + b\r\n","\r\n","value = func(3)\r\n","print(value)\r\n","```\r\n","결과\r\n","```\r\n","6.5\r\n","```\r\n","\r\n","---\r\n","함수에 직접 주석을 작성할 수 있습니다.\r\n","\r\n","콜론(:)을 사용해 매개변수에 할당되어야 하는 형식을 할당합니다.\r\n","\r\n","->(화살표)를 사용해 반환값에 할당되어야 하는 형식을 할당합니다.\r\n","\r\n","매개변수에 기본값을 할당하는 경우, 변수: 주석 = 기본값의 형태로 할당합니다.\r\n","\r\n","매개변수에 할당된 형식을 맞추지 않아도 되며, 반환되는 값의 형식이 변환되어 반환되지 않습니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3_DY8yie_QKC","executionInfo":{"status":"ok","timestamp":1615713007994,"user_tz":-540,"elapsed":514,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"}},"outputId":"2b148d2a-236d-4ba3-dd68-e77cae002428"},"source":["# list : 정렬된 배열\r\n","# item : 검색 아이템\r\n","def binary_search(list: '정렬된검색목록', item: '검색 아이템') -> '찾은 위치':\r\n","  low = 0\r\n","  high = len(list) - 1\r\n","\r\n","  while low <= high:\r\n","    midIndex = (low + high) // 2\r\n","\r\n","    if item == list[midIndex]:\r\n","      return midIndex\r\n","\r\n","    if item < list[midIndex]:\r\n","      high = midIndex - 1\r\n","    else:\r\n","      low = midIndex + 1\r\n","\r\n","  return None\r\n","\r\n","\r\n","\r\n","test_list = [1,3,5,7,9]\r\n","\r\n","print(\"결과\")\r\n","print( binary_search(test_list, 3) )\r\n","print( binary_search(test_list,-1) )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["결과\n","1\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qip6-1VdAIrM"},"source":["* 실행 시간\r\n","\r\n","|단순 탐색|이진 탐색|\r\n","|---|---|\r\n","|100개의 아이템|\r\n","|100번 추측|7번 추측|\r\n","|40억 개의 아이템|\r\n","|40억번 추측|32번 추측|\r\n","|O(n)|O(log n)|\r\n","|선형시간|로그시간|"]},{"cell_type":"markdown","metadata":{"id":"DSqqcBYl2F9s"},"source":["## 빅오 표기법\r\n"," * 알고리즘이 얼마나 빠른지 표시하는 방법\r\n"," * 속도를 시간 단위로 세지 않음\r\n"," * 연산 횟수를 비교\r\n"," * 빅(Big) O + 연산횟수\r\n","\r\n","알고리즘 실행 시간 증가\r\n"," \r\n","| |단순 탐색|이진 탐색|\r\n","|---|---|---|\r\n","|100개|100밀리 초|7밀리 초|\r\n","|10,000개|10초|14밀리 초|\r\n","|1,000,000,000개(10억)|11일|32밀리 초|"]},{"cell_type":"markdown","metadata":{"id":"V9rkeTY32rbL"},"source":["### 퀴즈\r\n","\r\n","4x4 = 16 격자 만들기\r\n","\r\n","|1|2|3|4|\r\n","|---|---|---|---|\r\n","|5|6|7|8|\r\n","|9|10|11|12|\r\n","|13|14|15|16|\r\n","\r\n","\r\n","<center>\r\n"," <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRAI7fLetqa__HFqsgj5HE0eMUIphcJNRVpoQ&usqp=CAU\" alt=\"16격자\" width=\"60%\" />\r\n","\r\n","</center>\r\n","\r\n","알고리즘 실행 시간은?\r\n","\r\n","* 알고리즘 1\r\n","\r\n","  * 한 번에 하나씩 16개의 네모 칸을 만들기\r\n","  * 네모 칸 하나를 만드는 것을 한 번의 연산\r\n","\r\n","* 알고리즘 2\r\n","\r\n","  * "]},{"cell_type":"markdown","metadata":{"id":"YIm7jP0uGtQ-"},"source":["### 빅오 실행 시간의 예 (빠른 순서)\r\n","\r\n","* O(log n), 로그 시간 : 이진 탐색\r\n","* O(n), 선형 시간 : 단순 탐색\r\n","* O(n * log n) : 퀵 정렬과 같이 빠른 정렬 알고리즘\r\n","* O(n^2) : 선택 정렬과 같이 느린 정렬 알고리즘\r\n","* O(n!) : 외판원 문제와 같이 정말 느린 알고리즘"]},{"cell_type":"markdown","metadata":{"id":"tVYGRI_-HnJi"},"source":["### 외판원 문제\r\n","\r\n","가장 짧은 거리를 통해 다섯 개의 도시를 모두 방문하려면?\r\n","\r\n","* 도시를 방문하는 모든 경로를 살펴 보는 방법\r\n"," * 전체 거리를 더해서 가장 잛은 경로를 선택\r\n","\r\n","|도시 수| 연산 수(경우의 수)|\r\n","|---|---|\r\n","|5|120|\r\n","|6|720|\r\n","|7|5,040|\r\n","|8|40,320|\r\n","\r\n","* 다른 방법은? 이진 탐색 트리? (생각해보기)"]},{"cell_type":"markdown","metadata":{"id":"ztPYpZr5WxH5"},"source":["### 퀴즈\r\n","\r\n","1. 128개의 정렬된 이름 리스트를 이진 탐색으로 찾을 때 필요한 최대의 추측 횟수는?\r\n","\r\n","2. 만약 리스트의 크기가 두 배가 된다면 최대 추측 횟수는?\r\n","\r\n","각각의 실행 시간을 빅오 표기법으로 표시\r\n","\r\n","3. 전화번호부에서 어떤 사람의 이름으로 전화번호를 찾고 싶으면?\r\n","  -> 정렬이 되어 있음 이름순으로. 즉 이진 탐색 가능 함. 고로 O(logn)\r\n","\r\n","4. 전화번호부에서 어떤 전화번호를 가진 사람의 이름을 찾고 싶으면? (전화번호부를 모두 찾아야 할 수도 있음)   -> 정렬이 안되어있기 때문에 다 뒤져야됨. O(n)\r\n","\r\n","5. 전화번호부에 있는 모든 사람의 전화번호를 알고 싶으면?\r\n","\r\n","6. 알파벳 A로 시작하는 사람들의 전화번호를 알고 싶으면? (영문전화번호부) -> O(n)"]},{"cell_type":"markdown","metadata":{"id":"mKzE3PJh2IMs"},"source":["# 정렬 알고리즘 선택 정렬"]},{"cell_type":"markdown","metadata":{"id":"l3nQFtqa2VxT"},"source":["## 메모리 동작 방법\r\n","\r\n","* 물품보관함\r\n","<center>\r\n"," <img src=\"https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile6.uf.tistory.com%2Fimage%2F992D32475AE426CC0BB407\" alt=\"물품보관함\" width=\"60%\" />\r\n","\r\n","</center>\r\n","\r\n","* 컴퓨터에는 많은 보관함이 있고, 각각의 보관함에는 주소가 붙어 있음 (예: 메모리에 있는 보관함의 주소 fe00ffee)\r\n","* 메모리에 무언가를 저장해야 할 때마다 컴퓨터에게 공간을 요청 -> 컴퓨터는 저장할 수 있는 주소를 알려줌\r\n","\r\n","\r\n"]},{"cell_type":"markdown","metadata":{"id":"43qozrGH6U6J"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"bw4gItvv2dVr"},"source":["## 배열과 연결리스트\r\n","\r\n","* 여러 개의 항목을 목록으로 메모리에 저장\r\n","* 배열은 연속된 공간이 필요 (임의접근 random access)\r\n","* 연결리스트는 목록의 다음 원소(항목)에 대한 주소를 저장 (순차접근 sequential access)\r\n","\r\n","배열은 새로 만들거나 삭제할때 매우 힘듬.\r\n","배열은 항상 순서대로임 따라서 맨뒤에 사람이 나가면 상관없는데, 중간 사람이 나가면 공백은 한칸씩 채워줘야 된다.\r\n","  연결 리스트!는 이 문제점을 해결해준다. 중간에 뭐가 하나 없어지면 가리키는거 하나만 바꾸면 되니까 추가/삭제가 매우 편리. 하지만 이 경우는 대신 검색할때 시간이 좀 걸림.\r\n","\r\n","  -> 즉 배열과 연결 리스트는 각각 장단점이 있음.\r\n","\r\n","배열과 연결 리스트의 연산에 대한 실행 시간?\r\n","\r\n","||배열|리스트|\r\n","|-|-|-|\r\n","|읽기|O(1)|O(n)|\r\n","|삽입|O(n)|O(1)|\r\n","|삭제|O(n)|O(1)|\r\n"]},{"cell_type":"markdown","metadata":{"id":"ioCr-e-o2fdK"},"source":["## 선택 정렬\r\n","\r\n","* 가장 많이 들은 것부터 가장 적게 들은 것 순서로 정렬하여 가장 좋아하는 곡 순위를 알고 싶다면?\r\n","\r\n","|곡명|가수|연주 횟수|\r\n","|-|-|-|\r\n","|롤린 (Rollin')|브레이브걸스|156|\r\n","|Celebrity|아이유|141|\r\n","|On The Ground|로제 (ROSÉ)|35|\r\n","|LOVE DAY (2021)|양요섭, 정은지|94|\r\n","|밤하늘의 별을(2020)|경서|88|\r\n","|Gone|로제 (ROSÉ)|61|\r\n","|Dynamite|방탄소년단|111|\r\n","\r\n","* 방법1\r\n"," * 리스트의 모든 항목을 살펴보고 가장 많이 연주된 곡을 찾아 새로운 리스트에 기록"]},{"cell_type":"markdown","metadata":{"id":"FugDRhH2ho7s"},"source":["### 배열을 작은 정수에서 큰 정수 순서로 정렬하는 코드"]},{"cell_type":"markdown","metadata":{"id":"k8jlsY457xou"},"source":[""]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2NSz72lGfTsX","executionInfo":{"status":"ok","timestamp":1616031649395,"user_tz":-540,"elapsed":758,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"6663c5e9-959f-4f4f-85fe-ebe7481d318a"},"source":["def selectionSort(arr):\r\n","  for i in range(len(arr)-1): \r\n","    for j in range(i+1, len(arr)): \r\n","        if arr[i] > arr[j]: \r\n","            arr[i] , arr[j]  = arr[j], arr[i] \r\n","  return arr\r\n","\r\n","print( selectionSort([5,3,6,2,1]) )"],"execution_count":20,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 5, 6]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oQaBY9jiG8Y-"},"source":["# 쉽게 설명한 선택 정렬\r\n","\r\n","# 입력: 리스트 a\r\n","\r\n","# 출력: 정렬된 새 리스트\r\n","\r\n","# 주어진 리스트에서 최솟값의 위치를 돌려주는 함수\r\n","\r\n"," \r\n","\r\n","def find_min_idx(a):\r\n","\r\n","    n = len(a)\r\n","\r\n","    min_idx = 0\r\n","\r\n","    for i in range(1, n):\r\n","\r\n","        if a[i] < a[min_idx]:\r\n","\r\n","            min_idx = i\r\n","\r\n","    return min_idx\r\n","\r\n"," \r\n","\r\n","def sel_sort(a):\r\n","\r\n","    result = []  # 새 리스트를 만들어 정렬된 값을 저장\r\n","\r\n","    while a:     # 주어진 리스트에 값이 남아 있는 동안 계속\r\n","\r\n","        min_idx = find_min_idx(a)  # 리스트에 남아 있는 값 중 최솟값의 위치\r\n","\r\n","        value = a.pop(min_idx)     # 찾은 최솟값을 빼내어 value에 저장\r\n","\r\n","        result.append(value)       # value를 결과 리스트 끝에 추가\r\n","\r\n","    return result\r\n","\r\n"," \r\n","\r\n","d = [2, 4, 5, 1, 3]\r\n","\r\n","print(sel_sort(d))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sZz4Dcon2pIE"},"source":["## 퀴즈\r\n","\r\n","1. 돈을 어디에 썼는지 매일 기록하는 가계부 앱을 개발하고 있습니다. 월말이 되면 지출을 되돌아보고 소비 금액의 합계를 계산합니다. 자료를 읽는 것보다 삽입하는 일이 훨씬 많습니다. 그럼 배열과 리스트 중 어느 것을 사용해야 할까요?\r\n","\r\n","2. 레스토랑에서 고객의 주문을 받아 처리하는 앱을 개발하고 있습니다. 서비스 담당 직원은 계속 주문을 추가하고, 요리사는 주문을 꺼내어 조리를 합니다. 이런 것을 주문 큐(queue)라고 합니다. 이러한 큐를 구현하는데 배열과 리스트 중 어느 것을 사용해야 할까요?\r\n","  --> 삽입과 삭제가 자유로워야 함. 따라서 리스트가 효율\r\n","3. 빈번한 로그인(검색)과 새로운 사용자 등록(삽입)이 자주 발생하는 서비스가 있습니다. 이런 경우 배열과 리스트를 어떻게 사용해야 할까요?\r\n","  --> 음,..둘중 뭘 쓰지? 배열과 리스트 둘 다 쓰자!\r\n","  --> 사용자 등록은 리스트, 로그인은 배열\r\n","  빅데이터 배우려면 NoSQL과 SQL을 둘다 배워야 함"]},{"cell_type":"markdown","metadata":{"id":"daOCTDhTkcSJ"},"source":["복합자료구조\r\n","* 26개 칸의 배열\r\n","* 각 배열은 a~z로 시작하는 모든 사용자 이름을 담은 연결 리스트를 가르킴\r\n","  (첫 번째 칸은 A로 시작하는 연결 리스트)"]},{"cell_type":"markdown","metadata":{"id":"jhlqnqmo2-Pk"},"source":["# 재귀\r\n","\r\n","* 열쇠가?\r\n","<center>\r\n"," <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNj39t1upngu8iO9qBC3OinfMMwbvzg6IfvA&usqp=CAU\" alt=\"상자1\" width=\"60%\" />\r\n","\r\n"," <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQf72Dgo5f29-O8sZsAu-uQaS0svp8zIsh5aw&usqp=CAU\" alt=\"상자1\" width=\"60%\" />\r\n","\r\n"," <img src=\"https://blog.kakaocdn.net/dn/ubATF/btqv3upJKF4/9FNsg2qms6OKeI6nZDlmq1/img.jpg\" alt=\"상자2\" width=\"60%\" />\r\n","\r\n","</center>\r\n"]},{"cell_type":"markdown","metadata":{"id":"cVC9Px5DqGB6"},"source":["열쇠를 찾기 위한 알고리즘은?\r\n","\r\n","* 방법1\r\n"," 1. 내부를 확인할 상자를 쌓아놓는다.\r\n"," 2. 상자를 하나 집어서 내부를 살핀다.\r\n"," 3. 만약 안에 상자가 있다면 꺼내어 나중에 확인할 상자 더미에 놓는다.\r\n"," 4. 만약 열쇄가 있으면 작업 종료\r\n"," 5. 반복한다.\r\n","\r\n","* 방법2\r\n"," 1. 상자 안을 확인한다.\r\n"," 2. 만약 상자를 발견하면 1단계로 간다.\r\n"," 3. 만약 열쇠를 발견하면 작업 종료"]},{"cell_type":"code","metadata":{"id":"oetz2H5tqFZR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gpzEs9GIqfLn"},"source":["\"프로그램에 반복문을 사용하면 프로그램의 성능을 향상시킬 수 있지만, 재귀를 사용하면 프로그래머의 능력을 향상시킬 수 있습니다. 상황에 따라 적절한 방법을 골라 사용하세요.\" - 레이 캐드웰, 스택 오버플로우"]},{"cell_type":"markdown","metadata":{"id":"tHAaJFf03Mr3"},"source":["## 재귀함수\r\n","\r\n"," * 자기 자신을 호출하는 함수\r\n"," * 실수로 무한 반복을 하는 함수를 만들 수 있다"]},{"cell_type":"code","metadata":{"id":"mw6NnAUBv9Rh"},"source":["# 카운트 다운 함수\r\n","# 무한 반복을 중지하려면 Ctrl+C 를 누른다.\r\n","\r\n","#countdown(1000)\r\n","countdown(100)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OnHkjvYrwv2k"},"source":["* 언제 재귀를 멈출지 알려주어야 하므로 기본단계와 재귀단계로 나누어 생각한다.\r\n","★★★★★ 항상 두 단계로 나누어서 생각한다!!\r\n"," * 재귀단계(recursive case) : 함수가 자기 자신을 호출하는 부분\r\n"," * 기본단계(base case) : 함수가 자기 자신을 다시 호출하지 않는 경우, 무한 반복으로 빠지지 않게 하는 부분"]},{"cell_type":"code","metadata":{"id":"SYLhJ_z-xdUE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616035785638,"user_tz":-540,"elapsed":867,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"8e367288-1346-41ad-a96e-c7b5783026b2"},"source":["def countdown(num):\r\n","  if num > 1:\r\n","    print(num)\r\n","    return countdown(num-1)\r\n","  elif num == 1:\r\n","    return 1 \r\n","\r\n","countdown(10)"],"execution_count":37,"outputs":[{"output_type":"stream","text":["10\n","9\n","8\n","7\n","6\n","5\n","4\n","3\n","2\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"G9QlcjjI3QYh"},"source":["## 스택(Stack) 자료구조\r\n","\r\n","<center>\r\n"," <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSyBYsROIYQyZOH1mAUEAaHd3CUw06Di_mUYg&usqp=CAU\" alt=\"포스트잇\" width=\"60%\" />\r\n","\r\n","</center>\r\n","\r\n","접착식 메모지\r\n"," * 추가(push) : 새 항목을 추가할 때는 기존의 목록 위에 덧붙임\r\n"," * 떼어내고 읽기(pop)항목을 읽을 때는 가장 위에 있는 항목만 읽고 떼어낼 수 있음\r\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dcRPG9Rm0IxE","executionInfo":{"status":"ok","timestamp":1615726918512,"user_tz":-540,"elapsed":532,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"}},"outputId":"7d0f27fb-d8ae-43b1-9bd2-6f71b5280269"},"source":["# 호출스택(call stack)\r\n","def greet2(name):\r\n","  print(\"어떻게 지내니\", name, \"?\")   # 호출스택에 떼어내고 읽기(pop)\r\n","\r\n","def bye():\r\n","  print(\"잘가~\")                      # 호출스택에 떼어내고 읽기(pop)\r\n","\r\n","def greet(name):\r\n","  print(\"hello,\", name, \"!\")\r\n","  greet2(name)                    # 함수 호출을 위해 메모리 할당 호출스택에 추가(push)\r\n","  print(\"작별 인사 준비 중 ...\")\r\n","  bye()                           # ...호출스택에 추가(push)  -> pop\r\n","\r\n","\r\n","greet(\"길동\")                     # ...호출스택에 추가(push)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["hello, 길동 !\n","어떻게 지내니 길동 ?\n","작별 인사 준비 중 ...\n","잘가~\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"u24DmV482j4d"},"source":["## 팩토리얼\r\n","\r\n","$$ factorial(5) = 5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 $$\r\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7KFt8hjm3Zq7","executionInfo":{"status":"ok","timestamp":1616041245240,"user_tz":-540,"elapsed":612,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"820af598-c1b3-4f1d-f80f-c077ec3adf83"},"source":["def factorial_recursive(n):\r\n","  if n > 1:\r\n","    print ( n, end=\" x \")\r\n","    return n * factorial_recursive(n-1) ``\r\n","  else : \r\n","    print(n, end=\" = \")\r\n","    return 1\r\n","  print(n)\r\n","\r\n","factorial_recursive(5)\r\n"],"execution_count":38,"outputs":[{"output_type":"stream","text":["5 x 4 x 3 x 2 x 1 = "],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["120"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wTOHTYhmm583","executionInfo":{"status":"ok","timestamp":1616043382853,"user_tz":-540,"elapsed":773,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"6e1bbdf7-be4c-4a22-9311-ebb4db686928"},"source":["# 피보나치 수열\r\n","\r\n","def Pivonacci(n):\r\n","  arr= [0]*n\r\n","  arr[0]=1\r\n","  arr[1]=2\r\n","  for i in range(2,n):\r\n","    arr[i] = arr[i-2] + arr[i-1]\r\n","  return arr\r\n","\r\n","arr = Pivonacci(7)\r\n","for n,i in enumerate(arr):\r\n","  print(f\"a_{n+1} = {i} \")\r\n"],"execution_count":55,"outputs":[{"output_type":"stream","text":["a_1 = 1 \n","a_2 = 2 \n","a_3 = 3 \n","a_4 = 5 \n","a_5 = 8 \n","a_6 = 13 \n","a_7 = 21 \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AhCIVWXSr8mL"},"source":[""],"execution_count":null,"outputs":[]}]}
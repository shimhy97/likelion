{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"내꺼dl_08_자연어처리.ipynb의 사본","provenance":[{"file_id":"1C9RCOZwiWFX4O7J9BJ6CsfnLdPN7Apo5","timestamp":1620804429638}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"oC99qjqGXAOk"},"source":["### 코렙에서 한글 사용"]},{"cell_type":"code","metadata":{"id":"csF03HviW8ZB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330700853,"user_tz":-540,"elapsed":89941,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"e42e0369-796f-4792-983d-1571a7768c94"},"source":["!apt -qq -y install fonts-nanum\n"," \n","import matplotlib.pyplot as plt\n","import matplotlib.font_manager as fm\n"," \n","fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n","font = fm.FontProperties(fname=fontpath, size=10)\n","fm._rebuild()\n"," \n","# 그래프에 retina display 적용\n","%config InlineBackend.figure_format = 'retina'\n"," \n","# Colab 의 한글 폰트 설정\n","plt.rc('font', family='NanumBarunGothic') "],"execution_count":36,"outputs":[{"output_type":"stream","text":["fonts-nanum is already the newest version (20170925-1).\n","The following package was automatically installed and is no longer required:\n","  libnvidia-common-460\n","Use 'apt autoremove' to remove it.\n","0 upgraded, 0 newly installed, 0 to remove and 34 not upgraded.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"g19tsMWUNpCx"},"source":["### 구글드라이브 연동"]},{"cell_type":"code","metadata":{"id":"Ijyjm-4FNqNx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621331678744,"user_tz":-540,"elapsed":1777,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"966da0f8-eea4-4be8-9f28-1dd809b47409"},"source":["# 구글드라이브 연동\n","from google.colab import drive\n","drive.mount('/gdrive', force_remount=True)\n","\n","# 구글 드라이브 파일 확인\n","!ls '/gdrive/My Drive/temp/'\n","\n","# 반복되는 드라이브 경로 변수화\n","drive_path = '/gdrive/My Drive/temp/'"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Mounted at /gdrive\n"," 매수종목1.txt\t\t    movieclassifier\n"," 매수종목2.txt\t\t    population_number.csv\n"," abalone.txt\t\t    ram_price.csv\n"," aclImdb.zip\t\t    ratings_small.txt\n"," adult.data\t\t    ratings_test.txt\n"," app_clf\t\t    ratings_train.txt\n"," assets\t\t\t    sample1.pdf\n"," auto-mpg.csv\t\t    sample2.pdf\n"," bmi_500.csv\t\t    sample_merge.pdf\n"," catface.JPG\t\t    sample.xlsx\n"," cat.jpg\t\t    saved_model.pb\n"," cats_and_dogs_small_1.h5   score.csv\n"," cats_and_dogs_small_2.h5   seoul.html\n"," citibike.csv\t\t    simpleRNN_model.h5\n"," CNN+LSTM_model.h5\t    sonar.csv\n"," CNN_routers_model.h5\t    stock-data.csv\n"," creditcard.csv\t\t   'stock price.xlsx'\n","'투표 결과.csv'\t\t   'stock valuation.xlsx'\n"," 매수종목.csv\t\t    survial_rate_cancer_mode.h5\n"," database\t\t    survival_rate_cancer_model.h5\n"," data_mine.csv\t\t    test.db.db\n"," data_population.csv\t    test.txt\n"," data_studentlist_en.csv    ThoraricSurgery.csv\n"," demo.docx\t\t    titanic.xls\n"," diabetes.csv\t\t    tmdb_5000_credits.csv\n"," example.docx\t\t    tmdb_5000_movies.csv\n"," exmaple.docx\t\t    Traffic_Accident_2017.csv\n"," glove.6B.zip\t\t    train.csv\n"," height_weight.txt\t    train.zip\n"," HelloWorld.xlsx\t   'UCI HAR Dataset'\n"," lenna.png\t\t   'UCI HAR Dataset.zip'\n"," little-char.png\t    user_id_mean.csv\n"," LSTM_CNN_model.h5\t    variables\n"," LSTM_model.h5\t\t    video.mp4\n"," LSTM_reuters.model.h5\t    wine.csv\n"," ml-latest-small\t    주가데이터.xlsx\n"," MLP_reuters.model.h5\t    남북한발전전력량.xlsx\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7e-HRHo4fn52"},"source":["### 사전점검\n"]},{"cell_type":"code","metadata":{"id":"nVdMAvmO6nnB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701408,"user_tz":-540,"elapsed":90476,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"c88d6197-e28c-462b-a423-f1bea87381fb"},"source":["import tensorflow as tf\n","from tensorflow import keras\n","tf.__version__, keras.__version__"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('2.4.1', '2.4.0')"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"E72xTWbY6nnM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701409,"user_tz":-540,"elapsed":90473,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"3456e70e-2225-4233-c6e7-62944bc1d068"},"source":["# 분산전략 정의\n","mirrored_strategy = tf.distribute.MirroredStrategy(cross_device_ops=tf.distribute.HierarchicalCopyAllReduce())\n","print('장치의 수:', mirrored_strategy.num_replicas_in_sync)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0',)\n","장치의 수: 1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BwaJ0UBRqxA0","executionInfo":{"status":"ok","timestamp":1621330701409,"user_tz":-540,"elapsed":90469,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# with mirrored_strategy.scope():\n","#  model = ?"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"lAb2zieX7Nco","executionInfo":{"status":"ok","timestamp":1621330701410,"user_tz":-540,"elapsed":90466,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from tensorflow import keras\n","\n","from numpy import array\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense,Flatten,Embedding"],"execution_count":41,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TjwZ9eCRBsKd"},"source":["# 자연어처리 (Natural Language Processing, NLP)"]},{"cell_type":"markdown","metadata":{"id":"00KmFBnxBunU"},"source":["- 자연어(Natural Language) : 일상생활에서 사용하는 언어\n","- 자연어 처리(NLP) : 자연어의 의미를 분석하여 컴퓨터가 처리할 수 있도록 하는 과정\n","- 자연어 처리 분야 : 음성 인식, 내용 요약, 번역, 사용자의 감정 분석, 텍스트 분류 작업(스팸 메일 분류, 뉴스 기사 카테고리 분류), 질의 응답 시스템, 챗봇 등\n","\n","- 코퍼스 (Corpus) : 자연어 처리에 사용되는 많은 데이터의 모음 (텍스트 모음, 말뭉치)\n","\n","- 자연어 처리는 기계에게 인간의 언어를 이해시키는 것 → 인공지능에 있어서 가장 중요한 연구 분야\n"]},{"cell_type":"markdown","metadata":{"id":"YArWEVbJeEut"},"source":["단어의 의미\n","\n","- 말은 '문자'로 구성, 말의 의미는 '단어'로 구성\n","- 단어는 의미의 최소 단위\n","- 컴퓨터에게 단어를 이해시키는 방법\n"," - 시소러스를 활용한 기법(유의어 사전, WordNet)\n"," - 통계 기반 기법(Corpus, 말뭉치를 이용)\n"," - 추론 기반 기법(word2vec)"]},{"cell_type":"markdown","metadata":{"id":"nYMJMzwDeEA8"},"source":["- 문자열 : 가장 흔한 시퀸스 형태의 데이터\n","\n","- 시퀸스 처리용 딥러닝 모델 : 문서 분류, 감성 분석, 저자 식별, (제한된 범위의) 질문 응답 (QA) 등에 활용 → 일종의 패턴 인식"]},{"cell_type":"markdown","metadata":{"id":"2XgAeiYgfiVL"},"source":["텍스트 전처리 (Text Preprocessing) : 목적에 맞게 텍스트를 사전에 분류하는 과정\n"," > 텍스트 데이터를 단어로 분할하고 그 분할된 단어들을 단어ID 목록으로 변환하는 일\n","\n","전처리 방법\n","\n","- 토큰화 (Tokenization) : 코퍼스를 토큰으로 나누는 작업 (문자, 단어, n-gram)\n","\n","- 정규화 (Normalization) : 코퍼스를 용도에 맞게 토큰을 분류하는 작업 (유사단어 통합, 대소문자 통합, 불필요한 단어 제거 (작은 빈도 단어, 짧은 길이의 단어))\n","\n","- 어간 추출 (Stemming) : 정규화의 한 방법으로 단어의 핵심 부분만 추출하는 것\n","\n"," - 표제어 추출 (Lemmatization) : 정규화의 한 방법으로 유사한  단어들에서 대표 단어를 추출\n","\n","- 불용어 (Stopword) 제거 : 의미없는 데이터를 제거하는 작업\n","\n","- 정규 표현식 (Regular Expression)\n","\n","- 단어 분리 (Subword Segamentation)\n","\n","- 정수 인코딩 (Integer Encoding) : 각 단어를 정수에 맵핑하는 작업\n","\n"]},{"cell_type":"markdown","metadata":{"id":"gQ37-MAeIsQa"},"source":["n-gram\n","\n","- 최대 n 개의 토큰 단위로 문자 시퀸스를 구분\n","```\n","AI is too difficult\n","```\n","- 2-gram으로 분해\n","```\n","{“AI”, “AI is”, “is”, “is too”, “too”, “too difficult”, “difficult”}\n","```\n","- 3-gram으로 분해\n","```\n","{“AI”, “AI is”, “is”, “is too”, “AI is too”, “too”, “too difficult”, “difficult”, “is too difficult”}\n","```\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6KFrRRB1kkvw"},"source":["### NLP 연습 01"]},{"cell_type":"markdown","metadata":{"id":"dy6q4zUypmSo"},"source":["토큰화"]},{"cell_type":"markdown","metadata":{"id":"n_NWyeFxnhXx"},"source":["- text_to_word_sequence() : 문장을 단어 단위로 나눔"]},{"cell_type":"code","metadata":{"id":"Hb_DGulql1hK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701410,"user_tz":-540,"elapsed":90462,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"f229eeee-a2b5-4945-fcc8-3a7434ecff9e"},"source":["#주어진 문장을 '단어'로 토큰화 하기\n","#케라스의 텍스트 전처리와 관련한 함수중 text_to_word_sequence 함수\n","from tensorflow.keras.preprocessing.text import text_to_word_sequence\n"," \n","# 전처리할 텍스트\n","text = '자연어의 의미를 분석하여 컴퓨터가 처리할 수 있도록 하는 과정'\n"," \n","# 해당 텍스트를 토큰화\n","ws = text_to_word_sequence(text)\n","ws"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['자연어의', '의미를', '분석하여', '컴퓨터가', '처리할', '수', '있도록', '하는', '과정']"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"markdown","metadata":{"id":"sWaFm95zn7Vu"},"source":["- Tokenizer() : 토큰화 객체\n"," - fit_on_texts(문장) : 토큰화 문장 적용\n"," - word_counts : 단어의 빈도수를 계산  \n"," - word_docs : 각 단어들이 몇 개의 문장에 나오는지 계산\n"," - word_index : 단어 인덱스 "]},{"cell_type":"code","metadata":{"id":"O--Y_R_Ql_Aj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701779,"user_tz":-540,"elapsed":90828,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"c55dc36b-cd4d-4906-b411-c0097aba6bb3"},"source":["#단어 빈도수 세기\n","#전처리 하려는 세개의 문장\n","docs = ['먼저 텍스트의 각 단어를 나누어 토큰화 합니다.',\n","       '텍스트의 단어로 토큰화 해야 딥러닝에서 인식됩니다.',\n","       '토큰화 한 결과는 딥러닝에서 사용 할 수 있습니다.',\n","       ]\n","\n","token = Tokenizer()\n","token.fit_on_texts(docs)\n","\n","print( '단어 카운트:', token.word_counts )\n","print( '문장 카운트:', token.document_count)\n","print( '단어 인덱스:', token.word_index)\n","print( '인덱스 단어:', token.index_word)"],"execution_count":43,"outputs":[{"output_type":"stream","text":["단어 카운트: OrderedDict([('먼저', 1), ('텍스트의', 2), ('각', 1), ('단어를', 1), ('나누어', 1), ('토큰화', 3), ('합니다', 1), ('단어로', 1), ('해야', 1), ('딥러닝에서', 2), ('인식됩니다', 1), ('한', 1), ('결과는', 1), ('사용', 1), ('할', 1), ('수', 1), ('있습니다', 1)])\n","문장 카운트: 3\n","단어 인덱스: {'토큰화': 1, '텍스트의': 2, '딥러닝에서': 3, '먼저': 4, '각': 5, '단어를': 6, '나누어': 7, '합니다': 8, '단어로': 9, '해야': 10, '인식됩니다': 11, '한': 12, '결과는': 13, '사용': 14, '할': 15, '수': 16, '있습니다': 17}\n","인덱스 단어: {1: '토큰화', 2: '텍스트의', 3: '딥러닝에서', 4: '먼저', 5: '각', 6: '단어를', 7: '나누어', 8: '합니다', 9: '단어로', 10: '해야', 11: '인식됩니다', 12: '한', 13: '결과는', 14: '사용', 15: '할', 16: '수', 17: '있습니다'}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"i8O9w5PLstUe"},"source":["단어의 원-핫 인코딩"]},{"cell_type":"code","metadata":{"id":"IVyb3t-BJZ5Z","executionInfo":{"status":"ok","timestamp":1621330701779,"user_tz":-540,"elapsed":90823,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["## 함수 로딩, 사용할 문장 설정\n","from keras.preprocessing.text import Tokenizer\n","\n","token = Tokenizer(num_words=10)\n","token.fit_on_texts(docs)\n","\n","# 문자열 정수 인덱스 리스트 출력\n","sequences = token.texts_to_sequences(docs)\n","\n","# 이진 벡터 행렬로 출력\n","oh_result = token.texts_to_matrix(docs)"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"tLSF6Gx4s5UO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701780,"user_tz":-540,"elapsed":90820,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"acf1ac66-a0b3-4b0e-ecbe-f5226b019166"},"source":["text = '먼저 텍스트의 각 단어를 나누어 토큰화 합니다.'\n","\n","token = Tokenizer()\n","token.fit_on_texts([text])\n","x = token.texts_to_sequences([text])\n","x"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[1, 2, 3, 4, 5, 6, 7]]"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"N0cIMwfGtpxL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701780,"user_tz":-540,"elapsed":90816,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"f0d0bc21-2462-43e3-f0b6-9144f1aba16d"},"source":["from tensorflow.keras.utils import to_categorical\n","\n","# 배열 맨 앞에 0이 추가되므로 단어 수보다 1더 많게 인덱스 추가\n","word_size = len(token.word_index) + 1\n","x_oh = to_categorical(x, word_size)\n","x_oh"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[0., 1., 0., 0., 0., 0., 0., 0.],\n","        [0., 0., 1., 0., 0., 0., 0., 0.],\n","        [0., 0., 0., 1., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 1., 0., 0., 0.],\n","        [0., 0., 0., 0., 0., 1., 0., 0.],\n","        [0., 0., 0., 0., 0., 0., 1., 0.],\n","        [0., 0., 0., 0., 0., 0., 0., 1.]]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"markdown","metadata":{"id":"APBU7PYfuUEj"},"source":["단어 임베딩 (word embedding)\n","\n","- 단어와 벡터를 연관 짓는 방법 중의 하나로 실수형인 밀집 word vector을 사용하는 것\n","\n","- 원 핫 인코딩으로 만든 벡터는 희소 (sparse)하고 (대부분 0으로 채워짐) 고차원 (단어의 수와 동일)\n","\n","- 원 핫 인코딩이 수동 인코딩이라면 단어 임베딩은 저차원의 실수형 벡터 (밀집벡터)로 데이터로부터 학습\n","\n","\n","단어 임베딩 만드는 방법\n","\n"," 1. 관심 대상인 문제와 함께 단어 임베딩을 학습 → 랜덤 단어 벡터로 시작해서 가중치 학습\n","\n"," 2. 사전 훈련된 단어 임베딩 (Pretrained word embedding) : 미리 계산된 단어 임베딩을 사용"]},{"cell_type":"markdown","metadata":{"id":"PK7PTI3wKsCz"},"source":["Embedding Layer : 정수 인덱스를 밀집 벡터로 맵핑하는 기능\n","\n","Embedding Layer\n","- input_dim : 단어 사전의 크기 (단어의 종류)\n","- output_dim : 단어 인코딩 한 후에 나오는 벡터의 크기 (의미론적 기하공간의 크기)\n","- input_length : 단어의 수 (문장의 길이)\n","\n","```\n","Embedding(input_dim, output_dim, input_length)\n","```\n","\n","- Embedding Layer의 출력 크기 : 샘플 수 * output_dim * input_lenth\n","\n","- Embedding Layer 다음에 Flatten Layer 온다면 반드시 input_lenth를 지정해야 함 → 입력 크기를 알아야 이를 1차원으로 만들어서 Dense 레이어에 전달할 수 있기 때문\n","\n","- Embedding 층의 가중치는 랜덤하게 초기화 → 학습을 하면서 역전파를 통해 조정\n"]},{"cell_type":"code","metadata":{"id":"fiY6JfMQumvw","executionInfo":{"status":"ok","timestamp":1621330701781,"user_tz":-540,"elapsed":90813,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["model = Sequential([\n","          Embedding(16, 4, input_length=2)\n","])"],"execution_count":47,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Av8uDwqP0FCy"},"source":["Embedding 층을 (특정 단어를 나타내는) 정수 인덱스를 밀집 벡터로 매핑하는 딕셔너리로 이해\n","\n"," - 정수를 입력으로 받아 내부 딕셔너리에서 이 정수에 연관된 벡터를 찾아 반환\n"," - 크기가 (samples, sequence_length)인 2D 정수 텐서를 입력\n"," - 크기가 (samples, sequence_length, embedding_dimensionality)인 3D 실수형 텐서를 반환\n","  - 이런 3D 텐서는 RNN 층이나 1D 합성곱 층에서 처리"]},{"cell_type":"code","metadata":{"id":"ij7QYjXHz4A5","executionInfo":{"status":"ok","timestamp":1621330701781,"user_tz":-540,"elapsed":90809,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["from keras.layers import Embedding\n","\n","# Embedding 층은 적어도 두 개의 매개변수를 받음\n","# 가능한 토큰의 개수(여기서는 1,000으로 단어 인덱스 최댓값 + 1)와 임베딩 차원(여기서는 64)\n","emb_layer = Embedding(1000, 64)"],"execution_count":48,"outputs":[]},{"cell_type":"code","metadata":{"id":"LDlNK-JlH2sk","executionInfo":{"status":"ok","timestamp":1621330701781,"user_tz":-540,"elapsed":90805,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 코싸인 유사도 코드\n","def cos_similarity(x, y):\n","  nx = x / (np.square(np.sum(x ** 2)) + 1e-8)\n","  ny = y / (np.square(np.sum(y ** 2)) + 1e-8)\n","  return np.dot(nx, ny)"],"execution_count":49,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"njogb8RbwDNc"},"source":["텍스트 긍정,부정 예측"]},{"cell_type":"code","metadata":{"id":"DaQ004FVmUQy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701782,"user_tz":-540,"elapsed":90802,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"12eb3f01-cde1-4f53-e20a-61242a345400"},"source":["# 텍스트 리뷰 자료를 지정\n","docs = [\"너무 재밌네요\",\"최고예요\",\"참 잘 만든 영화예요\",\"추천하고 싶은 영화입니다\",\"한번 더 보고싶네요\",\"글쎄요\",\"별로예요\",\"생각보다 지루하네요\",\"연기가 어색해요\",\"재미없어요\"]\n","\n","# 긍정 리뷰는 1, 부정 리뷰는 0으로 클래스를 지정\n","classes = array([1,1,1,1,1,0,0,0,0,0])\n","\n","# 토큰화 \n","token = Tokenizer()\n","token.fit_on_texts(docs)\n","x = token.texts_to_sequences(docs)\n","x"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[1, 2],\n"," [3],\n"," [4, 5, 6, 7],\n"," [8, 9, 10],\n"," [11, 12, 13],\n"," [14],\n"," [15],\n"," [16, 17],\n"," [18, 19],\n"," [20]]"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"MFGvb-82mWB-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701782,"user_tz":-540,"elapsed":90798,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"c0804c42-f6a8-4510-9150-44f66160e285"},"source":["# 패딩(padding) : 길이를 똑같이 맞춰 주는 작업\n","# 서로 다른 길이의 데이터를 4로 맞춤\n","x_padded = pad_sequences(x, 4)\n","x_padded"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0,  0,  1,  2],\n","       [ 0,  0,  0,  3],\n","       [ 4,  5,  6,  7],\n","       [ 0,  8,  9, 10],\n","       [ 0, 11, 12, 13],\n","       [ 0,  0,  0, 14],\n","       [ 0,  0,  0, 15],\n","       [ 0,  0, 16, 17],\n","       [ 0,  0, 18, 19],\n","       [ 0,  0,  0, 20]], dtype=int32)"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"s7MSREyakpH5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330701783,"user_tz":-540,"elapsed":90795,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"72cae82d-836b-40d0-828d-3c2ca1ed1017"},"source":["# 딥러닝 모델\n","# 임베딩에 입력될 단어의 수를 지정\n","word_size = len(token.word_index) + 1\n","\n","model = Sequential([\n","            Embedding(word_size, 8, input_length=4),\n","            Flatten(),\n","            Dense(1, activation='sigmoid')\n","])\n","model.summary()"],"execution_count":52,"outputs":[{"output_type":"stream","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_6 (Embedding)      (None, 4, 8)              168       \n","_________________________________________________________________\n","flatten_2 (Flatten)          (None, 32)                0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 1)                 33        \n","=================================================================\n","Total params: 201\n","Trainable params: 201\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QI0XnNTeNoHV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330702662,"user_tz":-540,"elapsed":91670,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"596d9a75-ba5d-4e82-e1bb-7a1271add2cb"},"source":["model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(x_padded, classes, epochs=20)"],"execution_count":53,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","1/1 [==============================] - 1s 596ms/step - loss: 0.7020 - acc: 0.4000\n","Epoch 2/20\n","1/1 [==============================] - 0s 6ms/step - loss: 0.6992 - acc: 0.4000\n","Epoch 3/20\n","1/1 [==============================] - 0s 6ms/step - loss: 0.6965 - acc: 0.4000\n","Epoch 4/20\n","1/1 [==============================] - 0s 12ms/step - loss: 0.6938 - acc: 0.6000\n","Epoch 5/20\n","1/1 [==============================] - 0s 5ms/step - loss: 0.6911 - acc: 0.6000\n","Epoch 6/20\n","1/1 [==============================] - 0s 8ms/step - loss: 0.6885 - acc: 0.6000\n","Epoch 7/20\n","1/1 [==============================] - 0s 8ms/step - loss: 0.6858 - acc: 0.6000\n","Epoch 8/20\n","1/1 [==============================] - 0s 8ms/step - loss: 0.6832 - acc: 0.6000\n","Epoch 9/20\n","1/1 [==============================] - 0s 9ms/step - loss: 0.6806 - acc: 0.6000\n","Epoch 10/20\n","1/1 [==============================] - 0s 8ms/step - loss: 0.6780 - acc: 0.7000\n","Epoch 11/20\n","1/1 [==============================] - 0s 12ms/step - loss: 0.6754 - acc: 0.8000\n","Epoch 12/20\n","1/1 [==============================] - 0s 6ms/step - loss: 0.6728 - acc: 0.9000\n","Epoch 13/20\n","1/1 [==============================] - 0s 6ms/step - loss: 0.6703 - acc: 0.9000\n","Epoch 14/20\n","1/1 [==============================] - 0s 8ms/step - loss: 0.6677 - acc: 1.0000\n","Epoch 15/20\n","1/1 [==============================] - 0s 9ms/step - loss: 0.6652 - acc: 1.0000\n","Epoch 16/20\n","1/1 [==============================] - 0s 6ms/step - loss: 0.6626 - acc: 1.0000\n","Epoch 17/20\n","1/1 [==============================] - 0s 12ms/step - loss: 0.6601 - acc: 0.9000\n","Epoch 18/20\n","1/1 [==============================] - 0s 7ms/step - loss: 0.6575 - acc: 0.9000\n","Epoch 19/20\n","1/1 [==============================] - 0s 6ms/step - loss: 0.6550 - acc: 0.9000\n","Epoch 20/20\n","1/1 [==============================] - 0s 7ms/step - loss: 0.6524 - acc: 0.9000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g6V-7U0om_kQ","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1621330703266,"user_tz":-540,"elapsed":92270,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"d1ba5bd8-d9c4-4f13-e936-01f8bb6f53ac"},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":54,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x360 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":483,"height":302},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"MmOJhn6T0j4J"},"source":["### NLP 연습 02\n","\n","- imdb 데이터 셋 : 스탠포드 대학의 앤드류 마스가 수집한 데이터 셋\n","\n","- 데이터 셋 주소 : http://ai.stanford.edu/~amaas/data/sentiment/ 또는\n","https://stanford.io/2w2NUzz\n","\n","- 인터넷 영화 데이터베이스 (IMDB) : 영화와 관련된 정보와 출연진 정보, 개봉 정보, 영화 후기, 평점에 이르기까지 매우 폭넓은 데이터가 저장된 데이터 셋\n","\n","- 인터넷 영화 데이터베이스로부터 가져온 양극단의 영화 리뷰 5만개 포함\n","\n","- 훈련데이터 2만 5,000개, 테스트데이터 2만 5,000개로 나뉘어 있고 50%는 긍정, 50%는 부정 리뷰로 구성\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"-G4qYCR-Lg3G"},"source":["IMDB 영화 리뷰 감성 예측\n","- 영화 리뷰에서 가장 빈도가 높은 10,000개의 단어를 추출\n","- 리뷰에서 20개 단어 이후는 버림\n","\n","모델 구조\n","-  이 네트워크는 10,000개의 단어에 대해 8 차원의 임베딩을 학습하여 정수 시퀀스 입력(2D 정수 텐서)를 임베딩 시퀀스(3D 실수형 텐서)로 변환\n","- 임베딩 결과 텐서를 2D로 펼쳐서 분류를 위한 Dense 층을 훈련"]},{"cell_type":"code","metadata":{"id":"M2RN2I-Y1TtU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330709356,"user_tz":-540,"elapsed":98356,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"17b9e356-003c-4c2e-d873-0d929afd449f"},"source":["from keras.datasets import imdb\n","from keras import preprocessing\n","\n","# 특성으로 사용할 단어의 수\n","max_features = 10000\n","# 사용할 텍스트의 길이(가장 빈번한 max_features 개의 단어만 사용)\n","maxlen = 20\n","\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n","x_train.shape, x_test.shape"],"execution_count":55,"outputs":[{"output_type":"stream","text":["<string>:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n","/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:160: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["((25000,), (25000,))"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BAYfr_spQCNz","executionInfo":{"status":"ok","timestamp":1621330709356,"user_tz":-540,"elapsed":98352,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"8bc9296e-14c9-4461-ba45-8ecef636423f"},"source":["print( x_train[0] )"],"execution_count":56,"outputs":[{"output_type":"stream","text":["[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ChQMhxMKQPIk","executionInfo":{"status":"ok","timestamp":1621330709665,"user_tz":-540,"elapsed":98658,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 앞에더 maxlen 단어만큼 짜름. 이떄 빈도순정렬되어있음. 현재 maxlen = 20인 상황.\n","x_train = preprocessing.sequence.pad_sequences(x_train, maxlen)\n","x_test = preprocessing.sequence.pad_sequences(x_test, maxlen)"],"execution_count":57,"outputs":[]},{"cell_type":"code","metadata":{"id":"Dhza03tA1WyT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621330709666,"user_tz":-540,"elapsed":98655,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"e463b4eb-83c7-4b6c-9aba-d1fa9480c43f"},"source":["from keras.models import Sequential\n","from keras.layers import Flatten, Dense, Embedding\n","\n","# 모델 생성 및 훈련\n","model = Sequential([\n","            Embedding(10000, 8, input_length=maxlen),\n","            Flatten(),\n","            Dense(1, activation='sigmoid')\n","])\n","model.summary()"],"execution_count":58,"outputs":[{"output_type":"stream","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_7 (Embedding)      (None, 20, 8)             80000     \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 160)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 161       \n","=================================================================\n","Total params: 80,161\n","Trainable params: 80,161\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cm97675pRbxn","executionInfo":{"status":"ok","timestamp":1621330735781,"user_tz":-540,"elapsed":124766,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"b72e8dce-7fa6-4d97-a8e2-2a0be17f4732"},"source":["model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(x_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_split=0.2)"],"execution_count":59,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.6812 - acc: 0.5847 - val_loss: 0.5764 - val_acc: 0.7222\n","Epoch 2/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.5066 - acc: 0.7870 - val_loss: 0.4975 - val_acc: 0.7504\n","Epoch 3/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.3889 - acc: 0.8457 - val_loss: 0.4867 - val_acc: 0.7566\n","Epoch 4/10\n","625/625 [==============================] - 2s 4ms/step - loss: 0.3119 - acc: 0.8851 - val_loss: 0.4945 - val_acc: 0.7556\n","Epoch 5/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.2523 - acc: 0.9173 - val_loss: 0.5135 - val_acc: 0.7520\n","Epoch 6/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.2008 - acc: 0.9403 - val_loss: 0.5393 - val_acc: 0.7488\n","Epoch 7/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.1600 - acc: 0.9585 - val_loss: 0.5724 - val_acc: 0.7430\n","Epoch 8/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.1291 - acc: 0.9708 - val_loss: 0.6075 - val_acc: 0.7394\n","Epoch 9/10\n","625/625 [==============================] - 3s 4ms/step - loss: 0.1018 - acc: 0.9806 - val_loss: 0.6461 - val_acc: 0.7358\n","Epoch 10/10\n","625/625 [==============================] - 2s 4ms/step - loss: 0.0818 - acc: 0.9860 - val_loss: 0.6893 - val_acc: 0.7294\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ix7y5_FQ10Ei","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1621330736311,"user_tz":-540,"elapsed":125292,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"8c02f2ec-fd22-4356-e33e-f9340996135d"},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":60,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x360 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":483,"height":302},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"3gIyQjVdL9uD"},"source":["임베딩 층을 위해 미리 계산된 단어 임베딩 데이터베이스\n","\n","- Word2vec 알고리즘 : 2013년 구글의 토마스 미코로프가 개발, 단어를 벡터로 바꿔주는 기능을 하며 구체적인 의미가 있는 속성을 구분 (https://code.google.com/archive/p/word2vec)\n"," - 단어를 벡터화 할 때 단어의 문맥적 의미를 보존\n"," - 벡터로 바뀐 단어들은 거리 계산을 통해 유사도를 판단\n"," - 성별처럼 구체적인 의미가 있는 속성을 캐치 \n","\n","\n","- Glove 알고리즘 : 2014년 영문 위키피디아를 사용해 사전에 계산된 임베딩\n"," - 파일의 이름은 glove.6B.zip이고 압축 파일 크기는 823MB\n"," - 400,000만개의 단어(또는 단어가 아닌 토큰)에 대한 100차원의 임베딩 벡터를 포함\n","(https://nlp.stanford.edu/projects/glove/)\n","\n"," - 단어의 동시 출현 통계를 기록한 행렬을 분해하는 기법을 사용\n","\n","- 기타 : https://github.com/Hironsan/awesome-embedding-models#pre-trained-word-vectors"]},{"cell_type":"markdown","metadata":{"id":"hqO1Mh5w5XNv"},"source":["원본 IMDB 텍스트 다운로드\n","\n","-  http://mng.bz/0tIo 에서 IMDB 원본 데이터셋을 다운로드\n","\n","- 훈련용 리뷰 하나를 문자열 하나로 만들어 훈련 데이터를 문자열의 리스트로 구성"]},{"cell_type":"code","metadata":{"id":"JVyG7sY-Cqms","colab":{"base_uri":"https://localhost:8080/","height":220},"executionInfo":{"status":"error","timestamp":1621331659724,"user_tz":-540,"elapsed":824,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"5f2cc7a6-19c5-4327-8f7e-dd88e8110ccd"},"source":["train_path = drive_path + 'aclImdb.zip'\n","!cp '$train_path' .\n","!unzip aclImdb.zip\n","!rm aclImdb.zip"],"execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-241c09511561>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdrive_path\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'aclImdb.zip'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cp '$train_path' .\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'unzip aclImdb.zip'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'rm aclImdb.zip'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'drive_path' is not defined"]}]},{"cell_type":"code","metadata":{"id":"DPkdMRbT6EDG","executionInfo":{"status":"ok","timestamp":1621331661413,"user_tz":-540,"elapsed":2504,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["import os\n","\n","imdb_dir = './aclImdb'\n","train_dir = os.path.join(imdb_dir, 'train')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","    dir_name = os.path.join(train_dir, label_type)\n","    for fname in os.listdir(dir_name):\n","        if fname[-4:] == '.txt':\n","            f = open(os.path.join(dir_name, fname), encoding='utf8')\n","            texts.append(f.read())\n","            f.close()\n","            if label_type == 'neg':\n","                labels.append(0)\n","            else:\n","                labels.append(1)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"VjqKtIofCiAs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621331673844,"user_tz":-540,"elapsed":14930,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"1f6b9e33-d4a3-4487-a3db-8afb356bc5d3"},"source":["# 데이터 토큰화 ★\n","import numpy as np\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","\n","maxlen = 100  # 100개 단어 이후는 버림\n","training_samples = 200  # 훈련 샘플은 200개\n","validation_samples = 10000  # 검증 샘플은 10,000개\n","max_words = 10000  # 데이터셋에서 가장 빈도 높은 10,000개의 단어만 사용\n","\n","\n","# 데이터를 훈련 세트와 검증 세트로 분할\n","token = Tokenizer(max_words)\n","token.fit_on_texts(texts)\n","sequences = token.texts_to_sequences(texts)\n","print(sequences)\n","data = pad_sequences(sequences, maxlen)\n","labels = np.asarray(labels)\n","\n","data.shape, labels.shape\n","\n","data[0]"],"execution_count":4,"outputs":[{"output_type":"stream","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["array([   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n","          0,    0,    0,    0,    0,    0,    0,    0,    0,    1,  102,\n","         23, 6985,    2,  724,   16,  313,  109,  342, 3169,  425, 1047,\n","         39, 4988,  442,    1,  113,    6,   96, 4558,   15,    9,    5,\n","         27,   75,    8,   32, 1135,  117,    1,  347,   93,   42, 1328,\n","         44,  332,    3, 3050, 1706,  334,   85,   38,  106,    6,   21,\n","          3, 3462,  250, 3050, 1706,  549,  106,   56,   40,  211,    5,\n","          3,  173,    7,    7,   20,    1,  223, 1079,   58,  319,  882,\n","         10,  255,    1,   17,    5,   27,  218,  725,   39,  734,   30,\n","         29], dtype=int32)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"53lfhiNWcqy7","executionInfo":{"status":"ok","timestamp":1621331673844,"user_tz":-540,"elapsed":14923,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 데이터 섞음\n","indices = np.arange(data.shape[0])\n","np.random.shuffle(indices)\n","data = data[indices]\n","labels = labels[indices]"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"qBNh9AIvdP0v","executionInfo":{"status":"ok","timestamp":1621331673845,"user_tz":-540,"elapsed":14919,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 훈련 검증 데잍\n","X_train = data[:training_samples]\n","y_train = labels[:training_samples]\n","X_val = data[training_samples : training_samples + validation_samples]\n","y_val = labels[training_samples : training_samples + validation_samples]"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"JrKAySRoeXar","executionInfo":{"status":"ok","timestamp":1621331673846,"user_tz":-540,"elapsed":14916,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 그냥 train_test_split 써라 ㅋㅋ"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BRbk_yj0-I6W"},"source":["GloVe 단어 임베딩 내려받기\n","\n","- https://nlp.stanford.edu/projects/glove\n","- 파일의 이름은 glove.6B.zip이고 압축 파일 크기는 823MB\n","-  400,000만개의 단어(또는 단어가 아닌 토큰)에 대한 100차원의 임베딩 벡터를 포함"]},{"cell_type":"markdown","metadata":{"id":"UD6nJKLuAoaq"},"source":["임베딩 전처리\n","\n","- 압축 해제한 파일(.txt 파일)을 파싱하여 단어(즉 문자열)와 이에 상응하는 벡터 표현(즉 숫자 벡터)를 매핑하는 인덱스를 제작"]},{"cell_type":"code","metadata":{"id":"rOIzkuzyFAPW","colab":{"base_uri":"https://localhost:8080/","height":220},"executionInfo":{"status":"error","timestamp":1621331673866,"user_tz":-540,"elapsed":14931,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"ece72584-43de-4bfe-9f3e-0c1d27632464"},"source":["train_path = drive_path + 'glove.6B.zip'\n","!cp '$train_path' .\n","!unzip glove.6B.zip\n","!rm glove.6B.zip"],"execution_count":8,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-9e700b3b3d89>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdrive_path\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'glove.6B.zip'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cp '$train_path' .\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'unzip glove.6B.zip'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'rm glove.6B.zip'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'drive_path' is not defined"]}]},{"cell_type":"code","metadata":{"id":"8odw5N3fAwSS","executionInfo":{"status":"aborted","timestamp":1621331673849,"user_tz":-540,"elapsed":14907,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["glove_dir = './'\n","import os \n","import numpy as np\n","\n","embeddings_index = {}\n","\n","#사전 정의된 인덱스를, 줄별ㄹ 읽어 오는 거시다.\n","f = open(os.path.join(glove_dir, 'glove.6B.100d.txt'), encoding=\"utf8\")\n","for line in f:\n","    values = line.split()\n","    word = values[0]\n","    coefs = np.asarray(values[1:], dtype='float32')\n","    embeddings_index[word] = coefs\n","f.close()\n","\n","print('%s개의 단어 벡터를 찾았습니다.' % len(embeddings_index))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rf_BcURhfZt9","executionInfo":{"status":"aborted","timestamp":1621331673850,"user_tz":-540,"elapsed":14903,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["embeddings_index[\"prison\"].shape"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3BD55Op_A4jD"},"source":["* Embedding 층에 주입할 수 있도록 임베딩 행렬 제작"]},{"cell_type":"code","metadata":{"id":"fEh3qSZ0A6rE","executionInfo":{"status":"aborted","timestamp":1621331673850,"user_tz":-540,"elapsed":14890,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["embedding_dim = 100\n","\n","embedding_matrix = np.zeros( (max_words, embedding_dim) )\n","for word, i in word_index.items():\n","  embedding_vector = embeddings_index.get(word)\n","  if i < max_words:\n","    if embedding_vector is not None:\n","      embedding_matrix[i] = embedding_vector\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dQP1wEGHBIXo","executionInfo":{"status":"aborted","timestamp":1621331673851,"user_tz":-540,"elapsed":14883,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 정의\n","model = Sequential([\n","          Embedding(max_words, embedding_dim, input_length=maxlen),\n","          Flatten(),\n","          Dense(32, activation='relu'),\n","          Dense(1, activation='sigmoid')\n","])\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jZt0JWECBMk1","executionInfo":{"status":"aborted","timestamp":1621331673851,"user_tz":-540,"elapsed":14878,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델에 GloVe 임베딩 로드\n","# 추가적으로 Embedding 층을 동결(trainable 속성을 False로 설정)\n","model.layers[0].set_weights([embedding_matrix])\n","model.layers[0].trainable = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p5dOOErUBcrQ","executionInfo":{"status":"aborted","timestamp":1621331673852,"user_tz":-540,"elapsed":14875,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 훈련과 평가\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F3BCH-tCCSyX","executionInfo":{"status":"aborted","timestamp":1621331673852,"user_tz":-540,"elapsed":14870,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vtEr2rIpHBoT"},"source":["*  훈련 샘플 수가 작기 때문에 과대적합이 빠르게 시작\n","* 같은 이유로 검증 정확도와 훈련 정확도 사이에 차이가 큽"]},{"cell_type":"markdown","metadata":{"id":"LtHDljH0BkJI"},"source":["사전 훈련된 단어 임베딩을 사용하지 않거나 임베딩 층을 동결하지 않고 같은 모델을 훈련\n","\n","- 이런 경우 해당 작업에 특화된 입력 토큰의 임베딩을 학습\n","-  데이터가 풍부하게 있다면 사전 훈련된 단어 임베딩보다 일반적으로 훨씬 성능이 높음"]},{"cell_type":"code","metadata":{"id":"6-2AiBECBlCe","executionInfo":{"status":"aborted","timestamp":1621331673853,"user_tz":-540,"elapsed":14867,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 생성 및 훈련"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KIWJnx94CTz5","executionInfo":{"status":"aborted","timestamp":1621331673853,"user_tz":-540,"elapsed":14863,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ul8wnAisHgjm"},"source":["* 검증 정확도는 50% 초반에 멈춤\n","* 여기에서는 사전 훈련된 단어 임베딩을 사용하는 것이 임베딩을 함께 훈련하는 것보다 나음\n","* 훈련 샘플의 수를 늘리면 금새 상황이 바뀜"]},{"cell_type":"markdown","metadata":{"id":"EdzPDWqFBqHh"},"source":["훈련 샘플의 수를 2000개로 늘려서 확인"]},{"cell_type":"code","metadata":{"id":"YKeS0DOdBsaR","executionInfo":{"status":"aborted","timestamp":1621331673853,"user_tz":-540,"elapsed":14859,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8SegNzsxBs-u","executionInfo":{"status":"aborted","timestamp":1621331673854,"user_tz":-540,"elapsed":14856,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 훈련"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_ARWJnjnCVCu","executionInfo":{"status":"aborted","timestamp":1621331673854,"user_tz":-540,"elapsed":14852,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KClAWi_OH5Bb"},"source":["* 훈련 샘플의 수를 늘리니 단어 임베딩을 같이 훈련하는 모델의 검증 정확도가 70% 정도로 증가"]},{"cell_type":"markdown","metadata":{"id":"4_UWVofdByry"},"source":["테스트 데이터에서 모델을 평가"]},{"cell_type":"code","metadata":{"id":"0tWGI_FQB2yw","executionInfo":{"status":"aborted","timestamp":1621331673855,"user_tz":-540,"elapsed":14848,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 테스트 데이터를 토큰화\n","test_dir = os.path.join(imdb_dir, 'test')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","  dir_name = os.path.join(test_dir, label_type)\n","  for fname in sorted(os.listdir(dir_name)):\n","    f = open(os.path.join(dir_name, fname), encoding='utf8')\n","    texts.append(f.read())\n","    if label_type == 'neg':\n","      labels.append(0)\n","    else:\n","      labels.append(1)\n","\n","sequences = token.texts_to_sequences(texts)\n","X_test = pad_sequences(sequences, maxlen=maxlen)\n","y_test = np.asarray(labels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q4xZWBZRB-Pl","executionInfo":{"status":"aborted","timestamp":1621331673855,"user_tz":-540,"elapsed":14844,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 첫 번째 모델을 로드하고 평가\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N-RB20prKc_e","executionInfo":{"status":"aborted","timestamp":1621331673856,"user_tz":-540,"elapsed":14841,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["model.predict(X_test)\n","\n","# << 요걸 쓰면 점수 말고 실제 평가를 알려준다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yHvIpqs9KcK1"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"wa9c7N9sCCc_"},"source":["*  적은 수의 훈련 샘플로 작업하는 것은 어려운 일"]},{"cell_type":"markdown","metadata":{"id":"ZbLjgeDAQSym"},"source":["### NLP 연습 03 - 사전 훈련된 단어 임베딩 사용하기\n","\n","- 훈련 데이터가 부족한 경우에 미리 계산된 임베딩 공간에서 임베딩 벡터를 로드할 수 있음 (이미지 분류 문제의 사전 훈련된 컨브넷을 사용하는 이유와 동일)\n","\n","- 일반적인 특성의 경우에만 적용\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"BGnZmp-QQSyr"},"source":["임베딩 층을 위해 미리 계산된 단어 임베딩 데이터베이스\n","\n","- Word2vec 알고리즘 : 2013년 구글의 토마스 미코로프가 개발, 단어를 벡터로 바꿔주는 기능을 하며 구체적인 의미가 있는 속성을 구분 (https://code.google.com/archive/p/word2vec)\n"," - 단어를 벡터화 할 때 단어의 문맥적 의미를 보존\n"," - 벡터로 바뀐 단어들은 거리 계산을 통해 유사도를 판단\n"," - 성별처럼 구체적인 의미가 있는 속성을 캐치 \n","\n","\n","- Glove 알고리즘 : 2014년 영문 위키피디아를 사용해 사전에 계산된 임베딩\n"," - 파일의 이름은 glove.6B.zip이고 압축 파일 크기는 823MB\n"," - 400,000만개의 단어(또는 단어가 아닌 토큰)에 대한 100차원의 임베딩 벡터를 포함\n","(https://nlp.stanford.edu/projects/glove/)\n","\n"," - 단어의 동시 출현 통계를 기록한 행렬을 분해하는 기법을 사용\n","\n","- 기타 : https://github.com/Hironsan/awesome-embedding-models#pre-trained-word-vectors"]},{"cell_type":"markdown","metadata":{"id":"qzhFbqi-QSys"},"source":["원본 IMDB 텍스트 다운로드\n","\n","-  http://mng.bz/0tIo 에서 IMDB 원본 데이터셋을 다운로드\n","\n","- 훈련용 리뷰 하나를 문자열 하나로 만들어 훈련 데이터를 문자열의 리스트로 구성"]},{"cell_type":"code","metadata":{"id":"rF-yaxc-QSys","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621331701092,"user_tz":-540,"elapsed":10771,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"9211f15e-7ffb-4426-eff1-5957204f5559"},"source":["train_path = drive_path + 'aclImdb.zip'\n","!cp '$train_path' .\n","!unzip aclImdb.zip\n","!rm aclImdb.zip"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Archive:  aclImdb.zip\n","replace aclImdb/imdb.vocab? [y]es, [n]o, [A]ll, [N]one, [r]ename: N\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qwNyCa6JQSyt","executionInfo":{"status":"ok","timestamp":1621331702539,"user_tz":-540,"elapsed":12205,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["import os\n","\n","imdb_dir = './aclImdb'\n","train_dir = os.path.join(imdb_dir, 'train')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","    dir_name = os.path.join(train_dir, label_type)\n","    for fname in os.listdir(dir_name):\n","        if fname[-4:] == '.txt':\n","            f = open(os.path.join(dir_name, fname), encoding='utf8')\n","            texts.append(f.read())\n","            f.close()\n","            if label_type == 'neg':\n","                labels.append(0)\n","            else:\n","                labels.append(1)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Ph1BIfJ6FjT","executionInfo":{"status":"ok","timestamp":1621331838661,"user_tz":-540,"elapsed":10047,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"9388d41e-f9bd-44c6-8134-064406bad9ca"},"source":["# 데이터 토큰화\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","\n","maxlen = 100  # 100개 단어 이후는 버림\n","training_samples = 200  # 훈련 샘플은 200개\n","validation_samples = 10000  # 검증 샘플은 10,000개\n","max_words = 10000  # 데이터셋에서 가장 빈도 높은 10,000개의 단어만 사용\n","\n","\n","# 데이터를 훈련 세트와 검증 세트로 분할\n","token = Tokenizer(max_words)\n","token.fit_on_texts(texts)\n","sequences = token.texts_to_sequences(texts)\n","word_index = token.word_index\n","\n","data = pad_sequences(sequences, maxlen)\n","labels = np.asarray(labels)\n","\n","data.shape, labels.shape"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((25000, 100), (25000,))"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"SPAbxZRJQSyu","executionInfo":{"status":"ok","timestamp":1621331840566,"user_tz":-540,"elapsed":895,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 데이터 섞음\n","indices = np.arange(data.shape[0])\n","np.random.shuffle(indices)\n","data = data[indices]\n","labels = labels[indices]"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"I9IahaWx6J_U"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fnG6G6JKQSyv","executionInfo":{"status":"aborted","timestamp":1621331702540,"user_tz":-540,"elapsed":12193,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 훈련 검증 데이터셋 분리\n","X_train = data[:training_samples]\n","y_train = labels[:training_samples]\n","X_val = data[training_samples : training_samples + validation_samples]\n","y_val = labels[training_samples : training_samples + validation_samples]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZUsqLFyfQSyv"},"source":["GloVe 단어 임베딩 내려받기\n","\n","- https://nlp.stanford.edu/projects/glove\n","- 파일의 이름은 glove.6B.zip이고 압축 파일 크기는 823MB\n","-  400,000만개의 단어(또는 단어가 아닌 토큰)에 대한 100차원의 임베딩 벡터를 포함"]},{"cell_type":"markdown","metadata":{"id":"XomnO_N_QSyv"},"source":["임베딩 전처리\n","\n","- 압축 해제한 파일(.txt 파일)을 파싱하여 단어(즉 문자열)와 이에 상응하는 벡터 표현(즉 숫자 벡터)를 매핑하는 인덱스를 제작"]},{"cell_type":"code","metadata":{"id":"1cyYrsDhQSyw","executionInfo":{"status":"aborted","timestamp":1621331702540,"user_tz":-540,"elapsed":12189,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["train_path = drive_path + 'glove.6B.zip'\n","!cp '$train_path' .\n","!unzip glove.6B.zip\n","!rm glove.6B.zip"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"26hXeAENQSyw","executionInfo":{"status":"aborted","timestamp":1621331702541,"user_tz":-540,"elapsed":12186,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["glove_dir = './'\n","\n","embeddings_index = {}\n","f = open(os.path.join(glove_dir, 'glove.6B.100d.txt'), encoding=\"utf8\")\n","for line in f:\n","    values = line.split()\n","    word = values[0]\n","    coefs = np.asarray(values[1:], dtype='float32')\n","    embeddings_index[word] = coefs\n","f.close()\n","\n","print('%s개의 단어 벡터를 찾았습니다.' % len(embeddings_index))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sFa4fzelQSyx"},"source":["* Embedding 층에 주입할 수 있도록 임베딩 행렬 제작"]},{"cell_type":"code","metadata":{"id":"GfbWcBILQSyx","executionInfo":{"status":"aborted","timestamp":1621331702541,"user_tz":-540,"elapsed":12182,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["embedding_dim = 100\n","\n","embedding_matrix = np.zeros( (max_words, embedding_dim) )\n","for word, i in word_index.items():\n","  embedding_vector = embeddings_index.get(word)\n","  if i < max_words:\n","    if embedding_vector is not None:\n","      embedding_matrix[i] = embedding_vector\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bx-f-o72QSyx","executionInfo":{"status":"aborted","timestamp":1621331702542,"user_tz":-540,"elapsed":12179,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 정의\n","model = Sequential([\n","          Embedding(max_words, embedding_dim, input_length=maxlen),\n","          Flatten(),\n","          Dense(32, activation='relu'),\n","          Dense(1, activation='sigmoid')\n","])\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GAm-RpoSQSyy","executionInfo":{"status":"aborted","timestamp":1621331702542,"user_tz":-540,"elapsed":12175,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델에 GloVe 임베딩 로드\n","# 추가적으로 Embedding 층을 동결(trainable 속성을 False로 설정)\n","model.layers[0].set_weights([embedding_matrix])\n","model.layers[0].trainable = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1uacNZG3QSyy","executionInfo":{"status":"aborted","timestamp":1621331702543,"user_tz":-540,"elapsed":12169,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 훈련과 평가\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(X_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_data=(X_val, y_val))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o6WDqap6IWY_","executionInfo":{"status":"aborted","timestamp":1621331702543,"user_tz":-540,"elapsed":12163,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["model.save_weights(drive_path + 'pre_trained_glove_model.h5')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"upT-xJ9eQSyz","executionInfo":{"status":"aborted","timestamp":1621331702544,"user_tz":-540,"elapsed":12160,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qdo3SeK3QSyz"},"source":["*  훈련 샘플 수가 작기 때문에 과대적합이 빠르게 시작\n","* 같은 이유로 검증 정확도와 훈련 정확도 사이에 차이가 큽"]},{"cell_type":"markdown","metadata":{"id":"3rP0gQFRQSyz"},"source":["사전 훈련된 단어 임베딩을 사용하지 않거나 임베딩 층을 동결하지 않고 같은 모델을 훈련\n","\n","- 이런 경우 해당 작업에 특화된 입력 토큰의 임베딩을 학습\n","-  데이터가 풍부하게 있다면 사전 훈련된 단어 임베딩보다 일반적으로 훨씬 성능이 높음"]},{"cell_type":"code","metadata":{"id":"C1zGrMl3QSyz","executionInfo":{"status":"aborted","timestamp":1621331702544,"user_tz":-540,"elapsed":12156,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 생성 및 훈련\n","# 모델 정의\n","model = Sequential([\n","          Embedding(max_words, embedding_dim, input_length=maxlen),\n","          Flatten(),\n","          Dense(32, activation='relu'),\n","          Dense(1, activation='sigmoid')\n","])\n","model.summary()\n","\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(X_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_data=(X_val, y_val))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PE2HPQj-QSy0","executionInfo":{"status":"aborted","timestamp":1621331702544,"user_tz":-540,"elapsed":12152,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SIg_1I2mQSy0"},"source":["* 검증 정확도는 50% 초반에 멈춤\n","* 여기에서는 사전 훈련된 단어 임베딩을 사용하는 것이 임베딩을 함께 훈련하는 것보다 나음\n","* 훈련 샘플의 수를 늘리면 금새 상황이 바뀜"]},{"cell_type":"markdown","metadata":{"id":"BFruj0eMQSy0"},"source":["훈련 샘플의 수를 2000개로 늘려서 확인"]},{"cell_type":"code","metadata":{"id":"8HR42tbhQSy0","executionInfo":{"status":"aborted","timestamp":1621331702545,"user_tz":-540,"elapsed":12149,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 훈련 검증 데이터셋 분리\n","training_samples = 2000\n","X_train = data[:training_samples]\n","y_train = labels[:training_samples]\n","X_val = data[training_samples : training_samples + validation_samples]\n","y_val = labels[training_samples : training_samples + validation_samples]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"02CspfqrQSy1","executionInfo":{"status":"aborted","timestamp":1621331702545,"user_tz":-540,"elapsed":12145,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 모델 훈련\n","history = model.fit(X_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_data=(X_val, y_val))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QHyw7MahQSy1","executionInfo":{"status":"aborted","timestamp":1621331702546,"user_tz":-540,"elapsed":12142,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Nr03pkqSQSy1"},"source":["* 훈련 샘플의 수를 늘리니 단어 임베딩을 같이 훈련하는 모델의 검증 정확도가 70% 정도로 증가"]},{"cell_type":"markdown","metadata":{"id":"uBXRcdv6QSy1"},"source":["테스트 데이터에서 모델을 평가"]},{"cell_type":"code","metadata":{"id":"ka8OCQF8QSy2","executionInfo":{"status":"aborted","timestamp":1621331702546,"user_tz":-540,"elapsed":12138,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 테스트 데이터를 토큰화\n","test_dir = os.path.join(imdb_dir, 'test')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","  dir_name = os.path.join(test_dir, label_type)\n","  for fname in sorted(os.listdir(dir_name)):\n","    f = open(os.path.join(dir_name, fname), encoding='utf8')\n","    texts.append(f.read())\n","    if label_type == 'neg':\n","      labels.append(0)\n","    else:\n","      labels.append(1)\n","\n","sequences = token.texts_to_sequences(texts)\n","X_test = pad_sequences(sequences, maxlen=maxlen)\n","y_test = np.asarray(labels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lVYoDnsTQSy2","executionInfo":{"status":"aborted","timestamp":1621331702547,"user_tz":-540,"elapsed":12135,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 첫 번째 모델을 로드하고 평가\n","model.load_weights(drive_path + 'pre_trained_glove_model.h5')\n","model.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gkc6c77oQSy2"},"source":["*  적은 수의 훈련 샘플로 작업하는 것은 어려운 일"]}]}
{"cells":[{"cell_type":"markdown","metadata":{"id":"oC99qjqGXAOk"},"source":["### 코렙에서 한글 사용"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"csF03HviW8ZB"},"outputs":[{"name":"stdout","output_type":"stream","text":["The following package was automatically installed and is no longer required:\n","  libnvidia-common-460\n","Use 'apt autoremove' to remove it.\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 34 not upgraded.\n","Need to get 9,604 kB of archives.\n","After this operation, 29.5 MB of additional disk space will be used.\n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 160706 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n","Unpacking fonts-nanum (20170925-1) ...\n","Setting up fonts-nanum (20170925-1) ...\n","Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n"]}],"source":["!apt -qq -y install fonts-nanum\n"," \n","import matplotlib.pyplot as plt\n","import matplotlib.font_manager as fm\n"," \n","fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n","font = fm.FontProperties(fname=fontpath, size=10)\n","fm._rebuild()\n"," \n","# 그래프에 retina display 적용\n","%config InlineBackend.figure_format = 'retina'\n"," \n","# Colab 의 한글 폰트 설정\n","plt.rc('font', family='NanumBarunGothic') "]},{"cell_type":"markdown","metadata":{"id":"g19tsMWUNpCx"},"source":["### 구글드라이브 연동"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ijyjm-4FNqNx"},"outputs":[],"source":["# 구글드라이브 연동\n","from google.colab import drive\n","drive.mount('/gdrive', force_remount=True)\n","\n","# 구글 드라이브 파일 확인\n","!ls '/gdrive/My Drive/temp/'\n","\n","# 반복되는 드라이브 경로 변수화\n","drive_path = '/gdrive/My Drive/temp/'"]},{"cell_type":"markdown","metadata":{"id":"7e-HRHo4fn52"},"source":["### 사전점검\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3727,"status":"ok","timestamp":1620794236120,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"nVdMAvmO6nnB","outputId":"dffff49b-a417-4c1e-f50a-656db29c013f"},"outputs":[{"data":{"text/plain":["('2.4.1', '2.4.0')"]},"execution_count":1,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["import tensorflow as tf\n","from tensorflow import keras\n","tf.__version__, keras.__version__"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":801,"status":"ok","timestamp":1620642546083,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"E72xTWbY6nnM","outputId":"22e859ee-cf4b-459e-9d50-7d9f606c4c37"},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0',)\n","장치의 수: 1\n"]}],"source":["# 분산전략 정의\n","mirrored_strategy = tf.distribute.MirroredStrategy(cross_device_ops=tf.distribute.HierarchicalCopyAllReduce())\n","print('장치의 수:', mirrored_strategy.num_replicas_in_sync)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BwaJ0UBRqxA0"},"outputs":[],"source":["# with mirrored_strategy.scope():\n","#  model = ?"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lAb2zieX7Nco"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from tensorflow import keras\n","\n","from numpy import array\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense,Flatten,Embedding"]},{"cell_type":"markdown","metadata":{"id":"TjwZ9eCRBsKd"},"source":["# 자연어처리 (Natural Language Processing, NLP)"]},{"cell_type":"markdown","metadata":{"id":"00KmFBnxBunU"},"source":["- 자연어(Natural Language) : 일상생활에서 사용하는 언어\n","- 자연어 처리(NLP) : 자연어의 의미를 분석하여 컴퓨터가 처리할 수 있도록 하는 과정\n","- 자연어 처리 분야 : 음성 인식, 내용 요약, 번역, 사용자의 감정 분석, 텍스트 분류 작업(스팸 메일 분류, 뉴스 기사 카테고리 분류), 질의 응답 시스템, 챗봇 등\n","\n","- 코퍼스 (Corpus) : 자연어 처리에 사용되는 많은 데이터의 모음 (텍스트 모음, 말뭉치)\n","\n","- 자연어 처리는 기계에게 인간의 언어를 이해시키는 것 → 인공지능에 있어서 가장 중요한 연구 분야\n"]},{"cell_type":"markdown","metadata":{"id":"YArWEVbJeEut"},"source":["단어의 의미\n","\n","- 말은 '문자'로 구성, 말의 의미는 '단어'로 구성\n","- 단어는 의미의 최소 단위\n","- 컴퓨터에게 단어를 이해시키는 방법\n"," - 시소러스를 활용한 기법(유의어 사전, WordNet)\n"," - 통계 기반 기법(Corpus, 말뭉치를 이용)\n"," - 추론 기반 기법(word2vec)"]},{"cell_type":"markdown","metadata":{"id":"nYMJMzwDeEA8"},"source":["- 문자열 : 가장 흔한 시퀸스 형태의 데이터\n","\n","- 시퀸스 처리용 딥러닝 모델 : 문서 분류, 감성 분석, 저자 식별, (제한된 범위의) 질문 응답 (QA) 등에 활용 → 일종의 패턴 인식"]},{"cell_type":"markdown","metadata":{"id":"2XgAeiYgfiVL"},"source":["텍스트 전처리 (Text Preprocessing) : 목적에 맞게 텍스트를 사전에 분류하는 과정\n"," \u003e 텍스트 데이터를 단어로 분할하고 그 분할된 단어들을 단어ID 목록으로 변환하는 일\n","\n","전처리 방법\n","\n","- 토큰화 (Tokenization) : 코퍼스를 토큰으로 나누는 작업 (문자, 단어, n-gram)\n","\n","- 정규화 (Normalization) : 코퍼스를 용도에 맞게 토큰을 분류하는 작업 (유사단어 통합, 대소문자 통합, 불필요한 단어 제거 (작은 빈도 단어, 짧은 길이의 단어))\n","\n","- 어간 추출 (Stemming) : 정규화의 한 방법으로 단어의 핵심 부분만 추출하는 것\n","\n"," - 표제어 추출 (Lemmatization) : 정규화의 한 방법으로 유사한  단어들에서 대표 단어를 추출\n","\n","- 불용어 (Stopword) 제거 : 의미없는 데이터를 제거하는 작업\n","\n","- 정규 표현식 (Regular Expression)\n","\n","- 단어 분리 (Subword Segamentation)\n","\n","- 정수 인코딩 (Integer Encoding) : 각 단어를 정수에 맵핑하는 작업\n","\n"]},{"cell_type":"markdown","metadata":{"id":"gQ37-MAeIsQa"},"source":["n-gram\n","\n","- 최대 n 개의 토큰 단위로 문자 시퀸스를 구분\n","```\n","AI is too difficult\n","```\n","- 2-gram으로 분해\n","```\n","{“AI”, “AI is”, “is”, “is too”, “too”, “too difficult”, “difficult”}\n","```\n","- 3-gram으로 분해\n","```\n","{“AI”, “AI is”, “is”, “is too”, “AI is too”, “too”, “too difficult”, “difficult”, “is too difficult”}\n","```\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6KFrRRB1kkvw"},"source":["### NLP 연습 01"]},{"cell_type":"markdown","metadata":{"id":"dy6q4zUypmSo"},"source":["토큰화"]},{"cell_type":"markdown","metadata":{"id":"n_NWyeFxnhXx"},"source":["- text_to_word_sequence() : 문장을 단어 단위로 나눔"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":504,"status":"ok","timestamp":1620796633158,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"Hb_DGulql1hK","outputId":"35a2b1da-e2c0-4244-ccd1-d00c49754eb3"},"outputs":[{"data":{"text/plain":["['자연어의', '의미를', '분석하여', '컴퓨터가', '처리할', '수', '있도록', '하는', '과정']"]},"execution_count":3,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["#주어진 문장을 '단어'로 토큰화 하기\n","#케라스의 텍스트 전처리와 관련한 함수중 text_to_word_sequence 함수\n","from tensorflow.keras.preprocessing.text import text_to_word_sequence\n"," \n","# 전처리할 텍스트\n","text = '자연어의 의미를 분석하여 컴퓨터가 처리할 수 있도록 하는 과정'\n"," \n","# 해당 텍스트를 토큰화\n","ws = text_to_word_sequence(text)\n","ws"]},{"cell_type":"markdown","metadata":{"id":"sWaFm95zn7Vu"},"source":["- Tokenizer() : 토큰화 객체\n"," - fit_on_texts(문장) : 토큰화 문장 적용\n"," - word_counts : 단어의 빈도수를 계산  \n"," - word_docs : 각 단어들이 몇 개의 문장에 나오는지 계산\n"," - word_index : 단어 인덱스 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":498,"status":"ok","timestamp":1620796989034,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"O--Y_R_Ql_Aj","outputId":"91c3a002-2138-4e3a-d071-8e47820befb6"},"outputs":[{"name":"stdout","output_type":"stream","text":["단어 카운트: OrderedDict([('먼저', 1), ('텍스트의', 2), ('각', 1), ('단어를', 1), ('나누어', 1), ('토큰화', 3), ('합니다', 1), ('단어로', 1), ('해야', 1), ('딥러닝에서', 2), ('인식됩니다', 1), ('한', 1), ('결과는', 1), ('사용', 1), ('할', 1), ('수', 1), ('있습니다', 1)])\n","문장 카운트: 3\n","단어 인덱스: {'토큰화': 1, '텍스트의': 2, '딥러닝에서': 3, '먼저': 4, '각': 5, '단어를': 6, '나누어': 7, '합니다': 8, '단어로': 9, '해야': 10, '인식됩니다': 11, '한': 12, '결과는': 13, '사용': 14, '할': 15, '수': 16, '있습니다': 17}\n","단어 인덱스: {1: '토큰화', 2: '텍스트의', 3: '딥러닝에서', 4: '먼저', 5: '각', 6: '단어를', 7: '나누어', 8: '합니다', 9: '단어로', 10: '해야', 11: '인식됩니다', 12: '한', 13: '결과는', 14: '사용', 15: '할', 16: '수', 17: '있습니다'}\n"]}],"source":["#단어 빈도수 세기\n","#전처리 하려는 세개의 문장\n","docs = ['먼저 텍스트의 각 단어를 나누어 토큰화 합니다.',\n","       '텍스트의 단어로 토큰화 해야 딥러닝에서 인식됩니다.',\n","       '토큰화 한 결과는 딥러닝에서 사용 할 수 있습니다.',\n","       ]\n","\n","token = Tokenizer()\n","token.fit_on_texts(docs)\n","\n","print( '단어 카운트:', token.word_counts )\n","print( '문장 카운트:', token.document_count)\n","print( '단어 인덱스:', token.word_index)\n","print( '인덱스 단어:', token.index_word)"]},{"cell_type":"markdown","metadata":{"id":"i8O9w5PLstUe"},"source":["단어의 원-핫 인코딩"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IVyb3t-BJZ5Z"},"outputs":[],"source":["## 함수 로딩, 사용할 문장 설정\n","from keras.preprocessing.text import Tokenizer\n","\n","token = Tokenizer(num_words=10)\n","token.fit_on_texts(docs)\n","\n","# 문자열 정수 인덱스 리스트 출력\n","sequences = token.texts_to_sequences(docs)\n","\n","# 이진 벡터 행렬로 출력\n","oh_result = token.texts_to_matrix(docs)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1119,"status":"ok","timestamp":1620797882587,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"tLSF6Gx4s5UO","outputId":"d4da56ad-c481-425e-9ec4-53ebbe9896ea"},"outputs":[{"data":{"text/plain":["[[1, 2, 3, 4, 5, 6, 7]]"]},"execution_count":18,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["text = '먼저 텍스트의 각 단어를 나누어 토큰화 합니다.'\n","\n","token = Tokenizer()\n","token.fit_on_texts([text])\n","x = token.texts_to_sequences([text])\n","x"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":490,"status":"ok","timestamp":1620797975729,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"N0cIMwfGtpxL","outputId":"30aa9ed2-4a88-4869-df5b-e010775a442b"},"outputs":[{"data":{"text/plain":["array([[[0., 1., 0., 0., 0., 0., 0., 0.],\n","        [0., 0., 1., 0., 0., 0., 0., 0.],\n","        [0., 0., 0., 1., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 1., 0., 0., 0.],\n","        [0., 0., 0., 0., 0., 1., 0., 0.],\n","        [0., 0., 0., 0., 0., 0., 1., 0.],\n","        [0., 0., 0., 0., 0., 0., 0., 1.]]], dtype=float32)"]},"execution_count":20,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["from tensorflow.keras.utils import to_categorical\n","\n","# 배열 맨 앞에 0이 추가되므로 단어 수보다 1더 많게 인덱스 추가\n","word_size = len(token.word_index) + 1\n","x_oh = to_categorical(x, word_size)\n","x_oh"]},{"cell_type":"markdown","metadata":{"id":"APBU7PYfuUEj"},"source":["단어 임베딩 (word embedding)\n","\n","- 단어와 벡터를 연관 짓는 방법 중의 하나로 실수형인 밀집 word vector을 사용하는 것\n","\n","- 원 핫 인코딩으로 만든 벡터는 희소 (sparse)하고 (대부분 0으로 채워짐) 고차원 (단어의 수와 동일)\n","\n","- 원 핫 인코딩이 수동 인코딩이라면 단어 임베딩은 저차원의 실수형 벡터 (밀집벡터)로 데이터로부터 학습\n","\n","\n","단어 임베딩 만드는 방법\n","\n"," 1. 관심 대상인 문제와 함께 단어 임베딩을 학습 → 랜덤 단어 벡터로 시작해서 가중치 학습\n","\n"," 2. 사전 훈련된 단어 임베딩 (Pretrained word embedding) : 미리 계산된 단어 임베딩을 사용"]},{"cell_type":"markdown","metadata":{"id":"PK7PTI3wKsCz"},"source":["Embedding Layer : 정수 인덱스를 밀집 벡터로 맵핑하는 기능\n","\n","Embedding Layer\n","- input_dim : 단어 사전의 크기 (단어의 종류)\n","- output_dim : 단어 인코딩 한 후에 나오는 벡터의 크기 (의미론적 기하공간의 크기)\n","- input_length : 단어의 수 (문장의 길이)\n","\n","```\n","Embedding(input_dim, output_dim, input_length)\n","```\n","\n","- Embedding Layer의 출력 크기 : 샘플 수 * output_dim * input_lenth\n","\n","- Embedding Layer 다음에 Flatten Layer 온다면 반드시 input_lenth를 지정해야 함 → 입력 크기를 알아야 이를 1차원으로 만들어서 Dense 레이어에 전달할 수 있기 때문\n","\n","- Embedding 층의 가중치는 랜덤하게 초기화 → 학습을 하면서 역전파를 통해 조정\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fiY6JfMQumvw"},"outputs":[],"source":["model = Sequential([\n","          Embedding(16, 4, input_length=2)\n","])"]},{"cell_type":"markdown","metadata":{"id":"Av8uDwqP0FCy"},"source":["Embedding 층을 (특정 단어를 나타내는) 정수 인덱스를 밀집 벡터로 매핑하는 딕셔너리로 이해\n","\n"," - 정수를 입력으로 받아 내부 딕셔너리에서 이 정수에 연관된 벡터를 찾아 반환\n"," - 크기가 (samples, sequence_length)인 2D 정수 텐서를 입력\n"," - 크기가 (samples, sequence_length, embedding_dimensionality)인 3D 실수형 텐서를 반환\n","  - 이런 3D 텐서는 RNN 층이나 1D 합성곱 층에서 처리"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ij7QYjXHz4A5"},"outputs":[],"source":["from keras.layers import Embedding\n","\n","# Embedding 층은 적어도 두 개의 매개변수를 받음\n","# 가능한 토큰의 개수(여기서는 1,000으로 단어 인덱스 최댓값 + 1)와 임베딩 차원(여기서는 64)\n","emb_layer = Embedding(1000, 64)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LDlNK-JlH2sk"},"outputs":[],"source":["# 코싸인 유사도 코드\n","def cos_similarity(x, y):\n","  nx = x / (np.square(np.sum(x ** 2)) + 1e-8)\n","  ny = y / (np.square(np.sum(y ** 2)) + 1e-8)\n","  return np.dot(nx, ny)"]},{"cell_type":"markdown","metadata":{"id":"njogb8RbwDNc"},"source":["텍스트 긍정,부정 예측"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":641,"status":"ok","timestamp":1620799708557,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"DaQ004FVmUQy","outputId":"d5b73354-00f8-42fc-e57d-5e3457215fb9"},"outputs":[{"data":{"text/plain":["[[1, 2],\n"," [3],\n"," [4, 5, 6, 7],\n"," [8, 9, 10],\n"," [11, 12, 13],\n"," [14],\n"," [15],\n"," [16, 17],\n"," [18, 19],\n"," [20]]"]},"execution_count":23,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["# 텍스트 리뷰 자료를 지정\n","docs = [\"너무 재밌네요\",\"최고예요\",\"참 잘 만든 영화예요\",\"추천하고 싶은 영화입니다\",\"한번 더 보고싶네요\",\"글쎄요\",\"별로예요\",\"생각보다 지루하네요\",\"연기가 어색해요\",\"재미없어요\"]\n","\n","# 긍정 리뷰는 1, 부정 리뷰는 0으로 클래스를 지정\n","classes = array([1,1,1,1,1,0,0,0,0,0])\n","\n","# 토큰화 \n","token = Tokenizer()\n","token.fit_on_texts(docs)\n","x = token.texts_to_sequences(docs)\n","x"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":503,"status":"ok","timestamp":1620799782225,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"MFGvb-82mWB-","outputId":"d1b78c0e-0083-4deb-b2e3-b0d9166b65ea"},"outputs":[{"data":{"text/plain":["array([[ 0,  0,  1,  2],\n","       [ 0,  0,  0,  3],\n","       [ 4,  5,  6,  7],\n","       [ 0,  8,  9, 10],\n","       [ 0, 11, 12, 13],\n","       [ 0,  0,  0, 14],\n","       [ 0,  0,  0, 15],\n","       [ 0,  0, 16, 17],\n","       [ 0,  0, 18, 19],\n","       [ 0,  0,  0, 20]], dtype=int32)"]},"execution_count":24,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["# 패딩(padding) : 길이를 똑같이 맞춰 주는 작업\n","# 서로 다른 길이의 데이터를 4로 맞춤\n","x_padded = pad_sequences(x, 4)\n","x_padded"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":496,"status":"ok","timestamp":1620799969287,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"s7MSREyakpH5","outputId":"c4556ac1-ad5d-4e1e-99a1-73602df7a967"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 4, 8)              168       \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 32)                0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 33        \n","=================================================================\n","Total params: 201\n","Trainable params: 201\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["# 딥러닝 모델\n","# 임베딩에 입력될 단어의 수를 지정\n","word_size = len(token.word_index) + 1\n","\n","model = Sequential([\n","            Embedding(word_size, 8, input_length=4),\n","            Flatten(),\n","            Dense(1, activation='sigmoid')\n","])\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QI0XnNTeNoHV"},"outputs":[],"source":["model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(x_padded, classes, epochs=20)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":997,"status":"ok","timestamp":1620800376903,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"g6V-7U0om_kQ","outputId":"118f5a8f-34f6-4c3c-a876-1deb39d03173"},"outputs":[{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAeoAAAEvCAYAAACKSII9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deXScd33v8fdX68jWYnmRYlsmdkgIWR0vCYQlRzlpgpP2NmFpE3oDhkByei7htNDCDTQnpOH0QsnltuU2BUzr29DTg9kKuK1DCMWqCziSl9gxdjbHEI/kRY68SLItyZK+948ZyaPRSBpJz+iZefx5nTNnlmfx9+eR9fHveX7P7zF3R0RERPJTUdgFiIiIyNgU1CIiInlMQS0iIpLHFNQiIiJ5TEEtIiKSxxTUIiIieawk7ALSzZ8/35cuXRroPk+fPs3s2bMD3WfYotgmiGa71KbCEcV2RbFNEL127dix43V3X5BpWd4F9dKlS9m+fXug+2xqaqKxsTHQfYYtim2CaLZLbSocUWxXFNsE0WuXmb021jId+hYREcljCmoREZE8pqAWERHJY3l3jjqTc+fO0draSk9Pz5S2r6mp4YUXXgi4qmDEYjEaGhooLS0NuxQREclDBRHUra2tVFVVsXTpUsxs0tt3dXVRVVWVg8qmx93p6OigtbWVZcuWhV2OiIjkoYI49N3T08O8efOmFNL5zMyYN2/elI8UiIhI9BVEUAORC+khUW2XiIgEI6ugNrM1ZvaSme03s4cyLL/YzP7DzJ43syYza0hZttbMXkk+1gZZ/EyqrKwMuwQREbkATRjUZlYMPAHcDlwJvN/Mrkxb7X8D33T3a4HHgC8kt50LfA54C3AD8Dkzqw2ufBERkWjLZjDZDcB+dz8AYGYbgDuBfSnrXAl8Mvl6M/DD5Ot3Ac+4+/Hkts8Aa4BvTb/0cLg7n/70p3nqqacwMx5++GHuvvtuDh8+zN13301nZyf9/f189atf5W1vexsf+chH2L59O2bGfffdxyc+8Ymwm5CfBgdh77+w8NBO2PGbsKsJ1MJDL6tNBSKK7YpimyAP2nXJzVB78Yz8UdkE9WIgnvK+lUQPOdVu4D3A3wDvBqrMbN4Y2y5O/wPM7AHgAYD6+nqamppGLK+pqaGrqyuLUjMbGBiY1vZDurq6+NGPfsSOHTv4+c9/TkdHB42NjaxcuZLvfve7NDY28qlPfYqBgQHOnDnDL37xCw4ePMjWrVsBOHnyZMY6enp6RrV5It3d3ZPeJp/NObGb63Y/wuUAL4ddTbDUpsIRxXZFsU0Qfrv2XP1ZOuanR2FuBHV51p8Cf2tmHwK2AG3AQLYbu/s6YB3A6tWrPX3+1hdeeGH48qo//9e97DvUOaniBgYGKC4uHnP5lYuq+dx/u2rC/VRVVbFjxw7uvfde5syZw5w5c2hsbOSFF17gHe94B/fddx9FRUXcddddXHfddVRUVPDaa6/x2c9+lt/+7d/mtttuo6ho9NmGWCzGihUrJtWmqM1zS1MzYDTf8He85R2NYVcTqF9u3crbbrwx7DICFcU2QTTbFcU2QfjtuqaiFkorZuTPyiao24AlKe8bkp8Nc/dDJHrUmFkl8F53P2lmbUBj2rZN06g3b910001s2bKFf//3f+dDH/oQn/zkJ/ngBz/I7t27efrpp/na177Gd77zHdavXx92qfkp3gz1V3F21iKoXhR2NYHqK5+nNhWIKLYrim2C6LYrk2yCehtwmZktIxHQ9wB/kLqCmc0Hjrv7IPAZYCiNngb+V8oAstuSy6csm55vuiAnPHnnO9/J17/+ddauXcvx48fZsmULjz/+OK+99hoNDQ3cf//99Pb2snPnTu644w7Kysp473vfy+WXX869994bSA2RMzgIrdvgmveFXYmISN6ZMKjdvd/MHiQRusXAenffa2aPAdvdfSOJXvMXzMxJHPr+WHLb42b2eRJhD/DY0MCyQvXud7+brVu3snz5csyML33pS1x00UU8+eSTPP7445SWllJZWck3v/lN2tra+PCHP8zg4CAAX/jCF0KuPk8dexF6O2HJW+BE2MWIiOSXrM5Ru/smYFPaZ4+kvP4e8L0xtl3P+R52weru7gYSE5Q8/vjjPP744yOWr127lrVrR18mvnPnzhmpr6DFmxPPS26AEwfDrUVEJM8UzMxkEmHxFpg1H2o137mISDoFtYSvtSVx2FvTqYqIjKKglnCd7oCO/YnD3iIiMoqCWsLV2pJ4XjIzEweIiBQaBbWEK94MRaWw6LqwKxERyUsKaglXvAUWLp+xGX5ERAqNglrCM3AO2nbq/LSIyDgU1BKeI3ug/6yCWkRkHArqSbjrrrtYtWoVV111FevWrQPgxz/+MStXrmT58uXccsstQGJylA9/+MNcc801XHvttXz/+98Ps+z8FU8OJGtQUIuIjCWou2ddENavX8/cuXM5e/Ys119/PXfeeSf3338/W7ZsYdmyZRw/npgd9fOf/zw1NTXs2bMHgBMnNC9mRvFmqFkCNaPufCoiIkmFF9RPPZQ4ZDoJFQP9UDxOUy+6Bm7/4oT7+cpXvsIPfvADAOLxOOvWreOmm25i2bLEjFpz584F4Kc//SkbNmwY3q62tnb0ziTRo36DLssSERmPDn1nqampiZ/+9Kds3bqV3bt3s2LFCq67TpcUTdmpVuhs1fXTIiITKLwedRY933RnA7jN5alTp6itrWXWrFm8+OKLPPvss/T09LBlyxZ+/etfDx/6njt3LrfeeitPPPEEf/3Xfw0kDn2rV51m+Pz09eHWISKS59SjztKaNWvo7+/niiuu4KGHHuKtb30rCxYsYN26dbznPe9h+fLl3H333QA8/PDDnDhxgquvvprly5ezefPmkKvPQ63boKQicdpBRETGVHg96pCUl5fz1FNPZVx2++23j3hfWVnJk08+ORNlFa54MyxeBcWlYVciIpLX1KOWmXfuLBzereunRUSyoKCWmXfoORjs10AyEZEsKKhl5sWbE88aSCYiMqGCCWp3D7uEnIhqu8YVb4F5l8LseWFXIiKS9woiqGOxGB0dHZELNXeno6ODWCwWdikzxz0R1DrsLSKSlYIY9d3Q0EBrayvHjh2b0vY9PT15G4axWIyGhoawy5g5xw/Amdc1kExEJEsFEdSlpaXD03RORVNTEytWrAiwIpmyoYlO1KMWEclKQRz6lgiJN0N5Dcy/POxKREQKgoJaZla8BRpWQ5F+9EREsqHfljJzejqhfZ8Oe4uITIKCWmZO23bANZBMRGQSFNQyc+ItYEWJOb5FRCQrCmqZOfFmqLsKYtVhVyIiUjAU1DIzBgegdbsOe4uITJKCWmbGsReht1NBLSIySQpqmRnDE50oqEVEJkNBLTMj3gKzF0Dt1GeYExG5ECmoZWbEmxPXT5uFXYmISEFRUEvunX4djr+qw94iIlOgoJbc0404RESmTEEtuRdvhqJSWHhd2JWIiBQcBbXkXus2WLgcSvPznuAiIvlMQS25NXAO2nbosLeIyBRlFdRmtsbMXjKz/Wb2UIblbzCzzWb2nJk9b2Z3JD9famZnzWxX8vG1oBsgee7I89Dfo4FkIiJTVDLRCmZWDDwB3Aq0AtvMbKO770tZ7WHgO+7+VTO7EtgELE0ue9XddXLyQqWBZCIi05JNj/oGYL+7H3D3PmADcGfaOg4M3WmhBjgUXIlS0OLNUPMGqF4YdiUiIgUpm6BeDMRT3rcmP0v1KHCvmbWS6E1/PGXZsuQh8f80s3dOp1gpQPEWWHJ92FWIiBQsc/fxVzB7H7DG3T+afP8B4C3u/mDKOp9M7uvLZnYj8A/A1UApUOnuHWa2CvghcJW7d6b9GQ8ADwDU19ev2rBhQ2ANBOju7qaysjLQfYatENpU3nOMG5/9KK9cej9tDb+T1TaF0K7JUpsKRxTbFcU2QfTadfPNN+9w99UZF7r7uA/gRuDplPefAT6Tts5eYEnK+wNAXYZ9NQGrx/vzVq1a5UHbvHlz4PsMW0G0ac/33T9X7d62M+tNCqJdk6Q2FY4otiuKbXKPXruA7T5GLmZz6HsbcJmZLTOzMuAeYGPaOgeBWwDM7AogBhwzswXJwWiY2SXAZckQlwtBvAVKZ0H91WFXIiJSsCYc9e3u/Wb2IPA0UAysd/e9ZvYYif8BbAT+BPiGmX2CxMCyD7m7m9lNwGNmdg4YBP7Q3Y/nrDWSX+LNsHgVFJeGXYmISMGaMKgB3H0TiUFiqZ89kvJ6H/D2DNt9H/j+NGuUQtR3JnEN9dv/KOxKREQKmmYmk9w49BwM9kODJjoREZkOBbXkRmtyopMGXZolIjIdCmrJjXgLzLsMZs8LuxIRkYKmoJbguScGkmnaUBGRaVNQS/COH4AzHboRh4hIABTUErx4c+JZPWoRkWlTUEvw4i0Qq4H5bwq7EhGRgqegluDFWxKjvYv04yUiMl36TSrB6jkF7ft02FtEJCAKaglW63bANZBMRCQgCmoJVrwFrCgxx7eIiEybglqCFW+G+qugvCrsSkREIkFBLcEZHIC2HZrfW0QkQApqCc6xF6G3UwPJREQCpKCW4AxPdKIetYhIUBTUEpx4C8yug9qlYVciIhIZCmoJTrw50Zs2C7sSEZHIUFBLMLqPJW7GofPTIiKBUlBLMFq3JZ51flpEJFAKaglGvBmKSmHhdWFXIiISKQpqCUa8BRZdB6WxsCsREYkUBbVMX38fHNqp89MiIjmgoJbpO7IH+nt0flpEJAcU1DJ9QxOdaOpQEZHAKahl+lpboOYNUL0w7EpERCJHQS3TF2/RYW8RkRxRUMv0nGqFzjYNJBMRyREFtUyPbsQhIpJTCmqZnngLlM6C+qvDrkREJJIU1DI98WZYvAqKS8KuREQkkhTUMnV9ZxLXUOuwt4hIziioZeoOPQeD/RpIJiKSQwpqmbrhiU6uD7cOEZEIU1DL1MVbYP6bYNbcsCsREYksBbVMjXtiRjKdnxYRySkFtUzN8QNwpkPze4uI5JiCWqZmeKITDSQTEcklBbVMTbwZYjWJc9QiIpIzWQW1ma0xs5fMbL+ZPZRh+RvMbLOZPWdmz5vZHSnLPpPc7iUze1eQxUuI4i2Jw95F+r+eiEguTfhb1syKgSeA24Ergfeb2ZVpqz0MfMfdVwD3AH+X3PbK5PurgDXA3yX3J4Xs7Elof0GHvUVEZkA23aEbgP3ufsDd+4ANwJ1p6zhQnXxdAxxKvr4T2ODuve7+a2B/cn9SyNq2A64R3yIiMyCbCZoXA/GU961AelfqUeAnZvZxYDbwWynbPpu27eIpVRp1Ha/Cd9fCuZ6sVr/hzBnYMyvHRY2h5yRYUWKObxERyamg7qTwfuAf3f3LZnYj8E9mlvXtlMzsAeABgPr6epqamgIqK6G7uzvwfQatIf4jLj2yh/YFbwdswvXPxfrpLgrpRhiz6umqfyPxrdsD33UhfFeTpTYVjii2K4ptgui2K5NsftO3AUtS3jckP0v1ERLnoHH3rWYWA+ZnuS3uvg5YB7B69WpvbGzMsvzsNDU1EfQ+A/ftf4A5F1P3sU1ZrR52m+qAN+Zgv2G3KxfUpsIRxXZFsU0Q3XZlks056m3AZWa2zMzKSAwO25i2zkHgFgAzuwKIAceS691jZuVmtgy4DGgJqvjIcE9c7qTBWSIikmbCHrW795vZg8DTQDGw3t33mtljwHZ33wj8CfANM/sEiYFlH3J3B/aa2XeAfUA/8DF3H8hVYwrWyYPQfVSDs0REZJSsTnK6+yZgU9pnj6S83ge8fYxt/wL4i2nUGH3x5EEG9ahFRCSNZqvIB/FmKKuEuvTL00VE5EKnoM4HrS2weCUUhzSKW0RE8paCOmy93XDkVzrsLSIiGSmow3ZoJ/iAglpERDJSUIdt6HaRDavDrUNERPKSgjps8RZY8GaoqA27EhERyUMK6jANDiZvF3l92JWIiEieUlCHqWN/4gYXOj8tIiJjUFCHaej8tIJaRETGoKAOU7w5cW563qVhVyIiInlKQR2meAs03ABF+hpERCQzJURYzhyH11/SjThERGRcCuqwtO1IPCuoRURkHArqsMSbwYph0cqwKxERkTymoA5LvBkuuhrKK8OuRERE8piCOgwD/dC6Q5dliYjIhBTUYWjfC+dOK6hFRGRCCuowxFsSzxpIJiIiE1BQhyHeApUXQc2SsCsREZE8p6AOQ7w50Zs2C7sSERHJcwrqmdZ1BE6+pvPTIiKSFQX1TBs+P62gFhGRiSmoZ1q8GYrLYeG1YVciIiIFQEE90+ItsGgFlJSHXYmIiBQABfVM6u+Fw7tgyfVhVyIiIgVCQT2TDu+GgT6dnxYRkawpqGdSvDnx3KCJTkREJDsK6pkUb4bapVBVH3YlIiJSIBTUM8U9MZBMh71FRGQSFNQz5eRr0H1U83uLiMikKKhnSnxb4lnnp0VEZBIU1DMl3gxllVB3ZdiViIhIAVFQz5R4MyxeBcUlYVciIiIFREE9E3q74eivNJBMREQmTUE9E9p2gA8qqEVEZNIU1DNh6I5ZDavCrUNERAqOgnomtLbAgjdDRW3YlYiISIFRUOfa4GByohNdliUiIpOXVVCb2Roze8nM9pvZQxmW/5WZ7Uo+XjazkynLBlKWbQyy+ILQ8Qr0nNT5aRERmZIJrxUys2LgCeBWoBXYZmYb3X3f0Dru/omU9T8OrEjZxVl3vy64kgvM0I04FNQiIjIF2fSobwD2u/sBd+8DNgB3jrP++4FvBVFcJMSbE+em510adiUiIlKAsgnqxUA85X1r8rNRzOxiYBnws5SPY2a23cyeNbO7plxpoYpvS0wbahZ2JSIiUoDM3cdfwex9wBp3/2jy/QeAt7j7gxnW/Z9Ag7t/POWzxe7eZmaXkAjwW9z91bTtHgAeAKivr1+1YcOGaTZrpO7ubiorKwPdZzZKznXxjl/cy4Fl93Lw4t8LdN9htSnXotgutalwRLFdUWwTRK9dN9988w53X51xobuP+wBuBJ5Oef8Z4DNjrPsc8LZx9vWPwPvG+/NWrVrlQdu8eXPg+8zKS0+7f67a/cCWwHcdWptyLIrtUpsKRxTbFcU2uUevXcB2HyMXszn0vQ24zMyWmVkZcA8wavS2mb0ZqAW2pnxWa2blydfzgbcD+9K3jax4M1gxLF4ZdiUiIlKgJhz17e79ZvYg8DRQDKx3971m9hiJ/wEMhfY9wIbk/wyGXAF83cwGSZwP/6KnjBaPvHgzXHQNlM0OuxIRESlQWd3Kyd03AZvSPnsk7f2jGbb7JXDNNOorXAP9iTm+V3wg7EpERKSAaWayXGnfC+fOaEYyERGZFgV1rgzdiENBLSIi06CgzpV4M1QthJolYVciIiIFTEGdK/HmRG9aE52IiMg0KKhzofMwnDyo+b1FRGTaFNS50Dp0flpBLSIi06OgzoV4CxSXw0XXhl2JiIgUOAV1LsRbYNEKKCkLuxIRESlwCuqgneuBw7t0WZaIiARCQR20w7thoE/np0VEJBAK6qDFmxPP6lGLiEgAFNRBizdD7TKorAu7EhERiQAFdZDcoXWbetMiIhIYBXWQTr4G3UcV1CIiEhgFdZDimuhERESCpaAOUrwZyiqh7sqwKxERkYhQUAcp3gwNq6GoOOxKREQkIhTUQentgqN7oUHnp0VEJDgK6qC07QQf1PlpEREJlII6KEMDyRpWh1uHiIhEioI6KPFmWHAFVMwJuxIREYkQBXUQBgcT96DW9dMiIhIwBXUQXn8Zek7p/LSIiAROQR2E1qGJTtSjFhGRYCmogxBvhopamHdp2JWIiEjEKKiDEG9JHPY2C7sSERGJGAX1dJ05njhHrcPeIiKSAwrq6WrdlnjWQDIREckBBfV0xZvBimHRyrArERGRCFJQT1e8BS66BspmhV2JiIhEkIJ6Ogb6oW2HDnuLiEjOKKin4+iv4NwZDSQTEZGcUVBPx9CNONSjFhGRHFFQT0e8GaoWQU1D2JWIiEhEKainI568EYcmOhERkRxRUE9V52E4dVDnp0VEJKcU1FPVqvPTIiKSewrqqYq3QHE5XHRt2JWIiEiEKainKt4Mi1dCSVnYlYiISIRlFdRmtsbMXjKz/Wb2UIblf2Vmu5KPl83sZMqytWb2SvKxNsjiQ3OuBw7t0vlpERHJuZKJVjCzYuAJ4FagFdhmZhvdfd/QOu7+iZT1Pw6sSL6eC3wOWA04sCO57YlAWzHTDu+CwXM6Py0iIjk3YVADNwD73f0AgJltAO4E9o2x/vtJhDPAu4Bn3P14cttngDXAt6ZTdNbc4ZVnmNvxPLzcF9x+X34q8dygHrWIiORWNkG9GIinvG8FMnYlzexiYBnws3G2XZxhuweABwDq6+tpamrKoqws+CCN//l7XAuwJ5hdDjk9awnbtu8NdqeT0N3dHdzfUx6JYrvUpsIRxXZFsU0Q3XZlkk1QT8Y9wPfcfWAyG7n7OmAdwOrVq72xsTGYatzhsp+xY+cOVq1cFcw+k2bXXkzj7PmB7nMympqaCOzvKY9EsV1qU+GIYrui2CaIbrsyySao24AlKe8bkp9lcg/wsbRtG9O2bcq+vGkyg4ZVdO3vgoZgg1pERGQmZDPqextwmZktM7MyEmG8MX0lM3szUAtsTfn4aeA2M6s1s1rgtuRnIiIikoUJe9Tu3m9mD5II2GJgvbvvNbPHgO3uPhTa9wAb3N1Ttj1uZp8nEfYAjw0NLBMREZGJZXWO2t03AZvSPnsk7f2jY2y7Hlg/xfpEREQuaJqZTEREJI8pqEVERPKYglpERCSPKahFRETymIJaREQkjymoRURE8piCWkREJI8pqEVERPKYglpERCSPKahFRETymIJaREQkjymoRURE8lhWN+UoZH/+r3s5ebSPw7MOUldVzoLkY35lOaXF+n+KiIjkt0gHdc+5AX7wXBsnz5zjB/v3jFo+d3YZCyrLqasuZ0Hl+RAfeiSCPUZ1rAQzC6EFIiJyoYt0UMdKi9n1yG0887PNXLXyrbR39XIs+Wjv6hl+fay7lwPHTnOsu5e+/sFR+ykrKRoO8roRQR4bEerzK8spK1EvXUREghPpoB5SWmQsmlPBojkV467n7nT29HOsq2dEqKcG+msdZ9j+2gmOn+7LuI85s0pH9dLTA31BVTk1FaXqpYuIyIQuiKDOlplRU1FKTUUpl9ZVjbvuuYFBOrr7RvTM03vsOw6eoL2zl95MvfTiIuZXlrGgOjZGb/38ufRYaXGumiwiInlOQT1FpcVFXFQT46Ka2LjruTvdvf1pIT4y0FtPnGFX/AQdp/twH72P6lgJdWmB3nmsj+PVrSN663MqSikqUi9dRCRKFNQ5ZmZUxUqpipXyxgWV467bPzBIx+m+UefQU4N9V/wk7V099Jwb5Dsv7R6xfWmxMX9oUNyoQXKxET119dJFRAqDgjqPlBQXUV8do746BtSMuZ678+P/aOLy5dcPnztv70w8DwX7oVM97G49Rcfp3oy99KpYyYiR7aPOqydf184qUy9dRCRECuoCZGZUlBiXLKjkkix66cdP940cHNc9cuT7ntaTtHf1cqZvYNT2JUXne+mZzqGnDpZTL11EJHgK6ogrKS6irjpGXfX459IBTvf2px1q7xnRWz/S2cPzbafo6O5lcJxeeqJ3PnqQnHrpIiKTp6CWYbPLS5hdXsLS+bPHXW9g0Ok4nXlw3NBjT+tJjnX1cnqSvfSjR/qpeu2EzqWLiCQpqGXSiouMuqoYdVXZ99KHD7d3TtxL/9tdvxzePlMvXefSReRCoqCWnJpsL/2pzb/g4suvCaSXntpbX1AVUy9dRAqSglrywlAv/eLqYhovrxt33dReenvn6HPph09NfC69LkOA16UNjqudpdnjRCR8CmopOFM5l57eQx8a8f5860naO3s5e250Lz31uvTUYE/vtWv2OBHJJQW1RFbqufSrJli3e2jEe9o59KHn1hNn2RU/OebscTUVpRkPu9dVxTjUMcDio13UVcWortCd2ERkchTUIkBleQmV5SUsm6CXfm7ouvTOXo519yQPvZ/vsbd39bAzwxzvX9q2Bch8J7a69F56te6XLiLnKahFJqF0ErPHdfX2097ZyzP/1cziS68Y7q0f68zuTmxzZ5elDYgrTx4hGBn0leXqpYtEmYJaJAfMjOpYKdWxUlrnFdO4fNGY6/b1D9JxundE73zoHPpQT/3AsdMc6+qlb2D0ndgqSouHg3vocrXhCWeG35czb3Y5xbqETaTgKKhFQlZWUsTCmgoW1kx8v/RTZ8+NOMyeOK9+PtBfOtLFz7tep7Onf9T2RQbzKpOBnuGweyLkY9RVa3CcSD5RUIsUCDNjzqwy5swq4031498vvefcQEqP/HzvfHiQXFcPew918voE08EO3bQlPdzbugY5cbqPObqETSTnFNQiERQrLWbJ3FksmTtr3PUGBj1505aeUZextXclBsuNdQnbn/3iGcqKi9LOoSfPo6cccq+rijG/sowSDY4TmRIFtcgFrLjIhkN2PO5+/hK2rl6amp9jfsMlw4Pj2rt6ea3jNNt/c5wTZ86N2t4M5s0uY37y/Hl6Dz0R6In3s8r0a0kklf5FiMiEzIyqWClVsVIuWVBJz8ESGt95ScZ1e/sHeL27b/i69Pa0O7K1d/XyytEujnX10p/huHtleUnKpWojR7mnhnpNhQ67y4VBQS0igSovKWbxnAoWzxl/cNzgoHPiTF/K4Ljzh9uHeurj3Ss99bB7+mC41FCfN1uH3aWwKahFJBRFRca8ynLmVZZzxcLx1+3u7U9chz4c6MlR7ynXpG+b4LB76qC4oXPnqa8nOvwvEpasgtrM1gB/AxQDf+/uX8ywzu8DjwIO7Hb3P0h+PgDsSa520N1/N4C6ReQCUlleQuWCSi5ZUDnuen39gyNuqdqeMvJ96DK2F4908np3HwMZDrtXlMCiHU0jDrEPD45LeV2lSWZkBk0Y1GZWDDwB3Aq0AtvMbKO770tZ5zLgM8Db3f2EmaXe/uisu18XcN0iIqOUlRRlddh9aLT78Oj25OH3nS+8Sll1Fe1dvRmngh0SKy3K2COvqxo5WE73SZcgZNOjvgHY7+4HAMxsA3AnsJG7j2AAAAoQSURBVC9lnfuBJ9z9BIC7twddqIhIUFJHu19J9fDnTdZKY+Oq4ffuTmdP//AguPMTzPQMX5f+0pEu/uuV1+nKMMlMSfLPGb4ePbWXXqXL1yQ72QT1YiCe8r4VeEvaOm8CMLNfkDg8/qi7/zi5LGZm24F+4Ivu/sPplSwiMjPMjJqKUmoqSrm0bvxJZs72DYzooaceem/v6qX1xBmeO3iCjgxzu0/mPLpmjbvwmGe6Z1/qCmbvA9a4+0eT7z8AvMXdH0xZ59+Ac8DvAw3AFuAadz9pZovdvc3MLgF+Btzi7q+m/RkPAA8A1NfXr9qwYUNgDQTo7u6msnL8c1uFJoptgmi2S20qHDPRrv5Bp7PPOdnrnOp1TvakvE597vOMs8bNLoWacmNOuSWfi1Jen/+8osRmrE1hiFq7br755h3uvjrTsmx61G3AkpT3DcnPUrUCze5+Dvi1mb0MXAZsc/c2AHc/YGZNwApgRFC7+zpgHcDq1au9sbExi7Ky19TURND7DFsU2wTRbJfaVDjyqV2ps8a1dw1NLHP+kHt7Vw/xrl52HM18s5bZZcXUVccoGyjmsiXV1FXFqK9O76nHqI4V5sC4fPquci2boN4GXGZmy0gE9D3AH6St80Pg/cD/M7P5JA6FHzCzWuCMu/cmP3878KXAqhcRiajU8+hXjbNe6s1a0s+ft3f18Er8LHsPdfKzzvaM16OXlxSNCO/66pED4+qTy2o1r3toJgxqd+83sweBp0mcf17v7nvN7DFgu7tvTC67zcz2AQPAp9y9w8zeBnzdzAaBIhLnqPeN8UeJiMgkTXSzltSe59D16O1dvRxNvS69s4ejnb28fLSLn+/PPDCutNiGb6Gaet68PuX8eX11jHmzNdI9aFldR+3um4BNaZ89kvLagU8mH6nr/BK4ZvpliojIdGV7PfrZvoFRPfPUcB9vgpniImN+ZRn1w9O/ng/zoR67ZoybHM1MJiIiI1SUFXPxvNlcPG/2uOv19idGuh/tPD+P+9HO85PLtJ44y3MHT2Yc6Z5+f/T66tiI69CHAn1+ZTmlF3igK6hFRGRKykuKaaidRUPt+LdT7esf5PXu3pGXraVcvna0s4c9bZ10nO4l/UKk1EvX6qvPh/rJI+fo3XtkxHn1qAa6glpERHKqrKSIRXMqWDTBjHH9A4N0nO6jvTPZM+86/zwU7PsOdfJ6dy+DDv+0b8eI7ROBfr53PtQrH5r6tb46xoLKcspKCivQFdQiIpIXSoqLqK+OUV8d4xpqxlxvYND5159s5tJrVmUI9MQ59ZeOdHGsuzfjnO5zZ5edH9VeAIGuoBYRkYJSXGTMiRVx9eIarl48fqB3nE4ZENeZOJ/e3tUz/PzyFAN95cVzqKuK5bKZwxTUIiISScVFlhxtHoMJeujHT/cle+XZBfo3PriaW69UUIuIiORc6uQy2Qb6krnjD6ALkoJaREQkCyMDfebkx5lyERERyUhBLSIikscU1CIiInlMQS0iIpLHFNQiIiJ5TEEtIiKSxxTUIiIieUxBLSIikscU1CIiInlMQS0iIpLHzNPv0h0yMzsGvBbwbucDrwe8z7BFsU0QzXapTYUjiu2KYpsgeu262N0XZFqQd0GdC2a23d1Xh11HkKLYJohmu9SmwhHFdkWxTRDddmWiQ98iIiJ5TEEtIiKSxy6UoF4XdgE5EMU2QTTbpTYVjii2K4ptgui2a5QL4hy1iIhIobpQetQiIiIFKTJBbWZrzOwlM9tvZg9lWF5uZt9OLm82s6UzX+XkmNkSM9tsZvvMbK+Z/VGGdRrN7JSZ7Uo+Hgmj1skws9+Y2Z5kvdszLDcz+0ryu3rezFaGUedkmNnlKd/BLjPrNLM/Tlsn778rM1tvZu1m9quUz+aa2TNm9kryuXaMbdcm13nFzNbOXNUTG6Ndj5vZi8mfsR+Y2Zwxth335zUsY7TpUTNrS/kZu2OMbcf9fRmWMdr07ZT2/MbMdo2xbV5+T4Fw94J/AMXAq8AlQBmwG7gybZ3/AXwt+foe4Nth151FuxYCK5Ovq4CXM7SrEfi3sGudZLt+A8wfZ/kdwFOAAW8FmsOueZLtKwaOkLgusqC+K+AmYCXwq5TPvgQ8lHz9EPCXGbabCxxIPtcmX9eG3Z4J2nUbUJJ8/ZeZ2pVcNu7Pa5616VHgTyfYbsLfl/nUprTlXwYeKaTvKYhHVHrUNwD73f2Au/cBG4A709a5E3gy+fp7wC1mZjNY46S5+2F335l83QW8ACwOt6oZcSfwTU94FphjZgvDLmoSbgFedfegJ+7JOXffAhxP+zj1386TwF0ZNn0X8Iy7H3f3E8AzwJqcFTpJmdrl7j9x9/7k22eBhhkvbBrG+K6ykc3vy1CM16bk7+vfB741o0XlgagE9WIgnvK+ldGBNrxO8h/nKWDejFQXgOSh+hVAc4bFN5rZbjN7ysyumtHCpsaBn5jZDjN7IMPybL7PfHYPY/8yKbTvCqDe3Q8nXx8B6jOsU+jf2X0kjuJkMtHPa755MHk4f/0YpykK9bt6J3DU3V8ZY3mhfU9Zi0pQR5qZVQLfB/7Y3TvTFu8kcYh1OfB/gR/OdH1T8A53XwncDnzMzG4Ku6CgmFkZ8LvAdzMsLsTvagRPHGOM1KUiZvZnQD/wz2OsUkg/r18F3ghcBxwmcag4Kt7P+L3pQvqeJiUqQd0GLEl535D8LOM6ZlYC1AAdM1LdNJhZKYmQ/md3/5f05e7e6e7dydebgFIzmz/DZU6Ku7cln9uBH5A4FJcqm+8zX90O7HT3o+kLCvG7Sjo6dOoh+dyeYZ2C/M7M7EPA7wD/PfmfkFGy+HnNG+5+1N0H3H0Q+AaZay247yr5O/s9wLfHWqeQvqfJikpQbwMuM7NlyR7NPcDGtHU2AkMjUd8H/Gysf5j5InlO5h+AF9z9/4yxzkVD59rN7AYS32ne/gfEzGabWdXQaxIDen6VttpG4IPJ0d9vBU6lHHrNd2P+r7/QvqsUqf921gI/yrDO08BtZlabPNx6W/KzvGVma4BPA7/r7mfGWCebn9e8kTaW491krjWb35f55reAF929NdPCQvueJi3s0WxBPUiMFH6ZxGjGP0t+9hiJf4QAMRKHI/cDLcAlYdecRZveQeIw4/PAruTjDuAPgT9MrvMgsJfEyM1ngbeFXfcEbbokWevuZN1D31Vqmwx4Ivld7gFWh113lm2bTSJ4a1I+K6jvisR/Mg4D50icu/wIibEc/wG8AvwUmJtcdzXw9ynb3pf897Uf+HDYbcmiXftJnKsd+rc1dFXIImDTeD+v+fAYo03/lPw38zyJ8F2Y3qbk+1G/L/PhkalNyc//cejfUcq6BfE9BfHQzGQiIiJ5LCqHvkVERCJJQS0iIpLHFNQiIiJ5TEEtIiKSxxTUIiIieUxBLSIikscU1CIiInlMQS0iIpLH/j8OBrqgF92ihAAAAABJRU5ErkJggg==\n","text/plain":["\u003cFigure size 576x360 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"MmOJhn6T0j4J"},"source":["### NLP 연습 02\n","\n","- imdb 데이터 셋 : 스탠포드 대학의 앤드류 마스가 수집한 데이터 셋\n","\n","- 데이터 셋 주소 : http://ai.stanford.edu/~amaas/data/sentiment/ 또는\n","https://stanford.io/2w2NUzz\n","\n","- 인터넷 영화 데이터베이스 (IMDB) : 영화와 관련된 정보와 출연진 정보, 개봉 정보, 영화 후기, 평점에 이르기까지 매우 폭넓은 데이터가 저장된 데이터 셋\n","\n","- 인터넷 영화 데이터베이스로부터 가져온 양극단의 영화 리뷰 5만개 포함\n","\n","- 훈련데이터 2만 5,000개, 테스트데이터 2만 5,000개로 나뉘어 있고 50%는 긍정, 50%는 부정 리뷰로 구성\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"-G4qYCR-Lg3G"},"source":["IMDB 영화 리뷰 감성 예측\n","- 영화 리뷰에서 가장 빈도가 높은 10,000개의 단어를 추출\n","- 리뷰에서 20개 단어 이후는 버림\n","\n","모델 구조\n","-  이 네트워크는 10,000개의 단어에 대해 8 차원의 임베딩을 학습하여 정수 시퀀스 입력(2D 정수 텐서)를 임베딩 시퀀스(3D 실수형 텐서)로 변환\n","- 임베딩 결과 텐서를 2D로 펼쳐서 분류를 위한 Dense 층을 훈련"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7121,"status":"ok","timestamp":1620800689097,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"M2RN2I-Y1TtU","outputId":"8916e5b7-7bdc-40cf-dfaf-6cf51151cb95"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n"]},{"name":"stderr","output_type":"stream","text":["\u003cstring\u003e:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n","/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:160: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"]},{"data":{"text/plain":["((25000,), (25000,))"]},"execution_count":31,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["from keras.datasets import imdb\n","from keras import preprocessing\n","\n","# 특성으로 사용할 단어의 수\n","max_features = 10000\n","# 사용할 텍스트의 길이(가장 빈번한 max_features 개의 단어만 사용)\n","maxlen = 20\n","\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n","x_train.shape, x_test.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":504,"status":"ok","timestamp":1620800726517,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"BAYfr_spQCNz","outputId":"dac1812e-e446-4afe-ffc6-dc3533edab71"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32]\n"]}],"source":["print( x_train[0] )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ChQMhxMKQPIk"},"outputs":[],"source":["x_train = preprocessing.sequence.pad_sequences(x_train, maxlen)\n","x_test = preprocessing.sequence.pad_sequences(x_test, maxlen)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":366,"status":"ok","timestamp":1620801171202,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"Dhza03tA1WyT","outputId":"2cc81a66-0004-4f54-f7f3-472847987564"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_3 (Embedding)      (None, 20, 8)             80000     \n","_________________________________________________________________\n","flatten_2 (Flatten)          (None, 160)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 1)                 161       \n","=================================================================\n","Total params: 80,161\n","Trainable params: 80,161\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["from keras.models import Sequential\n","from keras.layers import Flatten, Dense, Embedding\n","\n","# 모델 생성 및 훈련\n","model = Sequential([\n","            Embedding(10000, 8, input_length=maxlen),\n","            Flatten(),\n","            Dense(1, activation='sigmoid')\n","])\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17145,"status":"ok","timestamp":1620801193194,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"cm97675pRbxn","outputId":"1fdf0c8c-c756-4426-93f9-f0312849cdaa"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","625/625 [==============================] - 2s 3ms/step - loss: 0.6798 - acc: 0.5766 - val_loss: 0.5618 - val_acc: 0.7248\n","Epoch 2/10\n","625/625 [==============================] - 2s 3ms/step - loss: 0.4906 - acc: 0.7876 - val_loss: 0.4965 - val_acc: 0.7480\n","Epoch 3/10\n","625/625 [==============================] - 2s 3ms/step - loss: 0.3853 - acc: 0.8410 - val_loss: 0.4923 - val_acc: 0.7542\n","Epoch 4/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.3231 - acc: 0.8750 - val_loss: 0.5035 - val_acc: 0.7526\n","Epoch 5/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.2702 - acc: 0.9068 - val_loss: 0.5231 - val_acc: 0.7490\n","Epoch 6/10\n","625/625 [==============================] - 2s 3ms/step - loss: 0.2143 - acc: 0.9329 - val_loss: 0.5462 - val_acc: 0.7418\n","Epoch 7/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.1804 - acc: 0.9496 - val_loss: 0.5766 - val_acc: 0.7408\n","Epoch 8/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.1451 - acc: 0.9660 - val_loss: 0.6085 - val_acc: 0.7386\n","Epoch 9/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.1160 - acc: 0.9739 - val_loss: 0.6470 - val_acc: 0.7334\n","Epoch 10/10\n","625/625 [==============================] - 2s 3ms/step - loss: 0.0912 - acc: 0.9836 - val_loss: 0.6855 - val_acc: 0.7352\n"]}],"source":["model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(x_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":1074,"status":"ok","timestamp":1620801304792,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"ix7y5_FQ10Ei","outputId":"c6506e4a-cb74-4cfb-ecde-fb64e53c7066"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 576x360 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mqQLedYL3YfN"},"source":["### NLP 연습 03 - 사전 훈련된 단어 임베딩 사용하기\n","\n","- 훈련 데이터가 부족한 경우에 미리 계산된 임베딩 공간에서 임베딩 벡터를 로드할 수 있음 (이미지 분류 문제의 사전 훈련된 컨브넷을 사용하는 이유와 동일)\n","\n","- 일반적인 특성의 경우에만 적용\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"3gIyQjVdL9uD"},"source":["임베딩 층을 위해 미리 계산된 단어 임베딩 데이터베이스\n","\n","- Word2vec 알고리즘 : 2013년 구글의 토마스 미코로프가 개발, 단어를 벡터로 바꿔주는 기능을 하며 구체적인 의미가 있는 속성을 구분 (https://code.google.com/archive/p/word2vec)\n"," - 단어를 벡터화 할 때 단어의 문맥적 의미를 보존\n"," - 벡터로 바뀐 단어들은 거리 계산을 통해 유사도를 판단\n"," - 성별처럼 구체적인 의미가 있는 속성을 캐치 \n","\n","\n","- Glove 알고리즘 : 2014년 영문 위키피디아를 사용해 사전에 계산된 임베딩\n"," - 파일의 이름은 glove.6B.zip이고 압축 파일 크기는 823MB\n"," - 400,000만개의 단어(또는 단어가 아닌 토큰)에 대한 100차원의 임베딩 벡터를 포함\n","(https://nlp.stanford.edu/projects/glove/)\n","\n"," - 단어의 동시 출현 통계를 기록한 행렬을 분해하는 기법을 사용\n","\n","- 기타 : https://github.com/Hironsan/awesome-embedding-models#pre-trained-word-vectors"]},{"cell_type":"markdown","metadata":{"id":"hqO1Mh5w5XNv"},"source":["원본 IMDB 텍스트 다운로드\n","\n","-  http://mng.bz/0tIo 에서 IMDB 원본 데이터셋을 다운로드\n","\n","- 훈련용 리뷰 하나를 문자열 하나로 만들어 훈련 데이터를 문자열의 리스트로 구성"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JVyG7sY-Cqms"},"outputs":[],"source":["train_path = drive_path + 'aclImdb.zip'\n","!cp '$train_path' .\n","!unzip aclImdb.zip\n","!rm aclImdb.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DPkdMRbT6EDG"},"outputs":[],"source":["import os\n","\n","imdb_dir = './aclImdb'\n","train_dir = os.path.join(imdb_dir, 'train')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","    dir_name = os.path.join(train_dir, label_type)\n","    for fname in os.listdir(dir_name):\n","        if fname[-4:] == '.txt':\n","            f = open(os.path.join(dir_name, fname), encoding='utf8')\n","            texts.append(f.read())\n","            f.close()\n","            if label_type == 'neg':\n","                labels.append(0)\n","            else:\n","                labels.append(1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11157,"status":"ok","timestamp":1620865487504,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"VjqKtIofCiAs","outputId":"e4cc4390-8a54-4d12-f1dd-fc62017b07ca"},"outputs":[{"data":{"text/plain":["((25000, 100), (25000,))"]},"execution_count":5,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["# 데이터 토큰화\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","\n","maxlen = 100  # 100개 단어 이후는 버림\n","training_samples = 200  # 훈련 샘플은 200개\n","validation_samples = 10000  # 검증 샘플은 10,000개\n","max_words = 10000  # 데이터셋에서 가장 빈도 높은 10,000개의 단어만 사용\n","\n","\n","# 데이터를 훈련 세트와 검증 세트로 분할\n","token = Tokenizer(max_words)\n","token.fit_on_texts(texts)\n","sequences = token.texts_to_sequences(texts)\n","word_index = token.word_index\n","\n","data = pad_sequences(sequences, maxlen)\n","labels = np.asarray(labels)\n","\n","data.shape, labels.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"53lfhiNWcqy7"},"outputs":[],"source":["# 데이터 섞음\n","indices = np.arange(data.shape[0])\n","np.random.shuffle(indices)\n","data = data[indices]\n","labels = labels[indices]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qBNh9AIvdP0v"},"outputs":[],"source":["# 훈련 검증 데이터셋 분리\n","X_train = data[:training_samples]\n","y_train = labels[:training_samples]\n","X_val = data[training_samples : training_samples + validation_samples]\n","y_val = labels[training_samples : training_samples + validation_samples]"]},{"cell_type":"markdown","metadata":{"id":"BRbk_yj0-I6W"},"source":["GloVe 단어 임베딩 내려받기\n","\n","- https://nlp.stanford.edu/projects/glove\n","- 파일의 이름은 glove.6B.zip이고 압축 파일 크기는 823MB\n","-  400,000만개의 단어(또는 단어가 아닌 토큰)에 대한 100차원의 임베딩 벡터를 포함"]},{"cell_type":"markdown","metadata":{"id":"UD6nJKLuAoaq"},"source":["임베딩 전처리\n","\n","- 압축 해제한 파일(.txt 파일)을 파싱하여 단어(즉 문자열)와 이에 상응하는 벡터 표현(즉 숫자 벡터)를 매핑하는 인덱스를 제작"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":51667,"status":"ok","timestamp":1620865557897,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"rOIzkuzyFAPW","outputId":"72c8a73f-0f37-4398-c443-9bf4de8e4d02"},"outputs":[{"name":"stdout","output_type":"stream","text":["Archive:  glove.6B.zip\n","  inflating: glove.6B.50d.txt        \n","  inflating: glove.6B.100d.txt       \n","  inflating: glove.6B.200d.txt       \n","  inflating: glove.6B.300d.txt       \n"]}],"source":["train_path = drive_path + 'glove.6B.zip'\n","!cp '$train_path' .\n","!unzip glove.6B.zip\n","!rm glove.6B.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12339,"status":"ok","timestamp":1620865579126,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"8odw5N3fAwSS","outputId":"99f9d7ea-42d7-40f6-e97d-5a0f4d137eb0"},"outputs":[{"name":"stdout","output_type":"stream","text":["400000개의 단어 벡터를 찾았습니다.\n"]}],"source":["glove_dir = './'\n","\n","embeddings_index = {}\n","f = open(os.path.join(glove_dir, 'glove.6B.100d.txt'), encoding=\"utf8\")\n","for line in f:\n","    values = line.split()\n","    word = values[0]\n","    coefs = np.asarray(values[1:], dtype='float32')\n","    embeddings_index[word] = coefs\n","f.close()\n","\n","print('%s개의 단어 벡터를 찾았습니다.' % len(embeddings_index))"]},{"cell_type":"markdown","metadata":{"id":"3BD55Op_A4jD"},"source":["* Embedding 층에 주입할 수 있도록 임베딩 행렬 제작"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fEh3qSZ0A6rE"},"outputs":[],"source":["embedding_dim = 100\n","\n","embedding_matrix = np.zeros( (max_words, embedding_dim) )\n","for word, i in word_index.items():\n","  embedding_vector = embeddings_index.get(word)\n","  if i \u003c max_words:\n","    if embedding_vector is not None:\n","      embedding_matrix[i] = embedding_vector\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":842,"status":"ok","timestamp":1620865597878,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"dQP1wEGHBIXo","outputId":"7a128770-8503-46e0-8d5e-187c7cd5f388"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 100)          1000000   \n","_________________________________________________________________\n","flatten (Flatten)            (None, 10000)             0         \n","_________________________________________________________________\n","dense (Dense)                (None, 32)                320032    \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 33        \n","=================================================================\n","Total params: 1,320,065\n","Trainable params: 1,320,065\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["# 모델 정의\n","model = Sequential([\n","          Embedding(max_words, embedding_dim, input_length=maxlen),\n","          Flatten(),\n","          Dense(32, activation='relu'),\n","          Dense(1, activation='sigmoid')\n","])\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jZt0JWECBMk1"},"outputs":[],"source":["# 모델에 GloVe 임베딩 로드\n","# 추가적으로 Embedding 층을 동결(trainable 속성을 False로 설정)\n","model.layers[0].set_weights([embedding_matrix])\n","model.layers[0].trainable = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9964,"status":"ok","timestamp":1620865802332,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"p5dOOErUBcrQ","outputId":"108ef78f-6c32-448c-8789-5b511be61208"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","7/7 [==============================] - 2s 209ms/step - loss: 0.9401 - acc: 0.4983 - val_loss: 0.7675 - val_acc: 0.5019\n","Epoch 2/10\n","7/7 [==============================] - 1s 136ms/step - loss: 0.6974 - acc: 0.5408 - val_loss: 0.6946 - val_acc: 0.5086\n","Epoch 3/10\n","7/7 [==============================] - 1s 121ms/step - loss: 0.6499 - acc: 0.6471 - val_loss: 0.6946 - val_acc: 0.5127\n","Epoch 4/10\n","7/7 [==============================] - 1s 128ms/step - loss: 0.5965 - acc: 0.6313 - val_loss: 0.6985 - val_acc: 0.5387\n","Epoch 5/10\n","7/7 [==============================] - 1s 128ms/step - loss: 0.4685 - acc: 0.8557 - val_loss: 0.6901 - val_acc: 0.5567\n","Epoch 6/10\n","7/7 [==============================] - 1s 124ms/step - loss: 0.3554 - acc: 0.9608 - val_loss: 0.6989 - val_acc: 0.5581\n","Epoch 7/10\n","7/7 [==============================] - 1s 127ms/step - loss: 0.2576 - acc: 0.9695 - val_loss: 0.7410 - val_acc: 0.5466\n","Epoch 8/10\n","7/7 [==============================] - 1s 129ms/step - loss: 0.1743 - acc: 0.9864 - val_loss: 0.7200 - val_acc: 0.5600\n","Epoch 9/10\n","7/7 [==============================] - 1s 140ms/step - loss: 0.1264 - acc: 1.0000 - val_loss: 0.7505 - val_acc: 0.5511\n","Epoch 10/10\n","7/7 [==============================] - 1s 133ms/step - loss: 0.0862 - acc: 1.0000 - val_loss: 0.7191 - val_acc: 0.5721\n"]}],"source":["# 모델 훈련과 평가\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(X_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_data=(X_val, y_val))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o6WDqap6IWY_"},"outputs":[],"source":["model.save_weights(drive_path + 'pre_trained_glove_model.h5')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":1014,"status":"ok","timestamp":1620865867709,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"F3BCH-tCCSyX","outputId":"d768e5f4-844f-4bdd-ccad-ce29e7af7a78"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 576x360 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"vtEr2rIpHBoT"},"source":["*  훈련 샘플 수가 작기 때문에 과대적합이 빠르게 시작\n","* 같은 이유로 검증 정확도와 훈련 정확도 사이에 차이가 큽"]},{"cell_type":"markdown","metadata":{"id":"LtHDljH0BkJI"},"source":["사전 훈련된 단어 임베딩을 사용하지 않거나 임베딩 층을 동결하지 않고 같은 모델을 훈련\n","\n","- 이런 경우 해당 작업에 특화된 입력 토큰의 임베딩을 학습\n","-  데이터가 풍부하게 있다면 사전 훈련된 단어 임베딩보다 일반적으로 훨씬 성능이 높음"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9818,"status":"ok","timestamp":1620866167757,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"6-2AiBECBlCe","outputId":"9a27d8af-bb6f-4a49-ed80-1de9c6756c9f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 100, 100)          1000000   \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 10000)             0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 32)                320032    \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 33        \n","=================================================================\n","Total params: 1,320,065\n","Trainable params: 1,320,065\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/10\n","7/7 [==============================] - 2s 169ms/step - loss: 0.6907 - acc: 0.5215 - val_loss: 0.6917 - val_acc: 0.5175\n","Epoch 2/10\n","7/7 [==============================] - 1s 136ms/step - loss: 0.5639 - acc: 0.9725 - val_loss: 0.6932 - val_acc: 0.5187\n","Epoch 3/10\n","7/7 [==============================] - 1s 152ms/step - loss: 0.4315 - acc: 0.9854 - val_loss: 0.6990 - val_acc: 0.5203\n","Epoch 4/10\n","7/7 [==============================] - 1s 131ms/step - loss: 0.2708 - acc: 0.9973 - val_loss: 0.7013 - val_acc: 0.5224\n","Epoch 5/10\n","7/7 [==============================] - 1s 133ms/step - loss: 0.1321 - acc: 1.0000 - val_loss: 0.7029 - val_acc: 0.5257\n","Epoch 6/10\n","7/7 [==============================] - 1s 138ms/step - loss: 0.0493 - acc: 1.0000 - val_loss: 0.7163 - val_acc: 0.5276\n","Epoch 7/10\n","7/7 [==============================] - 1s 137ms/step - loss: 0.0196 - acc: 1.0000 - val_loss: 0.7266 - val_acc: 0.5288\n","Epoch 8/10\n","7/7 [==============================] - 1s 136ms/step - loss: 0.0095 - acc: 1.0000 - val_loss: 0.7381 - val_acc: 0.5296\n","Epoch 9/10\n","7/7 [==============================] - 1s 133ms/step - loss: 0.0054 - acc: 1.0000 - val_loss: 0.7482 - val_acc: 0.5311\n","Epoch 10/10\n","7/7 [==============================] - 1s 135ms/step - loss: 0.0039 - acc: 1.0000 - val_loss: 0.7509 - val_acc: 0.5313\n"]}],"source":["# 모델 생성 및 훈련\n","# 모델 정의\n","model = Sequential([\n","          Embedding(max_words, embedding_dim, input_length=maxlen),\n","          Flatten(),\n","          Dense(32, activation='relu'),\n","          Dense(1, activation='sigmoid')\n","])\n","model.summary()\n","\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])\n","history = model.fit(X_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_data=(X_val, y_val))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":630,"status":"ok","timestamp":1620866185115,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"KIWJnx94CTz5","outputId":"1570a749-5179-44c6-c8af-3ec9d165f172"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 576x360 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Ul8wnAisHgjm"},"source":["* 검증 정확도는 50% 초반에 멈춤\n","* 여기에서는 사전 훈련된 단어 임베딩을 사용하는 것이 임베딩을 함께 훈련하는 것보다 나음\n","* 훈련 샘플의 수를 늘리면 금새 상황이 바뀜"]},{"cell_type":"markdown","metadata":{"id":"EdzPDWqFBqHh"},"source":["훈련 샘플의 수를 2000개로 늘려서 확인"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YKeS0DOdBsaR"},"outputs":[],"source":["# 훈련 검증 데이터셋 분리\n","training_samples = 2000\n","X_train = data[:training_samples]\n","y_train = labels[:training_samples]\n","X_val = data[training_samples : training_samples + validation_samples]\n","y_val = labels[training_samples : training_samples + validation_samples]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19638,"status":"ok","timestamp":1620866373916,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"8SegNzsxBs-u","outputId":"80d8ac03-adc0-4ca0-c34c-6761b0f671ed"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","63/63 [==============================] - 2s 31ms/step - loss: 0.6199 - acc: 0.6335 - val_loss: 0.6035 - val_acc: 0.6723\n","Epoch 2/10\n","63/63 [==============================] - 2s 29ms/step - loss: 0.0611 - acc: 0.9985 - val_loss: 0.5708 - val_acc: 0.7015\n","Epoch 3/10\n","63/63 [==============================] - 2s 31ms/step - loss: 0.0175 - acc: 1.0000 - val_loss: 0.5677 - val_acc: 0.7088\n","Epoch 4/10\n","63/63 [==============================] - 2s 31ms/step - loss: 0.0088 - acc: 1.0000 - val_loss: 0.5698 - val_acc: 0.7113\n","Epoch 5/10\n","63/63 [==============================] - 2s 30ms/step - loss: 0.0054 - acc: 1.0000 - val_loss: 0.5725 - val_acc: 0.7141\n","Epoch 6/10\n","63/63 [==============================] - 2s 31ms/step - loss: 0.0037 - acc: 1.0000 - val_loss: 0.5757 - val_acc: 0.7157\n","Epoch 7/10\n","63/63 [==============================] - 2s 29ms/step - loss: 0.0027 - acc: 1.0000 - val_loss: 0.5785 - val_acc: 0.7182\n","Epoch 8/10\n","63/63 [==============================] - 2s 29ms/step - loss: 0.0020 - acc: 1.0000 - val_loss: 0.5827 - val_acc: 0.7175\n","Epoch 9/10\n","63/63 [==============================] - 2s 32ms/step - loss: 0.0016 - acc: 1.0000 - val_loss: 0.5854 - val_acc: 0.7194\n","Epoch 10/10\n","63/63 [==============================] - 2s 31ms/step - loss: 0.0013 - acc: 1.0000 - val_loss: 0.5887 - val_acc: 0.7199\n"]}],"source":["# 모델 훈련\n","history = model.fit(X_train, y_train, \n","                    epochs=10, batch_size=32, \n","                    validation_data=(X_val, y_val))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":545,"status":"ok","timestamp":1620866405970,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"_ARWJnjnCVCu","outputId":"830d6bb9-0671-4d3d-c6f8-0d4819acad5d"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 576x360 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# 학습 곡선 시각화\n","pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","# plt.gca().set_ylim(0, 1)\n","# plt.gca().set_ylim(0, 1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"KClAWi_OH5Bb"},"source":["* 훈련 샘플의 수를 늘리니 단어 임베딩을 같이 훈련하는 모델의 검증 정확도가 70% 정도로 증가"]},{"cell_type":"markdown","metadata":{"id":"4_UWVofdByry"},"source":["테스트 데이터에서 모델을 평가"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0tWGI_FQB2yw"},"outputs":[],"source":["# 테스트 데이터를 토큰화\n","test_dir = os.path.join(imdb_dir, 'test')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","  dir_name = os.path.join(test_dir, label_type)\n","  for fname in sorted(os.listdir(dir_name)):\n","    f = open(os.path.join(dir_name, fname), encoding='utf8')\n","    texts.append(f.read())\n","    if label_type == 'neg':\n","      labels.append(0)\n","    else:\n","      labels.append(1)\n","\n","sequences = token.texts_to_sequences(texts)\n","X_test = pad_sequences(sequences, maxlen=maxlen)\n","y_test = np.asarray(labels)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2495,"status":"ok","timestamp":1620868346250,"user":{"displayName":"oz To","photoUrl":"","userId":"12937505880450462933"},"user_tz":-540},"id":"Q4xZWBZRB-Pl","outputId":"2b901008-f997-453d-8947-6b06e1e92f78"},"outputs":[{"name":"stdout","output_type":"stream","text":["782/782 [==============================] - 2s 2ms/step - loss: 0.7260 - acc: 0.5598\n"]},{"data":{"text/plain":["[0.7259625196456909, 0.5598000288009644]"]},"execution_count":27,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["# 첫 번째 모델을 로드하고 평가\n","model.load_weights(drive_path + 'pre_trained_glove_model.h5')\n","model.evaluate(X_test, y_test)"]},{"cell_type":"markdown","metadata":{"id":"wa9c7N9sCCc_"},"source":["*  적은 수의 훈련 샘플로 작업하는 것은 어려운 일"]}],"metadata":{"colab":{"collapsed_sections":["oC99qjqGXAOk"],"name":"내꺼dl_08_자연어처리.ipynb의 사본","provenance":[{"file_id":"1C9RCOZwiWFX4O7J9BJ6CsfnLdPN7Apo5","timestamp":1621146940303}],"toc_visible":true,"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
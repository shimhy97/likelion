{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"oz_00_tip_ProjectProcess.ipynb의 사본","provenance":[{"file_id":"1N4fjr9QxoUHGktJvFSXJYovrqTXlDIFB","timestamp":1620014725989}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XsuQULjtK_Rn"},"source":["# SW 스타트업과 초·중급자를 위한 프로젝트 프로세스\n","\n","modern-developer\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ILQ2Db4lLQox"},"source":["### 프롤로그\n","\n","- 프로젝트의 계획부터 유지 관리까지 전체 소프트웨어 개발 프로세스를 다룰 것입니다. \n","\n","- 초점은 프로세스가 무엇인지, \n","- 누가 관여하는지 (일부 단계는 개발자가 필요하지 않음), \n","- 초급 또는 중급 개발자로서 기대하고 수행해야하는 작업에 대해 이야기합니다.\n","\n","\n","그럼 본 내용에서 스타트업의 정의를 하고 시작할까요.\n"]},{"cell_type":"markdown","metadata":{"id":"gSkr8Kf2LmOE"},"source":["### 스타트업(Startup)\n","\n","- 스타트업 컴퍼니(startup company) 또는 스타트업(startup)은 설립한지 오래되지 않은 신생 벤처기업을 뜻한다. 미국 실리콘밸리에서 생겨난 용어로서, 혁신적 기술과 아이디어를 보유한 설립된지 얼마 되지 않은 창업 기업이다.\n","\n","- 스타트업은 극심한 불확실성의 상황 하에서 새로운 제품이나 서비스를 만들어내기 위해 디자인된 인간 조직이다.\n","\n","\n","위키백과의 스타트업(Startup) 정의\n","\n","- 린 스타트업은 스타트업(Startup)을 다음과 같이 정의한다.\n","\n","- 스타트업은 극심한 불확실성의 상황 하에서 새로운 제품이나 서비스를 만들어내기 위해 디자인된 인간 조직이다.[1]\n","\n","- 위의 정의에서 강조하는 바와 같이, 린스타트업은 극심한 불확실성 속에서 제품이나 서비스를 효과적으로 개발하기 위한 개념과 도구들을 제안한다.\n","\n","- 스타트업은 확장 가능하고 반복가능한 임시 조직이다.[2]\n","\n","- 이는 스타트업이 회사가 아닌 하나의 조직으로, 고객의 문제를 빠르게 해결하여 고객을 확보하며 자신들의 가설을 증명해 나아가는 단계로 본다.\n","\n","\n","여기에서는 스타트업을 두번째 조직(팀)이라는 대상으로 삼을 텐데요.\n","\n","왜 회사보다 조직(팀)을 대상을 하는지 스타트업 컴퍼니에 대해서도 집고 넘어가죠.\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"_pi-oM8RMSNU"},"source":["### 스타트업 컴퍼니(startup company) \n","\n","- 창업한 스타트업이 성공할 확률 0.2%?\n"," 1. 시장의 수요가 없었다.\n"," 1. 돈을 다 써버렸다. (자금조달 실패)\n"," 1. 적절한 팀 구성에 실패했다.\n"," 1. ……\n","\n","- 적절한 팀 구성\n"," -> 비즈니스는 결국 사람으로 귀결\n"," - 기술에 정통한 CTO\n"," - 비즈니스를 잘 아는 창업자\n"," - 재무에 능숙한 CFO\n"," - **현장 경험**이 있는 중고급 개발자\n","\n","\n","\n","통계를 근거로 스타트업의 성공 확률을 따져보자. 2015년 한국의 전체 벤처기업 대비 IPO(기업공개) 비율은0.2%에 지나지 않는다. 기업 공개를 스타트업의 성공 기준으로 본다면 성공 확률은 불과 0.2%다. 그리고 하버드경영대학원의 쉬카고쉬 교수에 따르면 벤처투자를 받은 2000개의 스타트업 가운데 매출목표를 달성하는 스타트업은 5%, 투자수익을 가져다 주는 스타트업은 20%, 투자수익은 마이너스이지만 근근이 생존하는 기업은 70%다. 그만큼 실패할 가능성이 더욱더 크다.\n","\n","스타트업이 실패하는 이유 -> 미국의 CB insights에서 101개 스타트업을 대상으로 분석한 ‘Top 20 Reasons Startup Fail’(2019.11.6)의 내용 참고\n","https://brunch.co.kr/@oeoechoi/135\n","\n","\n","현장 경험이 있는 개발자에 대해 이야기해 보죠.\n"]},{"cell_type":"markdown","metadata":{"id":"IxT6kE4mPKKi"},"source":["“컴퓨터가 이해하는 코드는 어느 바보나 짤 수 있다. 좋은 프로그래머는 사람이 이해하는 코드를 짠다”- Martin Fowler\n","\n","\n"," - 코드 안짜는 개발자 있나요?\n"," - AI 모델도 코드죠.\n"]},{"cell_type":"markdown","metadata":{"id":"9kn7pLkHPrB-"},"source":["### Senior developer\n","\n","<center> <img src=\"https://image.kyobobook.co.kr/images/book/xlarge/959/x9788966260959.jpg\" alt=\"Clean Code\" width=\"40%\" /> </center>\n","\n","#### senior developer\n"," - 동료 보다 더 많은 전문지식을 가진사람, \u000b다른 개발자를 리딩하거나 방향을 제시하는 사람\n"," - 한 가지 이상의 중요 소프트웨어 프로젝트를 주도했던 경험\n"," - 전형적으로 10년 이상의 경력을 가지고 여러 다른 시스템, 언어 및 운영 시스템 작업을 경험\n"," - 복수의 팀들을 주도하고 조정하는 법을 알며, 능숙한 디자이너와 건축가들이며, 힘들이지 않고 다른 모든 이들을 위해 코드를 처리할 수 있음\n"," - 경영직 제안을 받고도 이를 거절하거나, 자신들의 주된 기술적 역할과 통합\n"," - 판독, 연구, 실행, 및 가르치기를 통해 그런 기술적 역할을 유지\n","\n","#### midlevel developer \n","#### junior developer\n","\n","\n","\n","이상과 현실의 차이"]},{"cell_type":"markdown","metadata":{"id":"ZkV4n46HSLMz"},"source":["### Midlevel developer \n","\n","- 우리가 기대하는 시니어 == Super Magical developer 는 없다.\n","- midlevel developer 는 Junior와 Senior의 중간 어디쯤\n"," - 우리 대부분은 인정하고 싶지 않은 중간개발자\n","\n","- 오류\n"," - 많은 개발 그룹은 연차에 비례해서 시니어와 주니어를 구분\n"," - 스타 개발자라는 명성으로 시니어 개발자를 판별하고 그의 모든 능력이 시니어에 가까울 것이라고 기대\n"," - 특정 언어나 코딩 능력만으로 시니어 개발자를 판단\n","\n","- 진실\n"," - 현장을 아는, 프로젝트의 시작과 끝을 경험한 사람 (**끝판왕 보스를 만나본**)\n"," - 기반 기술에 대한 이해도가 높은 사람\n","\n","\n","프로젝트의 시작과 끝은 프로젝트 계획부터 프로비저닝, 배포 및 유지 관리 까지\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"XzI-BjTUSZWK"},"source":["### 프로젝트 과정\n","\n","- 계획 및 분석\n","- 디자인\n","- 개발\n","- 코드 검토 및 품질 보증\n","- 프로비저닝, 배포 및 유지 관리 (우리의 목표)\n","\n","[Google Play Console에 오신 것을 환영합니다](https://www.youtube.com/watch?v=zt_cNQse05s&feature=emb_logo)\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"3f5eeciXUu_u"},"source":["## 계획 및 분석\n","\n","1부 에서는 처음 두 단계인 계획 및 분석을 살펴 봅니다. \n","\n","\n","- 제품 개발과 관련된 프로세스의 복잡성을 보여주는 질문\n"," - 제품 개발과 관련하여 가장 먼저 수행되는 작업은 코드입니까? \n"," - 기능은 언제 정의되고 위험은 평가됩니까? \n"," - 배포는 어떻습니까? 소프트웨어가 완료되기 전 또는 후에 계획되어야합니까?\n","- 각 단계에 대한 이해도가 높을수록 예상되는 내용을 더 잘 전달할 수 있음\n","\n","- 1부 목표 : \n"," - 각 단계의 목적을 정의하고 관련 당사자를 결정하며 초급 또는 중급 개발자로서 자신의 역할을 식별하는 것\n"," - 당연히이 프로세스는 회사마다 다르므로 다양한 규모의 팀에 대한 몇 가지 일반적인 시나리오를 다룸\n"]},{"cell_type":"markdown","metadata":{"id":"4Rt4XdQ0YCxI"},"source":["### 계획\n","\n","- \"계획\"은 소프트웨어 제품을 의미\n"," - 특정 기능의 구현이 아니라 빌드 될 제품 및 빌드 될 프로세스\n","\n","- 중요한 것은 무엇을 만들 것인가\n"," - 어떻게 만들어 질지가 아니라 최종 목표에 집중\n"," - 표현하기 쉽지만 실제로는 그렇지 않으며. 프로젝트에서 작업 할 팀의 처리량을 염두에 두는 것이 중요\n","\n","- 기능 이외에 결정해야 하는 몇 가지 요소\n"," - 개발을위한 대략적인 시간 슬롯. 릴리스되어야하는 시간에 소요되는 시간\n"," - \"완료\"의 정의. 최종 제품으로 제공 될 것으로 예상되는 것\n"," - 기능을 구축하는 팀. 대기업에서는이 프로세스만을 위해 완전히 새로운 팀을 구성 할 수 있음\n"," - 위험 평가. 일반적으로 가장 중요한 위험 중 일부를 고려\n"]},{"cell_type":"markdown","metadata":{"id":"pOd4BM5uZEQO"},"source":["### 계획 프로세스 마무리\n","\n","- 일반적으로 결정되는 마지막 사항은 지원 소프트웨어입니다. 버그 추적기, 위키 및 스프린트 기간과 같은 일부 프로세스일 수 있습니다.\n","\n","- 지원 소프트웨어가 시간을 낭비하는 것이 아니라 팀을 돕는 것이 중요합니다. 학습 곡선이 높고 개발자가 익숙해지기까지 많은 시간이 걸리며 결국 도움이 아니라 제품을 손상시키는 복잡한 지원 소프트웨어가 선택되는 경우가 너무 많습니다. \n","\n","- 무엇을 구축해야하고 수익을 창출 할 것인지에 대한 본격적인 아이디어가 있으므로 기술적으로나 비기술적으로 제품을 철저히 평가해야합니다.\n","\n","<center> \n","\n","<img src=\"https://miro.medium.com/max/768/1*2qvAoyQyeZuHH4oOJKPt9w.jpeg\" alt=\"\" width=\"60%\" /> \n","\n","<img src=\"https://dzone.com/storage/temp/12937634-1579187413111.png\" alt=\"\" width=\"60%\" /> \n","\n","<img src=\"https://miro.medium.com/max/3840/1*cVZqJGceqBtaW_zWQeZPtw.png\" alt=\"\" width=\"60%\" /> \n","\n","<img src=\"https://devblogs.microsoft.com/cesardelatorre/wp-content/uploads/sites/32/2019/05/dev-ops-workflow-with-ml-model.png\" alt=\"\" width=\"60%\" /> \n","\n","</center>\n"]},{"cell_type":"markdown","metadata":{"id":"V6Y4ihKYbDKf"},"source":["### 분석\n","\n","- 만들고자 하는 제품 요약 예시 (비전문)\n","\n","- 우리는 X를 위한 지역 모임 플랫폼을 구축 할 것입니다. 우리는 지역 기업 (주로 레스토랑 및 카페)과의 파트너 프로그램을 통해 숙박 시설을 제공 할 예정입니다. 그러면 모임에서 특별 제안을 받고 지역 기업이 새로운 고객을 확보 할 수 있습니다. 약 10 명의 사람들이 격주 스프린트와 함께 스크럼을 사용하여 프로젝트에 참여할 것입니다.”\n","\n","\n","만들어질 프로그램이 아닌 vs 사용할 사용자의 비전 모습\n"]},{"cell_type":"markdown","metadata":{"id":"d294x3kjdAzD"},"source":["### 사용자 스토리로 기능 정의\n","\n","<center> <img src=\"https://image.slidesharecdn.com/scrumonuserstory-130724070659-phpapp02/95/-4-638.jpg?cb=1374649713\" alt=\"\" width=\"60%\" /> </center>\n","\n","- 기능 정의를 시작하는 가장 일반적인 방법 중 하나는 사용자 스토리를 사용하는 것\n","- 사용자 스토리\n"," - 다이어그램, 그림 또는 때로는 하나 이상의 사용자 작업을 설명하는 텍스트\n","\n","- 사용자 스토리를 작성하고 어떤 기능을 도출 할 수 있는지 실습!\n","```\n","사용자가 시스템에 로그인합니다. 그는 모임을 만들고 일부 친구에게 초대장을 보냅니다.\n","```\n","- 사용자 스토리는 사용자가하는 일을 설명하지만 이에 대해 시스템을 설계하거나 구현해야 한다면 그다지 유용하지 않음\n","- 생각해볼거리\n"," - 사용자는 어떻게 로그인합니까? 시스템에 등록되어 있습니까? \n"," - 그렇다면 사용자 이름입니까 아니면 이메일입니까? \n"," - Facebook 또는 Google 로그인은 어떻습니까? 지원됩니까?\n"," - 우리가 아는 것은 시스템에 사용자가 있다는 것\n","\n","\n","<center> <img src=\"https://insightbookblog.files.wordpress.com/2019/02/ec8aa4ed86a0eba6ac-eba7b5.png?w=371&h=219\" alt=\"\" width=\"40%\" /> </center>\n","\n","이러한 작업은 일반적으로 빌드되는 첫 번째 기능입니다. 초당 10,000 개의 요청을 처리 할 수 ​​있더라도 사용자가 소프트웨어를 사용할 수 없다면 필요가 없습니다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"mJwZY_OEegzO"},"source":["- 시스템이 지원해야하는 등록 유형을 신중하게 고려\n"," - 고려해야 할 요소가 많기 때문에 이것은 복잡한 과정\n"," - 대상 사용자 기반이 이러한 플랫폼을 사용하고 있습니까? 그것을 사용하는 것이 합법적입니까? \n"," - 인증에 사용하는 플랫폼이 사용할 수 없다고 결정하면 어떻게됩니까? \n","\n","- 조사를 마치고 Facebook 로그인만 사용한다고 가정\n","- 그런 다음 사용자 스토리를 다시 작성\n","```\n","사용자는 Facebook을 통해 시스템에 로그인합니다.\n","```\n","\n","- 여러 로그인 방법을 지원하는 경우 :\n","```\n","사용자는 Facebook / Google / 우리 자신의 로그인을 통해 시스템에 로그인합니다.\n","```\n","- 사용자 스토리가 시스템 동작이 아닌 사용자 동작을 설명하는 한 여기에 원하는 만큼 세부 정보를 추가 할 수 있음. \n","\n","- 나쁜 사용자 스토리의 예 :\n","```\n","사용자는 Facebook을 통해 시스템에 로그인합니다. 새 세션을 시작하는 요청이 시스템 백엔드로 전송됩니다.\n","```\n","- 왜 나쁜 사용자 스토리인가?\n","\n"]},{"cell_type":"markdown","metadata":{"id":"eByNGIyXhc0U"},"source":["<center> <img src=\"https://image.slidesharecdn.com/scrumonuserstory-130724070659-phpapp02/95/-9-638.jpg?cb=1374649713\" alt=\"\" width=\"60%\" /> </center>\n","\n","- 좋은 사용자 스토리란?\n"," - 독립적이다\n"," - 조절 가능해야 한다\n"," - 사용자에게 가치를 제공해야 한다\n"," - 측정 가능해야 한다\n"," - 작아야 한다\n"," - 테스트 가능해야 한다\n","\n","- 사용자 스토리가 얼마나 자세해야 하는지\n"," - 가능한 한 최소화 vs 최대한 자세하게\n","- 개인적으로 세부 사항을 선호하지만, 세부사항으로 가득한 문장을 작성할 필요는 없음\n","- 토의할 수 있는 최소한의 내용만을 가지고 시작해도 됨\n","\n","\n","[사용자 스토리 기반의 스크럼](\n","https://www.slideshare.net/JunyiSong1/scrum-on-user-story)\n","\n","- 개발자 중심의 사용자 스토리는 피함\n","- 기술에 대한 가정 포함도 피함\n","- 버그나 UI 변경과 같은 작은 스토리는 하나의 스토리로 통합한다.\n","\n","- 좋은 사용자 스토리란 계속\n"," - 사용자가 시스템을 사용하는 주 목적을 중심으로 작성\n"," - 사용자가 기능을 사용하여 목적을 완료할 수 있는 단위로 작성\n"," - 스토리가 반드시 지켜야하는 비기능(제약사항)인 경우, 제약사항 스토리로 작성\n","능동태로 작성하고 스토리 카드에 번호를 부여하지 않음(우선순위는 중요도에 따라 분류)\n"," - 가까운 시기에 구현할 기능은 작은 스토리로, 훨씬 나중에 구현할 기능은 큰 스토리로 작성\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"rLhc_JKql9Br"},"source":["<center> \n","\n","<img src=\"https://lh3.googleusercontent.com/proxy/hAc8nN01f3bP2hwqVbPOFIT6kSSVLxv1ZdRbc55HfJYsMK3_pZVYPF403MP-OHWvTIX1L3kzGMQRIQRpRv4hctzPtq1d-ePjFD3z1lfFpZ8EZ8Zt-i9CDEavcM_r-F_R92AA_HLJ1RNoxP-sfa7KpxIdFC8w\" alt=\"\" width=\"60%\" /> \n","\n","<img src=\"https://lh3.googleusercontent.com/proxy/uAfreySP28WLpKVHdk3pdQU9BqNe718yj1utF9EXTWXDtpmutAVdG2byStVvtM2oKVQ4FXGf4rk2YBfSy2Laq9ROs9gG43huAaezyQORUVGn0cCTsPwBQ2C3wx6hQ1JMaPvJZUFVx6mpct6BxF9ADVzhqEfm\" alt=\"\" width=\"60%\" />\n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"xyJGTERCnQ2E"},"source":["### 분석 프로세스 마무리\n","\n","- 분석 프로세스는 대부분의 사용자 작업에 대한 사용자 스토리가 생성되고, <br>조사 및 분석 후 고위험에 대한 결정까지 내려 질 때 종료됩니다.\n","\n","- 프로세스는 일반적으로 대부분의 회사에서 동일하지만 <br>작업을 수행하는 사람은 단일 팀, 여러 팀 또는 단일 사람일 수 있습니다. \n","\n","- 사용자 스토리는 pdf 형식이거나 소프트웨어, 화이트 보드의 그림 또는 포스트잇으로 그려 질 수 있습니다. <br>산출물의 형식보다 중요한 것은 시스템의 아키텍처가 올바르게 수행 될 수 있도록 기능을 결정하는 것입니다.\n","\n","- 대기업과 중소기업에서 차이점은 일반적으로 산출물 형식에 있습니다. 회사가 클수록 더 많은 사람들이 산출물을 보고 승인해야 하므로 모든 것이 세련되어 보이는 것이 좋습니다. <br>그러나 소수의 사람이있는 스타트 업에서는 몇 장의 사진과 종이로 충분합니다. \n","\n","- 경험에 관계없이 개발자로서 사용자 스토리를 볼 때 프로젝트를 지연시킬 수 있는 알려지지 않은 주요 사항이 없는지 확인하기 위해 가능한 한 많은 질문을 하는 것이 좋습니다. \n","\n","- 여러분은 좋은 직원이지만 뭔가 큰 실수를 남겼다면 초과 근무가 올 때 완전히 경영진의 잘못이 아닙니다. 이러한 경우가 자주 발생하기 때문에 불안할 수도 있지만 이러한 경우를 피하기 위해 최선을 다하십시오. 추정이 정확한 과학이 아니라는 것은 입증 되었지만, 피할 수 있었던 실수로 인해 가족 및 사랑하는 사람들과 시간을 보내지 못한 것은 가장 고통스러운 일 중 하나입니다.\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Lln-GgwDnS3Z"},"source":["## 디자인\n","\n","- 시스템 아키텍처 설계는 소프트웨어 개발에서 가장 중요한 부분 중 하나\n","- 일반적으로 팀에서 가장 경험이 많은 설계자 및 시니어 개발자가 수행\n","- 아키텍처 설계자에게 중요한 질문 예시\n"," - 시스템에는 어떤 구성 요소가 있고, \u000b어떻게 분할되며, \n"," - 서로 통신하는 방법은 무엇입니까? \n","어떤 스토리지 또는 웹 서버가 사용됩니까? \u000b캐시 또는 대기열과 같은 \u000b더 많은 지원 소프트웨어가 필요합니까?\n","\n","2부 목표 : \n","- 전통적인 디자인이 어떻게 이루어 졌는지, 어떤 문제가 있었는지, \u000b그리고 그것을 해결하여 결국 현대적인 디자인이 된 것으로 발전시키는 방법을 이해\n"]},{"cell_type":"markdown","metadata":{"id":"5g7sMaryrwJh"},"source":["### 디자인 프로세스\n","\n","- 프로세스는 지난 수십 년 동안 많이 변경\n"," - 소프트웨어에 대한 요구 사항 증가\n"," - 허용 가능한 최소 품질 상승\n"," - 소프트웨어 작동 규모 증가\n","- 현재 시스템 : 수천만 명의 활성 사용자가 온라인에 연결\n","- 수십 년 전 시스템 : 대부분의 소프트웨어가 한 번에 한 명의 사용자가 사용하도록 작성되었으며 온라인 연결이 없었음\n","\n","- 디자인 목표 : 디자인은 필요한 표준을 충족하는 가장 간단한 버전\n","- 오늘날 소프트웨어의 모든 복잡성은 시장 요구의 결과\n"," - 예 : 서로 통신하는 수백 대의 물리적 시스템으로 구성된 데이터베이스로 소프트웨어를 분산시키는 것\n","- 허용 기준을 충족하는 데 필요하지 않은 것을 추가하는 것이 소프트웨어 설계에서 가장 큰 문제\n","\n","\n","이제 25년 전과 달라졌기 때문입니다. \n","\n"]},{"cell_type":"markdown","metadata":{"id":"JfT8vVitu2rW"},"source":["<center> \n","\n","<img src=\"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F99BB7B375BEC392E01\" alt=\"\" width=\"60%\" /> \n","\n","<img src=\"https://lh3.googleusercontent.com/proxy/aM1a_mu68RBaszKuSx43v5u3b9SxUe0Vuz2R-2C8HYjB65T8f1ABbfm3daK8fqlZ9hMyIVhqTABTNaOPTXzcOFUKuDBuSMKtBrQ3hX4tHT6u7pgKsOV1G2MMMp2ad2M6Wg\" alt=\"\" width=\"60%\" />\n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"AxUjVxUwvCtL"},"source":["- 간단한 꽃 배달 서비스 사례\n","\n","- 작은 마을에서 간단한 꽃 배달 서비스를 받아보기\n"," - 현실적으로 매주 수백만 명의 활성 사용자를 보유하는 것은 불가능\n"," - 결국 수천 명의 사람들이있는 작은 마을에서만 운영\n"," - 분산 데이터베이스를 사용하여 꽃집을 디자인하거나 캐싱 레이어를 추가하고 싶을 수 있지만 과도하고 예산이 부족할 수 있음\n","\n","- 지역 / 국가에 걸쳐 150 개의 오프라인 상점이있는 꽃 배달 사업을 시작\n"," - 150 개의 도시들 중 일부는 작지만 일부는 큰 도시\n"," - 회사는 중앙 집중식 시스템을 가질 가능성이 높음 (도시의 관할 구역이 동일하다면). \n"," - 잠재 고객은 수백만 명의 잠재 고객으로 구성 가능\n"," - 이러한 가능한 사용자 기반의 경우 일부 DDos 보호, 캐싱 레이어 및 로드 밸런서 뒤에 몇 대의 서버를 추가하는 것을 추천\n"]},{"cell_type":"markdown","metadata":{"id":"K9CZx-7kvnku"},"source":["- 예를 들어 예상 서비스 시간과 같이 설계를 결정하는 다른 모든 요소의 공통점은 영향을 미칠 요소가 비즈니스와 직접적인 관련\n","\n","- 왜 사람들은 설계에 불필요한 복잡성을 도입할까? \n"," - 우선 모든 개발자는 최신 유행 언어, 도구 또는 라이브러리 사용을 선호\n"," - MongoDB의 경우처럼 별도로 판매 가능\n"," - 마지막으로, 우리는 인간이고 실수를 한다. \n","\n","- 시스템 설계는 얼마나 많은 경험을 보유하고 있든 관계없이 \u000b우선 순위는 복잡성을 최소화하면서 모든 요구 사항을 충족해야합니다.\n"]},{"cell_type":"markdown","metadata":{"id":"V8x5yOXbytn0"},"source":["### 전통적인 디자인\n","\n","과거 디자인은 상당히 단순 : 대부분의 소프트웨어에 대한 사용자 기반이 적었고 많은 옵션이 부족\n","\n","그러나 쉽지 않은 프로세스 \n","- 평균적으로 업데이트는 오늘날 보다 훨씬 더 어렵기 때문에 실수로 인해 더 많은 비용이  발생\n","- 대부분의 실수는 당시 작업이 수행된 방식의 특성으로 인해 개발 과정에서 매우 늦게 발견 (디자인이 아닌 개발 과정)\n","\n","폭포수 방법론이 왕\n","- 다음 단계가 시작되기 전단계(예 : 계획, 분석, 설계, 개발, 품질 보증 등)가 100% 완료되는 프로세스\n","이 논리는 그 이후로 결함이 있음이 입증\n","폭포수 방법론의 주요 문제\n","극도로 느린 피드백 : 설계에 결함이 있으면 일반적으로 할당 된 시간의 10~15%가 남아있을 때만 발견 가능\n","- 설계자와 개발자의 시간이 낭비 : 발견시 이미 구현되었을 것이므로 \n","- 과도한 산출물 : 설계 프로세스가 매우 형식적, 통합 모델링 언어 다이어그램 형태의 많은 산출물 (시스템의 모든 엔티티, 하위 시스템 및 인터페이스를 설명하는 것으로 생성)\n","\n","시간이 지나면서 \n","- 사람들은 피드백에 필요한 시간을 줄이면 총 개발 시간이 단축되어 소프트웨어 구축 비용이 절감된다는 사실을 발견\n","- 폭포수 방법론과 관련된 다른 주요 문제 외에도 짧은 피드백 루프를 선호하는 접근 방식이 선호 \n"]},{"cell_type":"markdown","metadata":{"id":"2Z5dZOBZvzi1"},"source":["### 현대적인 디자인\n","\n","요즘에는 스크럼과 같은 애자일 방법론과 프로세스 프레임 워크가 선호\n","- 폭포수 모델 개선, 모든 문제의 해결책은 아님 (은총알 No)\n","\n","시스템이 작동하기 전까지는 시스템의 전체 요구 사항을 알 수 없다는 것이 진실\n","- 안타깝게도 소프트웨어 요구 사항은 절대 확정되지 않고 끊임없이 변화\n","- 짧은 피드백 루프는 이러한 실수를 조기에 더 많이 포착하고, \u000b이를 더 잘 수용 할 수 있도록 설계 및 아키텍처를 조정하는 데 도움\n","\n","첫 번째 스프린트\n","- 어떤 면에서 디자인의 주요 결함을 포착 할 수 있는 기본 구현 (추적 총알)\n","- 그러나 모든 실수가 잡힐 가능성은 제로\n","\n","설계의 목표는 최소한의 복잡성으로 모든 요구 사항을 충족하는 것\n","- 설계가 변경을 허용 할 수 있을만큼 유연해야 함\n","- 유연성의 비용 -> 복잡성이 추가\n","\n","“우리는 교차로에 있으며 일반적으로 어떤 길로 가야할지 명확하지 않습니다. \u000b유연성 또는 단순성을 선택할지 여부는 경험이 필요하며 매번 따를 수 있는 규칙이 없습니다.”\n","\n"]},{"cell_type":"markdown","metadata":{"id":"PASWUndKVsx-"},"source":["접근 방식 외에도 실제 디자인도 수십 년에 걸쳐 변경\n","\n","모놀리식 아키텍처(Monolithic Architecture)\n","- 과거 개발 과정에서 많은 피드백 없이 모든 개발이 한꺼번에 이루어 짐<br>그 때문에 소프트웨어는 일반적으로 하나의 큰 조각으로 제작\n","\n","마이크로서비스 아키텍처(Microservices Architecture)\n","- 요즘은 민첩성 덕분에 모든 것이 시간적으로 작은 단위로 이루어짐\n","- 특정 작업을 수행하고 피드백을 받고 피드백이 적용될 때 작업을 수행하는 1 ~ 6주의 기간인 스프린트\n","- 이것은 당연히 소프트웨어가 작은 덩어리로 나뉘게되며, 각각은 특정한 일을 함\n","\n","마이크로서비스 지향 접근 방식\n","- 이러한 방식으로 소프트웨어를 개발할 때 얻을 수 있는 “마케팅”적인 많은 이점이 존재\n","- 소프트웨어가 한 번에 한 덩어리 (1~6주)로 개발되기 때문에 비교적 작고 독립적인 구성 요소로 구성된 아키텍처를 사용하는 것이 자연스러움\n","- 실제로 많은 소규모 서비스를 관리하고 모니터링하는 것은 단일 애플리케이션보다 더 번거로움\n","- 그러나 그동안 많은 사람들이 시도한 전통적인 해결책 보다는 마이크로 서비스 지향 설계가 더 나음\n","\n","마이크로 서비스는 대형 소프트웨어 프로젝트의 기능들을 작고 독립적이며 느슨하게 결합 된 모듈로 분해하여 서비스를 제공하는 아키텍처 입니다. 각 개별 모듈은 개별적인 작업을 담당하며 간단하고 보편적으로 엑세스 할 수 있는 API를 통해 다른 모듈과 통신 합니다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ouIoV1bIVs3v"},"source":["### 디자인 트렌드\n","\n","모바일 플랫폼과 웹은 매우 다른 두 세계이지만 디자인 트렌드는 다소 비슷\n","\n","닷컴 붐 이후 \n","- 웹 사이트 구축에는 perl과 PHP가 사용, \n","- 표준도, 프레임 워크도, 도구도, 어떤 종류의 생태계에도 없었음\n","- 모두가 모든 것을 위한 맞춤형 프레임 워크를 구축하기 시작\n","- 대부분의 프레임 워크는 쓰레기, 99%는 프레임 워크를 만든 사람들만 사용\n","- 이들 중 일부는 오늘날 차세대 프레임 워크와 궁극적인 기술 생태계를 위한 길을 마련\n","- 오픈 소스와 협업이 꽃을 피웠기 때문에 참여도를 보여주는 것은 필수 요소 (요즘 많은 기업에서 기대 )\n","\n","오늘날 수많은 아키텍처가 있으며 소프트웨어의 특성에 따라 모든 아키텍처 사용가능\n","- 자신의 서비스를 호스팅하는 대신 많은 클라우드 서비스를 사용하는 것이 한 가지 추세\n","- 예를 들어, 요즘에는 서비스로서의 관계형 데이터베이스, 이메일, 대기열, 키-값 저장소, 캐시 등과 같은 서비스를 이용\n"]},{"cell_type":"markdown","metadata":{"id":"iBB_qxW6VtZf"},"source":["- 웹 호스팅, 서버호스팅, 클라우드\n","\n","자체 솔루션을 호스팅하는 대신 서비스를 사용하는 많은 장단점이 존재\n","미취학 아동을 위한 세미나에 사용할 교육용 앱 예시\n","프로젝트의 수명은 2 ~ 3 년으로 예상\n","데이터 복구, 백업 및 가동 시간에 대해 엄격한 서비스 수준 계약이 적용된 서비스를 선택\n","서비스 구축비용은 천 만원 내외\n","저렴하고 빠르게 구축 할 수 있는 방법은?\n","장기적으로는 더 많은 비용이들 것이고 변경 사항이 있다면 1.0 버전을 출시하고 하루 만에 변경가능 해야함\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Z4oM1upjVte3"},"source":["### 디자인은 균형을 찾는 것\n","\n","디자인의 목표는 최소한의 복잡성으로 모든 비즈니스 요구 사항을 충족\n","\n","디자인 프로세스가 변경되고 발전 할 수 있지만 최종 목표는 동일하게 유지\n","\n","설계 단계에서 실수는 불가피\n","\n","따라서 나머지 팀원의 시간을 낭비하지 않고 설계 및 아키텍처 문제를 해결하려면 피드백 루프가 최대한 짧아야함 \n","\n","설계 변경은 설계자의 실수뿐 아니라 사람들이 필요한 것이 무엇인지 정확히 알지 못하기 때문에 불가피\n","\n","따라서 이를 염두에 두고 낮은 복잡성과 유연성 사이의 균형 유지가 필요\n"]},{"cell_type":"markdown","metadata":{"id":"A7e8UfYCVtkY"},"source":["## 개 발\n","\n","소프트웨어를 개발할 때 현재 사용하는 방법은 애자일 기반방법 (예 : 스크럼)\n","- 작업은 스프린트라고 하는 1~6주 단위로 진행\n","- 한 단위가 끝나면 소프트웨어의 일부가 준비되어 시연 될 수 있고 피드백을 받을 수 있음\n","- 피드백에 따라 소프트웨어의 다음 부분이 다음 스프린트 중에 개발되거나 마지막 스프린트에서 완료된 덩어리가 재 작업됨\n","- 주요 아이디어는 짧은 피드백 루프가 실패 위험을 줄이는 것\n","- 시간 손실이 적을 수록 좋고, 한 번에 하나의 특정 하위 시스템 작업을 수행\n","- 개발 팀이 소프트웨어의 특정 부분에 집중하는 동안 모든 변경, 향상 및 재작업 수행 가능\n","\n","그러나 소프트웨어 프로젝트는 지속적으로 지연되고 결함과 함께 제공\n","\n","3부 목표 : \n","- 개발 문제의 원인과 이러한 문제를 해결하는 데 필요한 전략과 도구를 이해\n"]},{"cell_type":"markdown","metadata":{"id":"Prkb_9Njh68J"},"source":["<center> \n","\n","<img src=\"https://magazine.hankyung.com/magazinedata/images/photo/201901/3d1bf185f1a4ce4cce742550548a7499.jpg\" alt=\"애자일 선언문\" width=\"40%\" /> \n","\n","<img src=\"https://magazine.hankyung.com/magazinedata/images/photo/201901/68161b75e4b37448c6229fdcebc8a6ff.jpg\" alt=\"애자일 역사\" width=\"60%\" /> \n","\n","<img src=\"https://miro.medium.com/max/1024/0*FPZNyPPU709ubTqk.jpg\" alt=\"애자일 스크럼\" width=\"60%\" /> \n","\n","<img src=\"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F245B0C3E5899CA0813\" alt=\"애자일과 스크럼\" width=\"60%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"g7iIN5ErVtp-"},"source":["### 소프트웨어 개발 문제\n","\n","대부분의 소프트웨어 프로젝트는 지연되고 프로덕션에 항상 버그가 존재\n","\n","왜 이런 일이 발생하며 소프트웨어 개발을 어렵게 만드는 이유는? \n","\n","첫째, 요구 사항의 즉시 변경되는 경향\n","- 특정 작업을 수행하는 코드를 작성하는 것은 쉬움\n","- 숙련 된 개발자는 대부분의 버그를 예측하고 피할 수도 있음\n","- 그러나 요구 사항은 일반적으로 명확하지 않고 추상적\n","- 세부 사항과 사용 사례가 부족\n","\n","이상 : \n","- 개발자는 불확실성에 대해 질문하고 명확하고 간결한 답변을 즉시 얻음\n","\n","현실 : \n","- 대부분의 경우 사람들은 명확한 대답을 할 수 없거나 결정을 내릴 권한이 없음\n","- 일부 특정 사용자 스토리는 여러 회의를 해야 결정이 가능\n","\n","\n","개발자는 프로젝트에 대한 최선의 의도를 가지고 최선을 다하지만 프로젝트 지연과 버그 존재\n","원인에 하나의 답은 없지만 엔터프라이즈 및 스타트 업 프로젝트에 대한 경험상 몇 가지 반복되는 문제가 존재\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"PiJMEJ8yVtnG"},"source":["**코드 추상화** : 명확하지 않은 부분을 해결하는 방법, 유연성 증가\n","- 코드 추상화에 따르는 대가 : 덜 구체적이고 일부 버그가 누락\n","\n","둘째, **시간과 자원을 추가없이** 너무 자주 **새로운 기능**이 개발 중에 추가\n","- 제품의 성공에 중요한 것으로 추가 제시되지만 일정은 동일하게 유지\n","- 시간 부족으로 품질이 떨어지고 버그 증가\n","- 이러한 기능은 비즈니스에서 필요하기 때문에 릴리스\n","\n","생각해볼거리 \n","- 개발자가 비즈니스에 의해 방해를 받고 있다는 것을 의미할까? \n","- 일정 변경없이 요구 사항을 변경하여 더 많은 것을 추가하기 때문에 <br>소프트웨어의 지연과 버그가 발생할까?\n","- No (처음 몇 년은 이것을 인정하기가 매우 어려움)\n","- 진실은 사람들 이 작업을 추정 할 수 없다는 것\n","\n","\n","그래도 괜찮은 개발자는 코드를 좀 더 유연하게 만들기 위해 명확하지 않은 부분을 추상화 하여\n","스프린트가 끝날 때 준비된 무언가를 시연 가능 (고객 및 사장과 오해소지 발생!!)\n","불확실한 요구 사항으로 인해 즉시 최적의 코드를 작성할 수 없고,\n","설상가상으로 요구 사항은 릴리스전에 여러 번 변경되는 경향이 있음\n","개발자들은 코드를 버리고 다시 작성해 하기에 이것을 싫어함\n","작성중인 코드는 처음부터 구현할 시간이 충분하지 않기 때문에 코드는 변경이 가능하도록 작성\n","비즈니스를 보호하기 위해 테스트 후 요구 사항을 변경하면 최적이 아니거나 더 나쁜 경우 원하는 효과를 전혀 얻지 못함\n","예를 들어, 특정 결제 수단이 소프트웨어의 대상 고객 사이에서 인기가 없으므로 새로운 통합이 이루어져야할 경우\n","\n"]},{"cell_type":"markdown","metadata":{"id":"fuz-fN65Vthm"},"source":["정확한 추정이 거의 불가능한 이유?\n","\n","설상가상으로 개발자는 종종 프로젝트를 수행 할 준비가되어 있지 않음\n","\n","- 왜 그럴까? 개발자는 소프트웨어를 만드는 방법을 알아야하지 않을까? \n","- 현대 소프트웨어 개발은 ​​대체로 서로 다른 시스템과 서비스를 하나로 묶는 것이 아닌가? 왜 그렇게 어려울까?\n","\n","개발자가 일부 프로젝트에서 어려움을 겪는 이유\n","- 대부분의 프로젝트에는 개발자가 사용하지 않은 기술이 포함\n","- 프로그래밍 언어, 운영 체제 등에 대해 말하는 것이 아님\n","- 자신의 도구를 모르고 잘 사용하지 못한다면 개발자가 그렇게 훌륭하지 않을 가능성이 있음\n","\n"]},{"cell_type":"markdown","metadata":{"id":"vIRslL1fVtcO"},"source":["소프트웨어 개발자가 어려움을 겪는 기술의 두 가지 주요 유형\n","\n","첫 번째 타사 소프트웨어 / 서비스와의 통합\n","- 일반적으로 문서화되지 않은 세부 사항이 있으며 개발자는이를 찾아서 스스로 해결해야함\n","- 서비스를 사전에 조사하고 테스트하면 소요 시간을 줄일 수 있지만 일반적으로 개발주기가 시작되기 전에 사용될 타사 서비스를 조사 할 시간이 없음\n","\n","두 번째 소프트웨어의 핵심으로 고유하고 존재하지 않으며 처음부터 만들어야하는 부분\n","- 일반적으로 처음에 예상했던 것보다 구현을 훨씬 더 어렵게 만드는 숨겨진 복잡성과 엣지 케이스 존재\n","\n","모든 프로젝트에 복잡한 핵심이 있는 것은 아니며, 모든 프로젝트에 타사 통합 기능이 있는 것은 아님\n","- 경험에 따르면 WordPress 사이트 및 웹 스토어와 같이 복잡한 핵심이 없는 프로젝트에는 일반적으로 많은 통합 및 플러그인이 있음\n","\n","스스로에게 질문 \n","- 소프트웨어 개발은 ​​어떻게 그렇게 엉망일까? \n","- 광고하는 것과 내가 상상했던 것과는 거리가 멀다. \n","- 사실, 소프트웨어 개발의 ​​현실 세계는 지저분합니다. \n","- 도큐먼트와 대학과 같은 고립 된 환경에서는 실제보다 훨씬 쉬워 보인다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"w-VKSh18VtW3"},"source":["그럼에도 불구하고 불확실성을 몇 단계 낮출 수 있는 특정 단계가 존재\n","\n","지금까지 이야기 한 문제\n","- 요구 사항 변경\n","- 더 많은 시간과 자원을 추가하지 않고 더 많은 작업 추가\n","- 타사 시스템에 익숙하지 않음\n","- 소프트웨어의 복잡한 핵심 처리\n","\n","문제를 외부와 내부로 그룹화\n","- 외부 : 요구 사항 변경 및 추가 요구 사항 추가\n","- 내부 : 특수 소프트웨어 / 서비스에 대한 친숙 함, 모호하고 복잡한 작업 해결\n"]},{"cell_type":"markdown","metadata":{"id":"b-NgxrAxi6RZ"},"source":["<center> \n","\n","<img src=\"https://image.yes24.com/Goods/1372497/L\" alt=\"데드라인 도서\" width=\"40%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"fEcM7ALPVs0-"},"source":["### 문제 해결\n","\n","일반적인 전략 중 하나는 과대 평가하는 것\n","- 예를 들어 프로젝트를 완료하는 데 2개월이 걸릴 것으로 예상한다고 가정하면, 2주를 더 추가하여 일부 변경 사항을 반영\n","- 50% 더 많은 시간을 원하면 대부분의 사람들이 여분의 시간을 주지 않기 때문에 합리적인 일정이어야 함\n","\n","또 다른 전략은 지연에 대해 받아들이는 것\n","- 예상보다 더 많은 시간이 소요되는 경우 이 문제를 혼자만 간직하지 말것\n","- 관련된 사람들에게 말하면 도움을 받을 수 있고, 시간을 더 받을 수 있으며, 덜 중요한 기능은 뒤로 밀릴 수 있음\n","\n","새로운 기능에 관한 한 가장 중요한 것은 가능한 것에 대해 공개하는 것\n","- 어떤 것이 시간 프레임에 맞지 않을 때를 설명\n","- 초기 릴리스 후에 다른 기능을 연기하고 완료 할 수 있는지 질문\n","\n","많은 사람들이 “모든 것이 중요하다”고 말하지만 그렇지 않다\n","- 대부분의 것은 가지고 있으면 좋으며 \n","- 작업중인 소프트웨어를 향상시킬 수 있지만 \n","- 업무상 중요하지는 않음\n"]},{"cell_type":"markdown","metadata":{"id":"rXlFQsX8VsvH"},"source":["### 적절한 사고 방식 채택\n","\n","좋은 소식은 적절한 사고 방식을 채택하면 개발자가 내부 문제를 처리 할 수 ​​있다는 것\n","\n","실수에 대한 책임을 집니다. \n","- 당신이 무언가를 과소 평가했을 때 거짓말을 하지 말것\n","- 실수를 인정하고 기능을 지연해야 하는 경우에도 수정할 수 있는 방법을 제안\n","- 실수를 숨기려고 할 수록 실수를 더 많이 할 것임\n","\n","진실을 말하고 비현실적인 기대치를 설정하지 마십시오. \n","- 낙관적으로 말하고 싶은 유혹이 있을 때 그렇게하지 말것\n","회사에 피해를 주고 원하지 않는 초과 근무를하게 될 수 있음\n","일을 단순하게 유지할 것\n","다른 사람을 오해하지 말것\n","\n","자존심을 갖지 마십시오. \n","- 자아가 어떻게 유망한 소프트웨어 프로젝트를 망쳐 놓는 지에 대한  여러 예시 (가장 좋은 점은 자신을 예로 사용할 수 있다는 것)\n","항상, 항상, 항상 목표를 염두에 두고 누구에게도 아무것도 증명하지 말것\n","작업의 질은 당신이 아니라 당신의 기술에 대해 말해야함. 자아는 점검하기가 매우 어렵움. 자존심이 문제를 일으키지 않도록\n","자존심은 소프트웨어 개발자들에게 매우 흔하기 때문에 말을 할 때 누군가와 불필요하고 파괴적인 논쟁을 벌일 가능성이 있음\n","\n","압력 때문에 전문가로서의 작업을 위험에 빠뜨리지 마십시오 . \n","- 개발자로서의 책임은 유지 보수 가능한 고품질 코드 를 생성 하는 것\n","기술적인 부채가 발생하여 향후 소프트웨어 향상이 지연되고 소프트웨어 디버깅 및 유지 관리가 더 어려워지므로 유혹적인만큼 희생해서는 안됨\n","\n","\n","자아는 점검하기가 매우 어렵습니다. 때때로 이것으로 부터 실패하고 아직 긍정적인 경험을 만들지 못했습니다. 자존심을 풀 때마다 상황을 악화시키므로 기존 문제를 계속 해결하기 전에 문제를 해결해야합니다. \n","지금까지 현대 개발자가 직면 한 주요 문제와 일부 솔루션에 대해 논의했습니다. 우리는 또한 채택해야 할 사고 방식에 대해서도 논의했습니다.\n","이제 우리가 다룰 중요한 부분은 현대 개발자가 필요로하는 전략과 도구입니다.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"F9YLRwIeaLFG"},"source":["### 현대 개발자를위한 전략\n","\n","```\n","올바른 습관을 채택하고 \n","올바른 의도를 설정하면 (하향식 사고)\n","집중 향상 -> 몰입 -> 더 많은 가치를 더함\n","```\n","\n","시간 구조화 전략 \n","- 불행히도 우리는 주변에 산만함이 있는 시대\n","소프트웨어 개발자를위한 시간 구조화 전략 Pomodoro Technique\n"," - 시간을 방해없이 일하는 간격(예를 들어 25 분)으로 나누고(뽀모도로)\n"," - 보통 5 분의 짧은 휴식을 취하고 \n"," - 뽀모도로 4 개마다 30 분씩 더 긴 휴식을 취함\n","\n","- 핵심 아이디어는 작업을 작고 관리 가능한 덩어리로 나누고 진행 상황을 빠르게 확인하는 것\n","- 잘못된 방향으로 가도 30분 이상 낭비하지 않음\n","- 많은 사람들이 생산성을 절약 칭찬과 입증\n","\n","\n","나는 계획된 회의가 없는 대부분의 날 직장에서 그것을 사용하고 놀라운 일을한다. 그러나 매일 사용하지 않습니다. 때로는 하루 종일 회의가 펼쳐져 불필요한 구조를 추가하기 때문입니다.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"SZxKQ_Oejp9C"},"source":["https://francescocirillo.com/pages/pomodoro-technique\n","\n","<center> \n","\n","<img src=\"https://post-phinf.pstatic.net/MjAxODA5MjhfMTc3/MDAxNTM4MTI0NTk1MTYy.TA0ak5A7Jw3WuvT5VyZFanG097CVFrwq-bEtxzlQp7Yg.2dR8RqH_hABsQR9WljNIuq95gKUjeZlkiZrgk-yXfwog.PNG/180927_BLOG_%EB%BD%80%EB%AA%A8%EB%8F%84%EB%A1%9C3.png?type=w1200\" alt=\"뽀모도로 사이클\" width=\"40%\" /> \n","\n","<img src=\"https://lh3.googleusercontent.com/proxy/t28WmivKAuTDE_O28uGP9RRPYg1ePjMk4QAjhyrRLq2rTBeap-2d6mOLgRJ5auZ6_lYE2cpMYTmN5dsFSCe-m0UiOdzxJbR34z10zQeU9Y6NU25UiQne\" alt=\"뽀모도로 How to\" width=\"40%\" /> \n","\n","<img src=\"https://image.yes24.com/blogimage/blog/a/v/avan/T8tFalaJ.jpg\" alt=\"뽀모도로 테크닉\" width=\"40%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"a9CqSttYabNs"},"source":["고위험 작업을 먼저 처리\n","- 빠른 작업을 먼저 수행(비생산적)  : 프로그래밍의 단점 중 하나는 작업 결과를 보기 전에 꽤 기다려야 한다는 것\n","- 고위험 작업은 프로젝트의 일부가 아니라 실패 할 경우 전체 프로젝트를 실패하게 만드는 부분\n","- 이 부분을 100%로 마무리 할 필요는 없지만, 이들이 제대로 작동하고 대부분의 작업을 수행하여 이상없음을 확인해야 함 \n","\n","피드백을 받았는지 확인\n","- 어떤 것이 좋은지 나쁜지 확실하지 않은 경우 피드백을 요청 (상관없이 물어보기)\n","- 이전에 코드를 본 적이없는 동료가 몇 분 동안 코드를 검토하면 디버깅 시간을 절약 가능\n","- 대부분의 코드를 혼자서 작성하더라도 서로 돕는 이유가 있는 동료가 있다는 것을 잊지 말것\n","\n","회의에 낭비되는 시간을 줄이기\n","- 여기서 가장 좋은 제안은 적극적으로 가치를 추가 할 수있는 회의에만 참석하는 것\n","- 대부분의 회의는 두세 사람 사이에서 이루어지며, \u000b각자 다른 사람보다 더 많은 지원을 위해 몇 사람을 끌어들입니다. \n","- 적극적으로 기여할 수 없다면 건너 뛰는 것이 좋음\n","\n","\n","고위험 작업은 건너 뛸 수 없고 소프트웨어 개발에서 A 대신 B를 얻을 수 있습니다. 전부 아니면 아무것도 아닙니다. \n","즉, 100 % 완료된 것을 보여주지 않아도 괜찮은 비율의 시간이 지나갈 수 있습니다. 이로 인해 동기가 떨어질 수 있지만 저를 믿으십시오. 지금은 고위험 작업을 완료 할 수 없기 때문에 지난 몇 주 동안의 공동 노력이 낭비되는 이유를 팀에 설명해야하는 것이 훨씬 더 낙담합니다.\n","\n","다른 사람이 코드를 빠르게 살펴보면 얼마나 많은 버그를 잡을 수 있는지 놀랍습니다. \n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ZjEzTU1rabTN"},"source":["### 최신 개발자를 위한 도구\n","\n","하드웨어에 관한 한, 특정 요구 사항에 맞고, 예산에 맞는 것을 사용\n","\n","가장 간과되는 자산은 인체 공학\n","- 많은 시간 동안 워크 스테이션에 머물 것임을 명심하고, 편안하고 통증을 유발하지 않는지 확인\n","- 눈 : 안경을 사거나 보호 기능이 내장 된 모니터를 선택 (노이즈 캔슬링 헤드폰도 고려)\n","\n","텍스트 편집기\n","- 코드 린터, 스타일 검사기, 기본적으로 더 높은 품질의 작업을 제공 할 수 있는 모든 것을 사용\n","- 자동화 : 커밋 할 때 모든 코드 관련 검사기를 실행하고 실패하면 커밋을 거부\n","\n","지원 소프트웨어에 관해서는 자신에게 맞는 것을 사용\n","-  사용중인 소프트웨어가 적극적으로 지원되는지 확인\n","- 저장하는 데이터가 있는 경우 저장 위치를 ​​아는 것도 중요\n","- (주로 오픈 소스 소프트웨어를 사용하지만 가끔 상용 소프트웨어를 구입)\n","\n","필요한 소프트웨어만 사용\n","- 버전 제어 시스템용 그래픽 클라이언트를 원하면 하나만\n","- 소프트웨어 제품을 여러 개 구하면 제대로 배우지 못할 것임\n","\n","도구를 선택할 때 구성 가능한지 확인\n","- 시간이 지나면 개인 요구 사항과 개인 워크 플로에 맞게 만들어야함\n","\n","“도구가 너무 많으면 속도가 느려지고 양질의 코드를 빠르게 제공하는 대신 주의가 산만 해집니다.”\n","\n","\n","자동화 : 이렇게 하면 확인을 잊지 않고 품질 이하의 작업을 제출할 수 없습니다. 체커가 자동화되지 않은 경우 일부를 건너 뛰고 도움이 아닌 부담이됩니다.\n"]},{"cell_type":"markdown","metadata":{"id":"CkXihnHDabb-"},"source":["### 프로세스 신뢰\n","\n","올바른 사고 방식, 도구 및 전략을 사용하여 프로세스를 신뢰하는 것뿐입니다. 다른 노력과 마찬가지로 기복이있을 것입니다. 어떤 날은 좋을 것이고 어떤 날은 나쁠 것입니다.\n","\n","그 과정을 신뢰하고 어려움을 겪을 때 포기하지 말고 계속하는 것이 중요합니다.\n","\n","소프트웨어는 복잡하고 마스터하는 데 수년이 걸리지만 전략과 사고 방식을 적용하기 시작하면 곧 긍정적인 변화를 보게 될 것입니다.\n"]},{"cell_type":"markdown","metadata":{"id":"oEsJwWnoabhm"},"source":["## 코드 검토 및 품질 보증\n","\n","개발자로서 임무\n","- 단지 코드를 작성하는 것이 아님\n","- 복잡한 문제에 대한 양질의 솔루션을 제공하는 것\n","\n","질문\n","- 작성한 코드가 고품질로 소프트웨어가 원하는 작업을 수행 할 수 있습니까? \n","- 소프트웨어에 오류가 발생하면 정상적으로 처리합니까? \n","- 소프트웨어가 안전하고 성능이 충분합니까?\n","\n","4부 목표 : \n","- 소프트웨어 프로젝트의 품질을 측정하고 향상시키는 데 사용되는 두 가지 프로세스인 코드 검토와 품질 보증을 이해\n","- 각각을 검토하고 더 나은 결과를 제공하기 위해 워크 플로에서 이를 구현하는 방법을 이해\n","\n","\n","워크플로(영어: workflow)는 작업 절차를 통한 정보 또는 업무의 이동을 의미하며, 작업 흐름이라고도 부른다. 더 자세히 말해, 워크플로는 작업 절차의 운영적 측면이다. 업무 흐름\n"]},{"cell_type":"markdown","metadata":{"id":"Th3QcHHRabe0"},"source":["### 자체 코드 검토\n","\n","가장 먼저 알아야 할 것은 자체 코드 검토가 절대적으로 필수라는 것\n","- 품질이 낮고 모두가 포기한 불일치가 너무 많은 코드베이스가 있다는 것 \n","- 절대적으로 필요할 때만 패치되고 추가로 개발된다는 것을 의미\n","\n","코드 검토를 하면 나중에 리팩토링하기 위해 할 일을 상당히 생략 가능\n","\n","이렇게 하면 코드가 허용 가능한 수준의 품질에 도달하고 비즈니스 로직에서 주의를 분산시킬 필요가 없음) -> 코드의 할 일을 감소\n","\n","코드품질 체크리스트\n","- 새 코드가 편집중인 파일의 지침과 스타일을 따릅니까?\n","- 진입점이 제한되어야하는 만큼 제한되어 있습니까?\n","- 변수 및 함수 이름이 설명적입니까?\n","- 오류 검사가 충분히 테스트되고 기록 되었습니까? \n","- 오류가 발생하면 한 줄로 전체 문제를 이해할 수 있습니까?\n","\n","\n","코드품질 체크리스트\n","- 새 코드가 편집중인 파일의 지침과 스타일을 따르나요?\n"," - 컨벤션이 오래되고 추악하며 최적이 아니더라도 모든 것을 고칠 시간이 없다면 현재의 컨벤션을 유지하는 것이 두 번째 스타일을 도입하는 것보다 더 나은 접근 방식 일 가능성이 높습니다.\n","\n","- 진입점이 제한되어야하는 만큼 제한되어 있습니까?\n"," - 모듈 / 클래스에 대한 진입 점에는 필요한만큼 많은 검사가 있어야합니다. 모든 비공개 함수와 비즈니스 로직 함수가 깨끗한 매개 변수로 작동하도록 보장하면 많은 상용구 코드가 제거되고 중요한 함수가 훨씬 작아지고 읽기 및 디버그가 쉬워집니다.\n","\n","- 변수 및 함수 이름이 설명 적입니까?\n"," - 길이가 길더라도 작고 알기 어려운 이름을 갖는 것보다 훨씬 더 나은 솔루션입니다. \"부패한\"코드베이스의 경우 향후 코드를 읽는 데 도움이됩니다. 새로 개발 된 코드의 경우 이름 자체를 더 짧지 만 동일한 의미로 다시 작업 할 수 있으므로 이름이 길면 결국 좋은 대안을 선택하는 데 도움이됩니다.\n","\n","- 오류 검사가 충분히 엄격하고 기록 되었습니까? \n"," - 모든 오류를 기록해야합니다. 또한 중복되지 않는 한 가능한 한 많은 검사를 수행하려고합니다. 같은 것을 두 번 확인하는 것은 의미가 없습니다. 한 번의 확인으로 여러 사례를 처리하십시오.\n","\n","- 오류가 발생하면 한 줄로 전체 문제를 이해할 수 있습니까?\n"," - 오류가 발생하면 로그는 설명이 너무 많아서 무엇이 잘못되었는지 이해하기 위해 추가 디버깅 정보가 필요하지 않습니다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"aYhvvFizabY1"},"source":["### 팀 코드 검토\n","\n","팀 코드 검토 - 코드 검토에 대한 보다 일반적인 접근 방식\n","- 프로세스 자체는 회사마다 다를 수 있지만 중요한 것은 피드백을 제공해야한다는 것\n","\n","건설적인 피드백을 제공\n","- 검토자는 코드가 수행해야하는 작업을 이해가 가능 해야함\n","- 복도 코드 검토 (임의 동료로부터 코드에 대한 피드백을 받는 경우)는 예외이지만 거의 사용되지 않음\n","\n","검토 대상자는 항상 좋은 의도를 가지고\n","- 당신과 리뷰어 모두 가능한 최고 품질의 코드를 제공하고자 할 가능성이 있다\n","- 코드에 대해 개인적으로 비판하지 말자\n","당신의 코드가 아니며 당신의 작업이 아니다\n","\n","코드의 목적은 문제를 해결하는 것임을 잊지 말것\n","- 리뷰어의 의견에 동의하지 않는 경우, 그들에게 접근하여 짧은 토론을 진행\n","- 이런 종류의 오해를 해결할 때 구두 의사 소통이 더 낫기 때문에 회사 정책이 아닌 한 이메일을 건너 뛰는 것이 좋음\n"]},{"cell_type":"markdown","metadata":{"id":"XnkjIRHUabQk"},"source":["### 코드 검토 소프트웨어\n","\n","코드 검토를 자동으로 수행하는 도구\n","- 일부 버그를 포착하고 \"XY 기호보다 긴 함수 이름 없음\"과 같은 규칙을 따를 수 있지만 \n","- 아직 유용하지는 않음\n","\n","extended code & style linters\n","\n","<center>\n","\n","<img src=\"https://code.visualstudio.com/assets/docs/editor/extension-gallery/more-button.png\" alt=\"Managing Extensions in Visual Studio Code\" width=\"40%\" /> \n","\n","<img src=\"https://blog.theodo.com/static/62afb3228fd4c3109c4be2953f7a30b0/ee604/Coding-style-banner.png\" alt=\"style linters\" width=\"40%\" /> \n","\n","</center>\n","\n","\n","일부는 순환적 복잡성 문제를 지적 할 수 있지만 비즈니스 오류를 포착 할 수 없음\n","\n","“어떤 것도 자체 코드 검토 또는 팀 코드 검토를 대체 할 수는 없습니다.”\n"]},{"cell_type":"markdown","metadata":{"id":"jyC9En-fabLF"},"source":["### 코드 리뷰를 건너 뛰지 마세요!!!!\n","\n","시간 문제와 가능한 한 빨리 릴리스하라는 압력이 코드 검토를 건너 뛰도록 유혹 할 수 있지만 이것은 항상 나쁜 생각 \n","\n","소프트웨어는 팀의 노력이며 팀으로서 가능한 최고 품질의 소프트웨어를 제공하는 것은 개발의 책임\n","\n","코드 검토는 작업의 품질을 개선하고 릴리스하는 기능의 성공 여부를 확인하는 가장 간단한 방법 중 하나\n","\n","10 분의 자체 코드 검토만으로도 프로덕션으로 전달되는 업무상 중요한 버그를 포착 할 수 있으니 품질을 타협하지 말고, 코드 검토를 수행할 것!\n"]},{"cell_type":"markdown","metadata":{"id":"oOQQ8koGbzwN"},"source":["### 개발자가 수행하는 품질 보증\n","\n","일반적으로 팀원인 개발자가 최종 사용자 역할을 하는 기능의 정확성을 테스트하는 경우\n","- 이유 : 이것은 부분적으로 경영진이 수동 QA 인력을 고용하기를 원하지 않기 때문에 가장 오래된 접근 방식 중 하나\n","- 최종 결과는 보통 매우 좋지 않음\n","\n","대부분의 경우 개발자는 이미 충분히 생각하고 있으며 개발 작업과 동일한 수준의 세부 사항으로 테스트를 처리하지 않음\n","- 이론적으로 일어나지 않을 것 같은 일은 정확히 일어나게 된다\n","\n","오늘날 개발자가 테스트를 수행하는 유일한 합법적인 방법\n","- 실제 QA를 위해 기능이 푸시되기 전에 개발자간에 내부적으로 수행 (종종 팀 리더가)\n","\n","\n","\n","품질 보증\n","- 품질 보증 (QA)은 많은 트렌드를 통과했습니다. 업계는 자동화 된 테스트로 향하고 있지만 흥미롭게도 수동 테스터를 위한 자리가 여전히 많이 남아 있습니다.\n","- 가장 인기있는 QA 접근 방식 중 일부를 분석하고 각 방식이 소프트웨어의 품질을 어떻게 향상시키는 지 살펴 보겠습니다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"osZYhqbtcKjs"},"source":["### 수동 QA (Manual QA)\n","\n","가장 오래된 형태의 QA\n","- 한 명 이상의 사람이 소프트웨어를 수동으로 테스트\n","- 그래픽 사용자 인터페이스가 있는 소프트웨어는 주로 수동으로 테스트\n","- 수동 테스트가 완전히 사라질 것이라는 예측은 틀림 (사용이 줄어들기는 했지만)\n","\n","시스템과 SW가 어떻게 사용되는지에 대한 지식은 금으로 환산할 만큼의 가치가 있음\n","- 인간이 수행 한 품질 보증이 완벽하지는 않지만 자동화 된 테스트와 달리 인간은 학습하기에 수개월 동안 시스템을 테스트 한 경험이 풍부한 품질 보증 전문가는 종종 개발자와 디자이너가 고려하지 않은 문제와 사례를 포착\n","\n","QA는 수동으로 수행되기 때문에 가장 유용한 사용자 경험과 사용성 피드백 중 일부는 숙련된 품질 보증 엔지니어로부터 얻을 수 있다\n","\n","이 피드백은 제품 개선에 대한 아이디어가 되므로 QA 엔지니어를 무시하지 말것\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"NzJvZMSIcKpO"},"source":["### 자동화 된 테스트\n","\n","훌륭한 자동화 된 테스트 : 한 번 작성한 다음 이유에 관계없이 필요한 만큼 여러 번 실행 가능\n","\n","자동화 된 테스트의 다양한 사용 사례\n","- 커밋하기 전에 코드를 확인하고 싶으십니까?\n","- 시스템이 올바르게 실행되고 있는지 확인하기 위해 프로덕션에서 정기적 인 테스트를 실행하고 싶으십니까? \n","- 마스터에서 병합 할 때마다 자동으로 실행하는 것은 어떻습니까? 해보세요!\n","\n","왜 모두가 자동 테스트를 수행하지 안나요? \n","- 안타깝게도 자동화된 테스트는 훌륭하지만 상당한 비용이 발생 (자동화 된 테스트는 작동하는 데 상당한 리소스가 필요)\n","- 자동화 된 테스트는 코드로 수행되므로 테스트 자체에 대한 품질 보증 및 테스트를 수행해야 하며 소프트웨어를 변경하려면 테스트도 함께 변경\n","- 자동화 된 테스트가 올바르게 수행된다면 투자 할 가치가 있다\n","\n","자동화 된 테스트 작성을 위한 체크리스트\n","- 중요한 기능에 대한 자동화 된 테스트를 수행하십시오.\n","- 코드가 추악하더라도 가능한 한 간단하게 만드십시오.\n","- 테스트에 대해 엄격한 테스트를 수행하여 모든 사용 사례에서 작동하고 오류을 반환하지 않는지 확인합니다.\n","- 주요 코드 또는 기능 변경으로 인해 폐기되는 테스트 수를 최소화하기 위해 기능이 거의 QA에있을 때 테스트 구현을 시작합니다.\n","\n","“하루가 끝날 때 마다 자동화 된 테스트는 프로젝트에 많은 가치를 추가하므로 개발자로서 이를 지지해야합니다.”\n","\n","\n","올바르게 수행하면 큰 이점이 있습니다. \n","유일한 단점은 리소스를 지속적으로 할당해야한다는 것입니다. \n","자동화 된 테스트는 대규모 프로젝트의 디버깅을 수백 시간 절약 할 수 있습니다. \n","TDD\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"MO8LQzCfnNpx"},"source":["<center>\n","\n","<img src=\"https://mblogthumb-phinf.pstatic.net/MjAxNzA4MTZfODUg/MDAxNTAyODkxOTc5MzQ5.n768pDtH1TPE57L5pod8PIO-2rUj_IWAzn-ZGIlWJxcg._E0DvbqgjI-XLV4O4jHBFRT7wvQe96vKhsOj9a4GFWQg.JPEG.wideeyed/capture_02.jpg?type=w2\" alt=\"젠킨스\" width=\"40%\" /> \n","\n","<img src=\"https://t1.daumcdn.net/cfile/tistory/262FE74A5790BBE910\" alt=\"젠킨스\" width=\"40%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"qv3Zsuq5cKmc"},"source":["### 기능 테스트\n","\n","기능 테스트와 비기능 테스트의 두 가지 주요 범주\n","\n","기능 테스트는 시스템이 수행하는 작업을 테스트하는 테스트 \n","- 단위 테스트 – 일반적으로 프로그래머가 수행하고 함수 및 클래스와 같은 소프트웨어 제품의 가장 작은 구성 요소를 테스트\n","- 통합 테스트 – 서로 다른 모듈과 하위 시스템이 함께 잘 작동하고 올바르게 통신하는지 검사 (특히 분산 애플리케이션에 효과적)\n","- 인수 테스트 – 클라이언트 또는 제품 소유자가 수행하고 시스템의 전체 기능을 테스트 (승인 테스트 하고도 하며 이를 성공적으로 통과하면 일반적으로 시스템이 프로덕션 릴리스에 가깝다는 것을 의미)\n","\n","단위 및 통합 테스트를 건너 뛰고 싶은 유혹에도 불구하고 대부분의 경우 이를 건너 뛰면 장기적으로 진행속도가 느려진다\n","\n","테스트 작업을 제대로 수행하면 프로젝트가 출시되어 버그가 발생으로 인한  \u000b다음 1~2 분기 생산성을 떨어 뜨리는 대신 매우 가벼운 유지 관리를 받게된다\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"KH3UHcpJocQ_"},"source":["<center>\n","\n","<img src=\"https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F99C4B04F5E0C33C3229BCB\" alt=\"고객이 확인하는, 인수 테스트(Acceptance Test)\" width=\"80%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"a7ZW-Qa2o8iQ"},"source":["### 비기능 테스트\n","\n","비기능 테스트는 시스템이 특정 작업을 수행하는 방법을 확인하는 테스트\n","- 성능 테스트 – 시스템이 정상 부하에서 작동하는 속도를 검사\n","- 스트레스 테스트 – 동시 사용자가 많을 때 시스템이 어떻게 작동하는지 확인\n","- 복구 테스트 – 시스템이 충돌에서 복구 할 수 있는지 여부를 확인. \n"," - 일반적으로 프로세스는 많은 문제없이 실행되기 시작하지만 스토리지 (파일 시스템 및 데이터베이스)는 복구 모드로 전환되고, 가끔 시스템을 작동시키는 유일한 방법은 백업을 사용하는 것이 될 수 있다\n","- 보안 테스트 – 보안 감사를 감당할 수 있는 경우 하나라도 받기를\n"," - 할 수 없다면 주어진 기술 (예 : 웹)에 대한 가장 일반적인 취약점이있는 목록이 많이 있으니이러한 보안 허점이 없는지 확인 \n","\n","기능 테스트가 대부분의 조직에서 비기능 테스트보다 우선시 되나\n","- 이는 각 테스트 유형이 특정 오류를 포착하기 위해 만들어졌고 \n","- 프로젝트는 일반적으로 조만간 모든 유형의 오류가 발생하기 때문에 매우 불행한 선택\n","\n","QA에 할당 된 리소스가 충분하지 않더라도 시스템이 프로덕션에 들어가기 전에 모든 주요 유형의 테스트를 수행할 것\n","\n"]},{"cell_type":"markdown","metadata":{"id":"RC960jifpQ0H"},"source":["### 소프트웨어 품질은 목적지가 아닌 여정입니다\n","\n","기능 테스트를 잊지 마세요\n","- 기능은 버그가 없고 빠르게 작동하며 사용자 친화적 일 수 있지만 여전히 좋은 기능이 아닐 것이고\n","- 더 중요한 질문은 : 해야 할 일을 수행하는지? 시스템에 유용한지? 가치를 더 하는지?\n","- 자주, 기능은 의도한 사용자와 몇 가지 피드백 루프를 거치는 경우 가능한 한 많은 가치를 가져 오지 못하는데 이것은 코드 리뷰나 훌륭한 QA 엔지니어가 해결할 수 있는 문제가 아니고, 회사 문화 수준에서 존재하는 것\n","\n","소프트웨어가 변경되는 한 품질을 유지하는 것은 끊임없는 싸움\n","\n","항상 간단하지는 않으며 항상 쉽지는 않지만 프로젝트를 활성화하고 기술 부채를 낮추는 것이 필수\n","\n","자체 코드 검토를 수행하는 것은 고품질 소프트웨어를 제공하는 가장 저렴하고 효과적인 방법 중 하나\n","\n","마찬가지로 자동화 된 린터 및 스타일 검사기를 사용하면 비즈니스 로직에 집중 가능\n","\n","하지만 그 이상으로도 동료를 참여 시키면 더 나은 아키텍처의 코드를 제공하는 데 도움이되며, 수동 및 자동 품질 보증을 수행하면 프로덕션에 발생하는 버그 수를 줄일 수 있다\n","\n","소프트웨어 개발자로서 코드의 품질을 높게 유지하는 것은 새로운 기능을 추가하는 것만큼이나 업무의 중요한 부분임을 항상 기억하길\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"JxTqtAxocKWT"},"source":["## 프로비저닝(provisioning) , 배포 및 유지 관리\n","\n","소프트웨어 개발을 시작할 때 소프트웨어가 출시되면 일이 끝났다고 생각하지만…<br>하, 하, 하, 틀렸습니다. 이때까지 시작에 불과합니다.\n","\n","프로비저닝(provisioning)은 사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해 두었다가 필요시 시스템을 즉시 사용할 수 있는 상태로 미리 준비해 두는 것을 말한다.\n","\n","무언가를 출시하기 전에 이를 위해 필요한 인프라가 있는지 확인하는 것이 프로비저닝이 시작되는 곳\n","\n","5부 목표 : \n","- 품질 보증 (QA) 단계 이후의 소프트웨어 제품 단계, 특히 프로비저닝, 배포 및 유지 관리에 대해 이해\n"]},{"cell_type":"markdown","metadata":{"id":"loz9wWgPpkJt"},"source":["### 프로비저닝 : 인프라 및 라이선스 얻기\n","\n","**설계 후 언제든지 프로비저닝을 수행 할 수 있다!!**\n","\n","프로비저닝은 프로덕션에 무언가를 시작할 때 필요한 모든 인프라와 라이선스를 얻는 것\n","\n","프로비저닝을 위한 두 가지 주요 옵션 : 소유 또는 임대 -> 어느 것을 선택?\n","\n","인프라를 소유해야하는 상황 (일부 프로젝트에서는 인프라를 소유해야함)\n","- 클라우드 스토리지 및 뱅킹 소프트웨어 유형의 요구 사항은 특정 도메인의 다른 법률에 의해 결정되고, 법률은 국가마다 다르므로 먼저 소유하고 시작 \n","- 정부 계약의 경우 데이터 보안에 대해 일부 제공 업체와 특별 계약을 체결 할 수 있지만 일반적인 규칙은 인프라를 소유하지 않으면 완전한 제어 권한이 없다는 것\n","\n","인프라 소유에 대한 보안 제약이나 계약상의 의무가 없다면? 여전히 소유해야할까?\n","\n","가장 먼저 고려해야 할 것은 비용\n","- 서버를 소유하는 데는 많은 비용이 들며 열 관리, 전기, 인터넷 등에 필요한 인프라를 갖추는 것도 매우 비싸고, 서버를 데이터 센터에 배치 할 수는 있지만 유지 관리하는 데 매달 많은 비용이 지불\n","\n","임대 인프라 (예 : Amazon, Google Cloud, DigitalOcean 등)는 분당 청구, 관리 도구를 제공하며 몇 번의 클릭만으로 거의 즉시 시스템을 시작, 중지, 복제, 파괴 또는 생성 할 수 있음\n","- 소유 된 인프라에 대해 이러한 유연성을 원하면 하나 이상의 시스템 관리자가 필요하며 속도는 비교할 때 부족할 수 있으나 훨씬 더 유연한 솔루션\n","- 임대 인프라의 또 다른 장점은 사용중인 많은 서비스를 미리 만들어진 솔루션으로 대체 할 수 있다는 것\n","- 예를 들어, 자체 데이터베이스 서버를 설정하는 대신 서비스로서의 데이터베이스를 사용할 수도 코드를 호스팅하는 대신 클라우드 기능 등을 사용할 수 있음\n","\n"]},{"cell_type":"markdown","metadata":{"id":"z0Hh7QE9qOP1"},"source":["<center>\n","\n","<img src=\"https://newsimg.sedaily.com/2020/03/14/1Z07397N6F_2.jpg\" alt=\"공동 소유임대주택\" width=\"40%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"2QH7EatypkPJ"},"source":["소유 하드웨어의 장점\n","- 모든 것을 완벽하게 제어 할 수 있다는 것 (하드웨어 및 가상 머신을 완벽하게 제어)\n","- 특정 RAID 조합이 필요? 특정 애플리케이션의 요구에 맞는 특정 네트워크 연결 스토리지가 필요?  \n","- 잠재적인 성능은 임대 하드웨어와 비교할 수 없으며 서버를 구축하는 하드웨어에 대한 제어는 타의 추종을 불허\n","- 원하는대로 변경 및 수정 가능 (임대 하드웨어에서 얻을 수없는 상당한 성능 이점을 제공)\n","\n","단점은 비용이 높은 것 (감시하고 그것을 유지하기 위해 추가적인 사람이 필요)\n","\n","임대 인프라의 주요 이점 은 모든 것이 자동화되고 분 단위로 청구된다는 것\n","- 초기 비용은 매우 낮으며 필요에 따라 확장 가능\n","- 많은 제공 업체가 자동 백업 및 재해 복구를 제공\n","\n","단점은 완벽하게 제어 할 수 없다는 것\n","- 대부분의 프로젝트에서 문제가 되지는 않지만 일부 프로젝트에서는 거래를 방해 할 수 있음\n","\n","스토리지가 많고 투자가 많은 프로젝트의 경우 작은 구성 및 설정 변경이 \u000b시스템의 성능과 처리량에 큰 영향을 미칠 수 있으므로 소유 하드웨어를 선택\n","\n","\n","\n","\n","개인적으로 저는 필요에 따라 인프라를 만들고 파괴 할 수 있으므로 개인 프로젝트에 임대 인프라를 사용 (물론 간단하게 홈 서버를 구축)\n","하나를 선택해야 한다면 부하가 일관되지 않은 계산이 많은 프로젝트를 위해 임대 인프라를 선택 : 이렇게하면 부하가 높을 때 애플리케이션에서 더 많은 서버를 추가하고 필요하지 않을 때 제거 할 수 있음\n","\n"]},{"cell_type":"markdown","metadata":{"id":"RV1t-ixtpkrt"},"source":["하드웨어 외에 인프라 프로비저닝시 고려해야 할 사항\n","- 모든 도메인을 구입했으며 모든 도메인에 대한 https 인증서가 있습니까?\n","- 서버간에 내부 네트워크를 설정 했습니까? 안전합니까?\n","- 필요에 따라 확장 할 수있는 라이센스를 구입 했습니까? (일반적으로 개발 중 서비스 라이선스는 저렴하지만 프로덕션을 위해서는 업그레이드가 필요)\n","\n","프로비저닝은 프로젝트 성공의 핵심\n","- 개발과 병행하여 수행 가능\n","- 소프트웨어 요구 사항이 변경되면 프로비저닝 요구 사항도 변경\n","- 소프트웨어에서와 마찬가지로 변경 될 수 있는 사고 방식으로 구축하는 것이 중요\n"]},{"cell_type":"markdown","metadata":{"id":"qyV-1uempkvd"},"source":["### 배포 : 온라인으로 코드, 라이브러리 및 서비스 받기\n","\n","일반적인 소프트웨어 제품\n","- 소스 코드, 타사 라이브러리 및 프레임 워크 (정적 파일, 바이너리), 타사 서비스\n","\n","세 가지 배포 시나리오\n","- 종속성 추가 또는 제거, 버전 업데이트, 구성 변경\n","- 각 시나리오에는 실행을 위해 약간 다른 단계가 필요\n","\n","변경 사항을 즉시 적용하려면 정확히 무엇을 해야하는지 아는 것이 가장 중요 \n","- 그렇지 않으면 손상된 빌드를 실행할 수 있음\n","\n","\n","이론적으로 배포는 소스 코드를 이동하고 서비스를 다시 시작하는 것이기 때문에 더 쉬운 작업 중 하나 여야하지만 실제로는 어렵다. 아주. 매우. 왜? -> 주된 이유는 개발 문화\n","\n","지금은 자동화 된 솔루션이 있고 배포가 최우선 순위로 간주되지만 항상 그런 것은 아니었음\n","- 오늘날까지 많은 회사가 수동 배포를 수행하거나 맞춤형 자체 제작 솔루션을 사용\n","- 수동 배포 및 사용자 지정 자체 제작 솔루션의 단점은? 효과가 없는 이유는?\n"]},{"cell_type":"markdown","metadata":{"id":"Hu6XNaQ_pko8"},"source":["<center>\n","\n","<img src=\"https://image.yes24.com/momo/TopCate1232/MidCate005/123142371.jpg\" alt=\"실용주의 프로그래머\" width=\"40%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"bjw0IX_TpkMX"},"source":["잘못된 배포의 결과\n","- 이로 인해 다운 타임이 발생 하고 비용을 잃을 수 있음\n","- 더 나쁜 것은 서버의 절반을 업그레이드하고 동일한 소프트웨어의 두 가지 실행 버전을 가지고 있기 때문에 때로는 디버깅이 불가능한 정말 불쾌한 버그로 이어질 수 있음\n","- 또는 모든 데이터를 잃고 백업에서 복원해야 할 수도 있음\n","- 더 많은 이유를 나열 할 수 있지만..\n","- 배포 중 문제는 최종 사용자에게 피해를 입히고 결과적으로 조직에 피해를주기 때문에 모든 비용을 들이지 않고 피해야할 부분\n","\n","육체 노동은 오류가 발생하기 쉬운\n","- 50 대 또는 100 대의 컴퓨터에 새 버전의 소프트웨어를 배포해야하는 것은 자동화 된 경우보다 수동으로 수행하는 경우 훨씬 더 많은 시간이 걸림\n","- 프로그램이 배포를 실행할 때 오류 가능성도 훨씬 적음\n","\n","자체 배포솔루션은 특정 소프트웨어의 요구 사항에 적합하기 때문에 훌륭하지만 주요 문제는 일반적으로 철저한 테스트를 거치지 않았고 지속적으로 지원되지 않는다는 것\n","\n","배포가 작동하지 않거나 추가해야하는 새 서비스가 있기 때문에 필요할 때 변경이 필요 \n","\n","“완벽한 세상에서는 편집하기 전에 코드를 조사해야한다는 것을 알고 있지만 실제로는 그렇지 않습니다.”\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tCkaP60qpkAE"},"source":["마지막 옵션은 표준화 된 솔루션을 사용하는 것\n","- Ansible : 현재 사용 가능한 최상의 옵션 중 하나\n"," - Ansible은 클라우드 프로비저닝, configuration 관리, 어플리케이션 배포, 인프라-서비스 오케스트레이션 및 여러 기타 IT 요구사항을 자동화 하는 IT 자동화 엔진\n"," - Ansible에서 서버를 설명, 메타 데이터를 서버에 추가, 서버가 속한 그룹을 추가, 마지막으로 이러한 그룹 / 역할에 대해 작업을 실행\n","\n","두 가지 작업 범주\n","- 표준 작업 : 서비스 다시 시작, 리포지토리에서 코드 가져 오기, 패키지 설치, 파일 생성 및 편집, 로그 회전 등\n","- 사용자 지정 작업 : 예를 들어 정리 스크립트 실행의 경우\n","\n","스크립트에 배포 절차를 포함하면 최대 가동 시간을 보장하기 위해 궁극적으로 소프트웨어에 통합하려는 모든 것을 재현, 추적, 로깅 및 모니터링 할 수 있음\n","\n","솔루션을 개발하지 않기 때문에 이 소프트웨어에 대한 대부분의 유지 관리 작업이 자동으로 수행\n","\n","또한 사용중인 제품의 사용자 기반은 때때로 수십만 명의 사용자가 될 수 있으므로 대부분의 버그는 테스트 중에 수정되며 자체 솔루션과 비교할 때 전반적으로 훨씬 더 안정적인 배포가 가능\n","\n"]},{"cell_type":"markdown","metadata":{"id":"0k5r2CNHsEYE"},"source":["<center>\n","\n","<img src=\"https://media.vlpt.us/images/hanblueblue/post/f0a07b6f-ba5c-4cc1-b33b-ef59292602b6/Ansible.png\" alt=\"Ansible (앤서블)\" width=\"40%\" /> \n","\n","<img src=\"https://www.jonathan-petitcolas.com/img/posts/github-pages/github-pages.png\" alt=\"github\" width=\"40%\" /> \n","\n","<img src=\"https://cdn1.vogel.de/unsafe/fit-in/1000x0/images.vogel.de/vogelonline/bdb/1426400/1426494/original.jpg\" alt=\"docker\" width=\"40%\" /> \n","\n","<img src=\"https://subicura.com/assets/article_images/2019-05-19-kubernetes-basic-1/kubernetes-logo.png\" alt=\"kubernetes\" width=\"40%\" /> \n","\n","<img src=\"https://venturebeat.com/wp-content/uploads/2020/03/8a06547d-965d-4981-806a-6c11d559b893-1-e1583173705409.png?w=1200&strip=all\" alt=\"kubeflow\" width=\"40%\" /> \n","\n","</center>"]},{"cell_type":"markdown","metadata":{"id":"Z8lFfGc8tDdk"},"source":["### 유지 관리 : 버그 수정, 보안 패치 및 향후 교정\n","\n","프로젝트가 드디어 출시되었습니다. 최종 사용자가 만족합니다. 버그가 나타날 때마다 해결되고 며칠 내에 수정 사항이 배포됩니다.\n"," \n","추가 개발을위한 변경 요청이 없더라도 모니터링하고 유지 관리해야하는 몇 가지 사항이 있음\n","\n","첫 번째는 하드웨어 자체\n","- 하드웨어가 없으면 실행중인 시스템이 없음\n","- 지속적인 작업이 필요하지 않으나 오히려 무언가가 고장 나면 빨리 고쳐야함\n","\n","두 번째는 시스템이 성장함에 따라 성장을 유지할 수 있는지 확인\n","- 보다 강력한 데이터베이스와 애플리케이션 서버를 추가해야 함을 의미\n","- 또는 더 높은 대역폭 네트워크가 필요\n","- 필요한 사항에 관계없이 시스템은 추가 될 추가 하드웨어를 지원해야함\n","- 확장성은 오늘날 마이크로 서비스 아키텍처가 선호되는 주요 이유 중 하나\n","\n","세 번째는 운영 체제 상태\n","- 가장 중요한 것 중 하나는 보안 패치를 최신 상태로 유지하는 것\n","- 또한 디스크 공간, RAM, CPU 및 네트워크 대역폭과 같은 일부 핵심 메트릭을 모니터링\n","- 운영 체제를 건강하게 유지하고 환경을 안전하게 유지\n","- 중요한 것은 그것을 무시하지 않고 명심하는 것\n"]},{"cell_type":"markdown","metadata":{"id":"LSSCge64ttlc"},"source":["- 한 계층 위로 이동하면 지원 서비스 및 라이브러리 (데이터베이스, 웹 서버 및 프레임 워크)에 도달\n","- 보안 패치 및 버그 수정을 통해 최신 상태 유지\n","- 이것은 최소한의 것, 최적의 솔루션은 항상 최신 버전으로 업데이드하는 것\n","- 안타깝게도 많은 프로젝트에는 많은 종속성이 있고, 종속성이 업그레이드되면 소프트웨어의 여러 부분이 손상.이 경우 자동화 된 테스트 도구 모음을 사용하면 프로덕션에 회귀를 도입하지 않고도 문제를 파악하고 수정이 가능. 다른 방법은 수동 QA를 사용하여 버그를 찾는 것이지만 속도가 느리고 버그가 누락 될 가능성이 높음\n","\n","네 번째는 소프트웨어 유지 관리\n","- 99%의 경우 버그 수정은 적어도 처음 12-24 개월 동안은 초기 거래의 일부\n","- 변경 및 기능 요청은 조금 더 복잡해서 개발이 필요함에도 불구하고 유지 보수 단계의 일부\n","- 코드를 유지 관리 할 수 없고 테스트 없이는 막대한 리소스를 사용하지 않고 출시 후 수행 할 수 있는 작업이 거의 없기 때문에 작성 품질과 유지 관리 가능한 코드가 핵심\n","- 릴리스 후 변경 요청 및 기능을 작성하는 팀은 소프트웨어의 초기 버전을 작성한 팀과 다르다\n","- 이는 주로 소프트웨어 회사의 높은 이직률 때문\n","\n","- “문서화, 빌드 스크립트 및 테스트는 새로운 개발자에게 필요한 학습 리소스를 줄이고 합리적인 시간 내에 새로운 기능을 제공하는 데 도움이 됩니다.”\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ISpXo9bVt6kj"},"source":["### 끊임없이 변화하는 소프트웨어\n","\n","요구 사항은 필연적으로 변경 될 것입니다. 소프트웨어 제품에 대한 작업은 모든 기술이 동결되지 않는 한 끝나지 않을 것입니다. 소프트웨어로 작업 할 때 코드, 하위 시스템 및 하드웨어를 확장 가능하게 만드는 것이 중요합니다.\n","\n","안정적인 릴리스 프로세스를 사용하면 버그 수정을 배포 할 때의 위험이 크게 줄어 듭니다. 테스트와 고품질 표준은 소프트웨어가 가능한 최대 가동 시간을 갖도록 보장합니다.\n","\n","어렵고 복잡하게 느껴질 수도 있지만 장기적으로 가치가 있고 경력에 매우 긍정적인 영향을 미칠 수 있는 시간과 노력의 투자입니다.\n"]},{"cell_type":"markdown","metadata":{"id":"FqAMoexvt_mN"},"source":["## 정 리\n","\n","- 계획 및 분석 : 애자일, 사용자스토리\n","\n","- 디자인 : 마이크로서비스, 클라우드\n","\n","- 개발 : 올바른 사고 방식, 도구 및 전략\n","\n","- 코드 검토 및 품질 보증 : Test, Test, Test\n","\n","- 프로비저닝, 배포 및 유지 관리 : START !!\n"]},{"cell_type":"markdown","metadata":{"id":"USMJkNr2uis9"},"source":["<center>\n","\n","# Thank you\n","\n","modern-developer\n","\n","</center>\n"]}]}
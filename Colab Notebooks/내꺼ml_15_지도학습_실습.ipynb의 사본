{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"내꺼ml_15_지도학습_실습.ipynb의 사본","provenance":[{"file_id":"139FmJrtR7tE4S8y7tmKD4jsfRAtKH2oW","timestamp":1618539597368}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"0zl0dLFHe6kF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619358629377,"user_tz":-540,"elapsed":16551,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"e5aab0f6-1dbe-40ca-b58b-851f086bbf1b"},"source":["# 구글드라이브 연동\n","from google.colab import drive\n","drive.mount('/gdrive', force_remount=True)\n","\n","# 구글 드라이브 파일 확인\n","!ls '/gdrive/My Drive/temp/'\n","\n","# 반복되는 드라이브 경로 변수화\n","drive_path = '/gdrive/My Drive/temp/'"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /gdrive\n"," 매수종목1.txt\t\t   exmaple.docx\t\t  'stock price.xlsx'\n"," 매수종목2.txt\t\t   height_weight.txt\t  'stock valuation.xlsx'\n"," abalone.txt\t\t   HelloWorld.xlsx\t   test.db.db\n"," adult.data\t\t   little-char.png\t   test.txt\n"," auto-mpg.csv\t\t   ml-latest-small\t   titanic.xls\n"," bmi_500.csv\t\t   population_number.csv   tmdb_5000_credits.csv\n"," citibike.csv\t\t   ram_price.csv\t   tmdb_5000_movies.csv\n"," creditcard.csv\t\t   ratings_small.txt\t   Traffic_Accident_2017.csv\n","'투표 결과.csv'\t\t   ratings_test.txt\t   train.csv\n"," 매수종목.csv\t\t   ratings_train.txt\t  'UCI HAR Dataset'\n"," database\t\t   sample1.pdf\t\t  'UCI HAR Dataset.zip'\n"," data_mine.csv\t\t   sample2.pdf\t\t   user_id_mean.csv\n"," data_population.csv\t   sample_merge.pdf\t   wine.csv\n"," data_studentlist_en.csv   sample.xlsx\t\t   주가데이터.xlsx\n"," demo.docx\t\t   score.csv\t\t   남북한발전전력량.xlsx\n"," diabetes.csv\t\t   seoul.html\n"," example.docx\t\t   stock-data.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HO2HMxozgQFH","executionInfo":{"status":"ok","timestamp":1619358630410,"user_tz":-540,"elapsed":1030,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 경고메시지 무시\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"l_8nPQtBf-oU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619358640851,"user_tz":-540,"elapsed":10435,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"5fb696cc-443d-437f-abda-c8f98582bdeb"},"source":["!apt -qq -y install fonts-nanum\n"," \n","import matplotlib.font_manager as fm\n","import matplotlib.pyplot as plt\n","fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n","font = fm.FontProperties(fname=fontpath, size=10)\n","fm._rebuild()\n"," \n","# 그래프에 retina display 적용\n","%config InlineBackend.figure_format = 'retina'\n"," \n","# Colab 의 한글 폰트 설정\n","plt.rc('font', family='NanumBarunGothic') "],"execution_count":4,"outputs":[{"output_type":"stream","text":["The following package was automatically installed and is no longer required:\n","  libnvidia-common-460\n","Use 'apt autoremove' to remove it.\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 34 not upgraded.\n","Need to get 9,604 kB of archives.\n","After this operation, 29.5 MB of additional disk space will be used.\n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 160690 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n","Unpacking fonts-nanum (20170925-1) ...\n","Setting up fonts-nanum (20170925-1) ...\n","Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_JzAw78ugSqd","executionInfo":{"status":"ok","timestamp":1619358642981,"user_tz":-540,"elapsed":2128,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["\n","import numpy as np\n","import pandas as pd\n"," \n","from sklearn.preprocessing import OneHotEncoder\n","\n","from sklearn.model_selection import ShuffleSplit\n","from sklearn.model_selection import cross_val_score\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV\n","\n","from sklearn.svm import SVC\n","from sklearn.preprocessing import MinMaxScaler\n","\n","import os"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ET59IDf6iPfw"},"source":["# 지도학습 실습"]},{"cell_type":"markdown","metadata":{"id":"oJCDMNjuiwau"},"source":["## 피마 인디언 당뇨병 예측\n","\n","당뇨병 여부를 판단하는 머신러닝 예측 모델을 수립\n","\n","- [데이터세트 다운로드](https://www.kaggle.com/uciml/pima-indians-diabetes-database)\n","\n","- 다운받은 archive.zip 압축 파일에서 diabetes.csv 을 이용하거나 또는 수업자료 temp 폴더에서 diabetes.csv을 이용\n","\n","- 모델 적용 후 성능 평가 지표를 확인 (오차행렬, 정확도, 정밀도, 재현율, F1스코어, AUC)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D7bPbjbEgxIk","executionInfo":{"status":"ok","timestamp":1618792223350,"user_tz":-540,"elapsed":596,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"3043399e-69d4-4971-ec9a-3803c7d591b1"},"source":["# 항상 인포와 decribe를 해봐라# 항상 인포와 decribe를 해봐라\n","\n","data = pd.read_csv(drive_path + 'diabetes.csv')\n","data.info()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 768 entries, 0 to 767\n","Data columns (total 9 columns):\n"," #   Column                    Non-Null Count  Dtype  \n","---  ------                    --------------  -----  \n"," 0   Pregnancies               768 non-null    int64  \n"," 1   Glucose                   768 non-null    int64  \n"," 2   BloodPressure             768 non-null    int64  \n"," 3   SkinThickness             768 non-null    int64  \n"," 4   Insulin                   768 non-null    int64  \n"," 5   BMI                       768 non-null    float64\n"," 6   DiabetesPedigreeFunction  768 non-null    float64\n"," 7   Age                       768 non-null    int64  \n"," 8   Outcome                   768 non-null    int64  \n","dtypes: float64(2), int64(7)\n","memory usage: 54.1 KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rMJKmeAKgxFV"},"source":["X = data.iloc[:, :-1]\n","y = data.iloc[:, -1]\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eIRcaK1ygxCY","executionInfo":{"status":"ok","timestamp":1618792469420,"user_tz":-540,"elapsed":609,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"9379aef1-b944-4255-cc8f-43c9f6344182"},"source":["model_rg = RandomForestClassifier(n_estimators=100).fit(X_train,y_train)\n","\n","\n","model_rg.predict(X_test)\n"," \n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0,\n","       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0,\n","       1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,\n","       0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n","       0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0])"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UJ1NmZCGgw4Y","executionInfo":{"status":"ok","timestamp":1618792833749,"user_tz":-540,"elapsed":787,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"30577d3a-c687-4506-a3be-ce3f0aaa5e9c"},"source":["# 데이터 전처리 과정\n","# 값이 0인 데이터가 너무 많았다.ㅎ.ㅎ\n","\n","data.value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin  BMI   DiabetesPedigreeFunction  Age  Outcome\n","17           163      72             41             114      40.9  0.817                     47   1          1\n","15           136      70             32             110      37.1  0.153                     43   1          1\n","2            87       58             16             52       32.7  0.166                     25   0          1\n","                      0              23             0        28.9  0.773                     25   0          1\n","             85       65             0              0        39.6  0.930                     27   0          1\n","                                                                                                            ..\n","5            106      82             30             0        39.5  0.286                     38   0          1\n","             105      72             29             325      36.9  0.159                     28   0          1\n","             104      74             0              0        28.8  0.153                     48   0          1\n","             103      108            37             0        39.2  0.305                     65   0          1\n","0            57       60             0              0        21.7  0.735                     67   0          1\n","Length: 768, dtype: int64"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"0rXfeZ_EkOSC"},"source":["# 특성의 0인 값을 평균으로 수정\n","zero_features = ['Glucose', 'BloodPressure','SkinThickness','Insulin','BMI']\n","\n","# data[zero_features].mean()\n","data[zero_features] = data[zero_features].replace(0, data[zero_features].mean())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yvfm96tOkOoe","executionInfo":{"status":"ok","timestamp":1618793214751,"user_tz":-540,"elapsed":1145,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"b334c13d-421f-4391-dd5a-588fb92ed5bb"},"source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report\n","X = data.iloc[:, :-1]\n","y = data.iloc[:, -1]\n","\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, stratify=y)\n","\n","model_lr = LogisticRegression(max_iter=1000).fit(X_train, y_train)\n","pred = model_lr.predict(X_test)\n","\n","print( classification_report(y_test, pred) )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.79      0.88      0.83       125\n","           1       0.71      0.55      0.62        67\n","\n","    accuracy                           0.77       192\n","   macro avg       0.75      0.72      0.73       192\n","weighted avg       0.76      0.77      0.76       192\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OLRqR1DVkOvh"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3ZH3pVjokO07"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q8yrysJQkO6P"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XwtX2aSwkO9y"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0oIuzJWUkPCe"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZBDfjTe-kPGp"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KNSGIScCkPK5"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZiAsVM_SkPQM"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8ODks_01goFj"},"source":["여기부터 내 코드"]},{"cell_type":"code","metadata":{"id":"0GKT9I2z7MV7"},"source":["[i for i in range(2,10)]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4i62ny-E7oCs"},"source":["data = pd.read_csv(drive_path+\"diabetes.csv\")\n","\n","data.info()\n","\n","data.describe()\n","\n","data.head(n=10)\n","\n","# data[\"Outcome\"].value_counts()\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MC2-bm_Llu_f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618550369373,"user_tz":-540,"elapsed":24137,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"3dbda00c-b668-4bf3-8b9f-aec85b444123"},"source":["# 랜덤포레스트 써보자.\n","\n","\n","\n","X = data.iloc[:,:-1]\n","y = data.iloc[:,-1]\n","\n","X_train, X_test, y_train, y_test = train_test_split(X,\n","                                                    y,\n","                                                    test_size=0.2,\n","                                                    stratify = y,\n","                                                    random_state=0)\n","\n","#모델 학습\n","param_grid={'max_depth':[i for i in range(2,10)], 'n_estimators' : [5,10,50,100]}\n","\n","model_db=RandomForestClassifier().fit(X_train,y_train)    # 그냥 점수\n","\n","\n","ss = ShuffleSplit(n_splits=10, train_size=0.5, test_size=0.3) # 교차검증\n","grid_search_rf = GridSearchCV(RandomForestClassifier(), param_grid=param_grid, cv=ss, return_train_score=True)\n","grid_search_rf.fit(X_train, y_train)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=ShuffleSplit(n_splits=10, random_state=None, test_size=0.3, train_size=0.5),\n","             error_score=nan,\n","             estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n","                                              class_weight=None,\n","                                              criterion='gini', max_depth=None,\n","                                              max_features='auto',\n","                                              max_leaf_nodes=None,\n","                                              max_samples=None,\n","                                              min_impurity_decrease=0.0,\n","                                              min_impurity_split=None,\n","                                              min_samples_leaf=1,\n","                                              min_samples_split=2,\n","                                              min_weight_fraction_leaf=0.0,\n","                                              n_estimators=100, n_jobs=None,\n","                                              oob_score=False,\n","                                              random_state=None, verbose=0,\n","                                              warm_start=False),\n","             iid='deprecated', n_jobs=None,\n","             param_grid={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9],\n","                         'n_estimators': [5, 10, 50, 100]},\n","             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n","             scoring=None, verbose=0)"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ni_Dg8LL8u3Q","executionInfo":{"status":"ok","timestamp":1618550253891,"user_tz":-540,"elapsed":4367,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"13732f30-58d1-4f9b-b451-fd43d92e9866"},"source":["#SVM 모델에 써보자.\n","\n","\n","X = data.iloc[:,:-1]\n","y = data.iloc[:,-1]\n","\n","X_train, X_test, y_train, y_test = train_test_split(X,\n","                                                    y,\n","                                                    test_size=0.2,\n","                                                    stratify = y,\n","                                                    random_state=0)\n","\n","\n","scaler = MinMaxScaler()\n","scaler.fit(X_train)\n","X_train_scaled = scaler.transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","\n","param_grid_SVM={'C':np.logspace(-4,4,10), 'gamma':np.logspace(-4,4,10)}\n","\n","\n","ss = ShuffleSplit(n_splits=3, train_size=0.5, test_size=0.3) # 교차검증\n","grid_search_SVM = GridSearchCV(SVC(), param_grid=param_grid_SVM, cv=ss, return_train_score=True)\n","\n","# print(X_train_scaled)\n","# print(np.array(X_train_scaled).shape)\n","grid_search_SVM.fit(X_train_scaled, y_train)\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=ShuffleSplit(n_splits=3, random_state=None, test_size=0.3, train_size=0.5),\n","             error_score=nan,\n","             estimator=SVC(C=1.0, break_ties=False, cache_size=200,\n","                           class_weight=None, coef0=0.0,\n","                           decision_function_shape='ovr', degree=3,\n","                           gamma='scale', kernel='rbf', max_iter=-1,\n","                           probability=False, random_state=None, shrinking=True,\n","                           tol=0.001, verbose=False),\n","             iid='depreca...\n","             param_grid={'C': array([1.00000000e-04, 7.74263683e-04, 5.99484250e-03, 4.64158883e-02,\n","       3.59381366e-01, 2.78255940e+00, 2.15443469e+01, 1.66810054e+02,\n","       1.29154967e+03, 1.00000000e+04]),\n","                         'gamma': array([1.00000000e-04, 7.74263683e-04, 5.99484250e-03, 4.64158883e-02,\n","       3.59381366e-01, 2.78255940e+00, 2.15443469e+01, 1.66810054e+02,\n","       1.29154967e+03, 1.00000000e+04])},\n","             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n","             scoring=None, verbose=0)"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ViS2JYNv54SC","executionInfo":{"status":"ok","timestamp":1618550391567,"user_tz":-540,"elapsed":727,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"261c4fcb-ae26-4de7-f12f-d8c6ccb0bdb7"},"source":["#평가\n","print(model_db.score(X_train,y_train),model_db.score(X_test,y_test))\n","\n","print(grid_search_rf.score(X_train,y_train), grid_search_rf.score(X_test,y_test))     ##랜포\n","\n","print(grid_search_SVM.score(X_train_scaled , y_train), grid_search_SVM.score(X_test_scaled ,  y_test)) ##SVM"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1.0 0.8181818181818182\n","0.8192182410423453 0.7857142857142857\n","0.7752442996742671 0.7662337662337663\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UXApm033lv3f"},"source":["## 사용자 행동 인식 동작 예측\n","\n","스마트폰 센서를 이용한 사용자 행동 인식 데이터 세트를 기반으로 어떠한 동작인지 예측하는 머신러닝 모델을 수립\n","\n","- [UCI HAR Dataset.zip 데이터세트 다운로드](http://archive.ics.uci.edu/ml/machine-learning-databases/00240/)\n","\n","- 다운받은 'UCI HAR Dataset.zip' 압축 파일을 이용하거나 또는 수업자료 temp 폴더에서 human_activity 폴더에 있는 자료를 이용\n","\n","- 압축파일 폴더와 파일설명\n","```\n","/test             -> 테스트 용도의 데이터 세트\n","/train            -> 학습 용도의 데이터 세트\n","activity_labels.txt -> 동작 레이블 값에 대한 설명\n","features.txt      -> 특성 인덱스와 특성이름\n","features_info.txt -> 특성에 대한 간략 설명\n","README.txt        -> 데이터 세트에 대한 설명\n","```\n","\n","- Pandas를 이용하여 데이터 분석 및 전처리\n","- GridSearch를 이용한 평균 정확도와 최적의 하이퍼파라미터를 확인\n"]},{"cell_type":"code","metadata":{"id":"M4OaAR6brRpm","colab":{"base_uri":"https://localhost:8080/","height":278},"executionInfo":{"status":"ok","timestamp":1618792702965,"user_tz":-540,"elapsed":13449,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"6ee22d03-4825-46e2-acd0-428a456e6350"},"source":["# 탭으로 분리된(tsv) .txt 텍스트파일 불러오기\n","\n","os.getcwd()\n","\n","features = pd.read_csv (drive_path+'UCI HAR Dataset//features.txt',sep=\"\\s+\", engine='python', header=None)\n","X_train = pd.read_csv (drive_path+'UCI HAR Dataset//train//X_train.txt',sep=\"\\s+\", engine='python', header=None)\n","y_train = pd.read_csv (drive_path+'UCI HAR Dataset//train//y_train.txt',sep=\"\\s+\", engine='python', header=None)\n","X_test = pd.read_csv (drive_path+'UCI HAR Dataset//test//X_test.txt',sep=\"\\s+\", engine='python', header=None)\n","y_test = pd.read_csv (drive_path+'UCI HAR Dataset//test//y_test.txt',sep=\"\\s+\", engine='python', header=None)\n","\n","X_train.columns= features.iloc[:,1]\n","X_test.columns= features.iloc[:,1]\n","\n","X_train.head()\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>1</th>\n","      <th>tBodyAcc-mean()-X</th>\n","      <th>tBodyAcc-mean()-Y</th>\n","      <th>tBodyAcc-mean()-Z</th>\n","      <th>tBodyAcc-std()-X</th>\n","      <th>tBodyAcc-std()-Y</th>\n","      <th>tBodyAcc-std()-Z</th>\n","      <th>tBodyAcc-mad()-X</th>\n","      <th>tBodyAcc-mad()-Y</th>\n","      <th>tBodyAcc-mad()-Z</th>\n","      <th>tBodyAcc-max()-X</th>\n","      <th>tBodyAcc-max()-Y</th>\n","      <th>tBodyAcc-max()-Z</th>\n","      <th>tBodyAcc-min()-X</th>\n","      <th>tBodyAcc-min()-Y</th>\n","      <th>tBodyAcc-min()-Z</th>\n","      <th>tBodyAcc-sma()</th>\n","      <th>tBodyAcc-energy()-X</th>\n","      <th>tBodyAcc-energy()-Y</th>\n","      <th>tBodyAcc-energy()-Z</th>\n","      <th>tBodyAcc-iqr()-X</th>\n","      <th>tBodyAcc-iqr()-Y</th>\n","      <th>tBodyAcc-iqr()-Z</th>\n","      <th>tBodyAcc-entropy()-X</th>\n","      <th>tBodyAcc-entropy()-Y</th>\n","      <th>tBodyAcc-entropy()-Z</th>\n","      <th>tBodyAcc-arCoeff()-X,1</th>\n","      <th>tBodyAcc-arCoeff()-X,2</th>\n","      <th>tBodyAcc-arCoeff()-X,3</th>\n","      <th>tBodyAcc-arCoeff()-X,4</th>\n","      <th>tBodyAcc-arCoeff()-Y,1</th>\n","      <th>tBodyAcc-arCoeff()-Y,2</th>\n","      <th>tBodyAcc-arCoeff()-Y,3</th>\n","      <th>tBodyAcc-arCoeff()-Y,4</th>\n","      <th>tBodyAcc-arCoeff()-Z,1</th>\n","      <th>tBodyAcc-arCoeff()-Z,2</th>\n","      <th>tBodyAcc-arCoeff()-Z,3</th>\n","      <th>tBodyAcc-arCoeff()-Z,4</th>\n","      <th>tBodyAcc-correlation()-X,Y</th>\n","      <th>tBodyAcc-correlation()-X,Z</th>\n","      <th>tBodyAcc-correlation()-Y,Z</th>\n","      <th>...</th>\n","      <th>fBodyBodyAccJerkMag-energy()</th>\n","      <th>fBodyBodyAccJerkMag-iqr()</th>\n","      <th>fBodyBodyAccJerkMag-entropy()</th>\n","      <th>fBodyBodyAccJerkMag-maxInds</th>\n","      <th>fBodyBodyAccJerkMag-meanFreq()</th>\n","      <th>fBodyBodyAccJerkMag-skewness()</th>\n","      <th>fBodyBodyAccJerkMag-kurtosis()</th>\n","      <th>fBodyBodyGyroMag-mean()</th>\n","      <th>fBodyBodyGyroMag-std()</th>\n","      <th>fBodyBodyGyroMag-mad()</th>\n","      <th>fBodyBodyGyroMag-max()</th>\n","      <th>fBodyBodyGyroMag-min()</th>\n","      <th>fBodyBodyGyroMag-sma()</th>\n","      <th>fBodyBodyGyroMag-energy()</th>\n","      <th>fBodyBodyGyroMag-iqr()</th>\n","      <th>fBodyBodyGyroMag-entropy()</th>\n","      <th>fBodyBodyGyroMag-maxInds</th>\n","      <th>fBodyBodyGyroMag-meanFreq()</th>\n","      <th>fBodyBodyGyroMag-skewness()</th>\n","      <th>fBodyBodyGyroMag-kurtosis()</th>\n","      <th>fBodyBodyGyroJerkMag-mean()</th>\n","      <th>fBodyBodyGyroJerkMag-std()</th>\n","      <th>fBodyBodyGyroJerkMag-mad()</th>\n","      <th>fBodyBodyGyroJerkMag-max()</th>\n","      <th>fBodyBodyGyroJerkMag-min()</th>\n","      <th>fBodyBodyGyroJerkMag-sma()</th>\n","      <th>fBodyBodyGyroJerkMag-energy()</th>\n","      <th>fBodyBodyGyroJerkMag-iqr()</th>\n","      <th>fBodyBodyGyroJerkMag-entropy()</th>\n","      <th>fBodyBodyGyroJerkMag-maxInds</th>\n","      <th>fBodyBodyGyroJerkMag-meanFreq()</th>\n","      <th>fBodyBodyGyroJerkMag-skewness()</th>\n","      <th>fBodyBodyGyroJerkMag-kurtosis()</th>\n","      <th>angle(tBodyAccMean,gravity)</th>\n","      <th>angle(tBodyAccJerkMean),gravityMean)</th>\n","      <th>angle(tBodyGyroMean,gravityMean)</th>\n","      <th>angle(tBodyGyroJerkMean,gravityMean)</th>\n","      <th>angle(X,gravityMean)</th>\n","      <th>angle(Y,gravityMean)</th>\n","      <th>angle(Z,gravityMean)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.288585</td>\n","      <td>-0.020294</td>\n","      <td>-0.132905</td>\n","      <td>-0.995279</td>\n","      <td>-0.983111</td>\n","      <td>-0.913526</td>\n","      <td>-0.995112</td>\n","      <td>-0.983185</td>\n","      <td>-0.923527</td>\n","      <td>-0.934724</td>\n","      <td>-0.567378</td>\n","      <td>-0.744413</td>\n","      <td>0.852947</td>\n","      <td>0.685845</td>\n","      <td>0.814263</td>\n","      <td>-0.965523</td>\n","      <td>-0.999945</td>\n","      <td>-0.999863</td>\n","      <td>-0.994612</td>\n","      <td>-0.994231</td>\n","      <td>-0.987614</td>\n","      <td>-0.943220</td>\n","      <td>-0.407747</td>\n","      <td>-0.679338</td>\n","      <td>-0.602122</td>\n","      <td>0.929294</td>\n","      <td>-0.853011</td>\n","      <td>0.359910</td>\n","      <td>-0.058526</td>\n","      <td>0.256892</td>\n","      <td>-0.224848</td>\n","      <td>0.264106</td>\n","      <td>-0.095246</td>\n","      <td>0.278851</td>\n","      <td>-0.465085</td>\n","      <td>0.491936</td>\n","      <td>-0.190884</td>\n","      <td>0.376314</td>\n","      <td>0.435129</td>\n","      <td>0.660790</td>\n","      <td>...</td>\n","      <td>-0.999918</td>\n","      <td>-0.991364</td>\n","      <td>-1.0</td>\n","      <td>-0.936508</td>\n","      <td>0.346989</td>\n","      <td>-0.516080</td>\n","      <td>-0.802760</td>\n","      <td>-0.980135</td>\n","      <td>-0.961309</td>\n","      <td>-0.973653</td>\n","      <td>-0.952264</td>\n","      <td>-0.989498</td>\n","      <td>-0.980135</td>\n","      <td>-0.999240</td>\n","      <td>-0.992656</td>\n","      <td>-0.701291</td>\n","      <td>-1.000000</td>\n","      <td>-0.128989</td>\n","      <td>0.586156</td>\n","      <td>0.374605</td>\n","      <td>-0.991990</td>\n","      <td>-0.990697</td>\n","      <td>-0.989941</td>\n","      <td>-0.992448</td>\n","      <td>-0.991048</td>\n","      <td>-0.991990</td>\n","      <td>-0.999937</td>\n","      <td>-0.990458</td>\n","      <td>-0.871306</td>\n","      <td>-1.000000</td>\n","      <td>-0.074323</td>\n","      <td>-0.298676</td>\n","      <td>-0.710304</td>\n","      <td>-0.112754</td>\n","      <td>0.030400</td>\n","      <td>-0.464761</td>\n","      <td>-0.018446</td>\n","      <td>-0.841247</td>\n","      <td>0.179941</td>\n","      <td>-0.058627</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.278419</td>\n","      <td>-0.016411</td>\n","      <td>-0.123520</td>\n","      <td>-0.998245</td>\n","      <td>-0.975300</td>\n","      <td>-0.960322</td>\n","      <td>-0.998807</td>\n","      <td>-0.974914</td>\n","      <td>-0.957686</td>\n","      <td>-0.943068</td>\n","      <td>-0.557851</td>\n","      <td>-0.818409</td>\n","      <td>0.849308</td>\n","      <td>0.685845</td>\n","      <td>0.822637</td>\n","      <td>-0.981930</td>\n","      <td>-0.999991</td>\n","      <td>-0.999788</td>\n","      <td>-0.998405</td>\n","      <td>-0.999150</td>\n","      <td>-0.977866</td>\n","      <td>-0.948225</td>\n","      <td>-0.714892</td>\n","      <td>-0.500930</td>\n","      <td>-0.570979</td>\n","      <td>0.611627</td>\n","      <td>-0.329549</td>\n","      <td>0.284213</td>\n","      <td>0.284595</td>\n","      <td>0.115705</td>\n","      <td>-0.090963</td>\n","      <td>0.294310</td>\n","      <td>-0.281211</td>\n","      <td>0.085988</td>\n","      <td>-0.022153</td>\n","      <td>-0.016657</td>\n","      <td>-0.220643</td>\n","      <td>-0.013429</td>\n","      <td>-0.072692</td>\n","      <td>0.579382</td>\n","      <td>...</td>\n","      <td>-0.999867</td>\n","      <td>-0.991134</td>\n","      <td>-1.0</td>\n","      <td>-0.841270</td>\n","      <td>0.532061</td>\n","      <td>-0.624871</td>\n","      <td>-0.900160</td>\n","      <td>-0.988296</td>\n","      <td>-0.983322</td>\n","      <td>-0.982659</td>\n","      <td>-0.986321</td>\n","      <td>-0.991829</td>\n","      <td>-0.988296</td>\n","      <td>-0.999811</td>\n","      <td>-0.993979</td>\n","      <td>-0.720683</td>\n","      <td>-0.948718</td>\n","      <td>-0.271958</td>\n","      <td>-0.336310</td>\n","      <td>-0.720015</td>\n","      <td>-0.995854</td>\n","      <td>-0.996399</td>\n","      <td>-0.995442</td>\n","      <td>-0.996866</td>\n","      <td>-0.994440</td>\n","      <td>-0.995854</td>\n","      <td>-0.999981</td>\n","      <td>-0.994544</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","      <td>0.158075</td>\n","      <td>-0.595051</td>\n","      <td>-0.861499</td>\n","      <td>0.053477</td>\n","      <td>-0.007435</td>\n","      <td>-0.732626</td>\n","      <td>0.703511</td>\n","      <td>-0.844788</td>\n","      <td>0.180289</td>\n","      <td>-0.054317</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.279653</td>\n","      <td>-0.019467</td>\n","      <td>-0.113462</td>\n","      <td>-0.995380</td>\n","      <td>-0.967187</td>\n","      <td>-0.978944</td>\n","      <td>-0.996520</td>\n","      <td>-0.963668</td>\n","      <td>-0.977469</td>\n","      <td>-0.938692</td>\n","      <td>-0.557851</td>\n","      <td>-0.818409</td>\n","      <td>0.843609</td>\n","      <td>0.682401</td>\n","      <td>0.839344</td>\n","      <td>-0.983478</td>\n","      <td>-0.999969</td>\n","      <td>-0.999660</td>\n","      <td>-0.999470</td>\n","      <td>-0.997130</td>\n","      <td>-0.964810</td>\n","      <td>-0.974675</td>\n","      <td>-0.592235</td>\n","      <td>-0.485821</td>\n","      <td>-0.570979</td>\n","      <td>0.273025</td>\n","      <td>-0.086309</td>\n","      <td>0.337202</td>\n","      <td>-0.164739</td>\n","      <td>0.017150</td>\n","      <td>-0.074507</td>\n","      <td>0.342256</td>\n","      <td>-0.332564</td>\n","      <td>0.239281</td>\n","      <td>-0.136204</td>\n","      <td>0.173863</td>\n","      <td>-0.299493</td>\n","      <td>-0.124698</td>\n","      <td>-0.181105</td>\n","      <td>0.608900</td>\n","      <td>...</td>\n","      <td>-0.999845</td>\n","      <td>-0.986658</td>\n","      <td>-1.0</td>\n","      <td>-0.904762</td>\n","      <td>0.660795</td>\n","      <td>-0.724697</td>\n","      <td>-0.928539</td>\n","      <td>-0.989255</td>\n","      <td>-0.986028</td>\n","      <td>-0.984274</td>\n","      <td>-0.990979</td>\n","      <td>-0.995703</td>\n","      <td>-0.989255</td>\n","      <td>-0.999854</td>\n","      <td>-0.993238</td>\n","      <td>-0.736521</td>\n","      <td>-0.794872</td>\n","      <td>-0.212728</td>\n","      <td>-0.535352</td>\n","      <td>-0.871914</td>\n","      <td>-0.995031</td>\n","      <td>-0.995127</td>\n","      <td>-0.994640</td>\n","      <td>-0.996060</td>\n","      <td>-0.995866</td>\n","      <td>-0.995031</td>\n","      <td>-0.999973</td>\n","      <td>-0.993755</td>\n","      <td>-1.000000</td>\n","      <td>-0.555556</td>\n","      <td>0.414503</td>\n","      <td>-0.390748</td>\n","      <td>-0.760104</td>\n","      <td>-0.118559</td>\n","      <td>0.177899</td>\n","      <td>0.100699</td>\n","      <td>0.808529</td>\n","      <td>-0.848933</td>\n","      <td>0.180637</td>\n","      <td>-0.049118</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.279174</td>\n","      <td>-0.026201</td>\n","      <td>-0.123283</td>\n","      <td>-0.996091</td>\n","      <td>-0.983403</td>\n","      <td>-0.990675</td>\n","      <td>-0.997099</td>\n","      <td>-0.982750</td>\n","      <td>-0.989302</td>\n","      <td>-0.938692</td>\n","      <td>-0.576159</td>\n","      <td>-0.829711</td>\n","      <td>0.843609</td>\n","      <td>0.682401</td>\n","      <td>0.837869</td>\n","      <td>-0.986093</td>\n","      <td>-0.999976</td>\n","      <td>-0.999736</td>\n","      <td>-0.999504</td>\n","      <td>-0.997180</td>\n","      <td>-0.983799</td>\n","      <td>-0.986007</td>\n","      <td>-0.627446</td>\n","      <td>-0.850930</td>\n","      <td>-0.911872</td>\n","      <td>0.061436</td>\n","      <td>0.074840</td>\n","      <td>0.198204</td>\n","      <td>-0.264307</td>\n","      <td>0.072545</td>\n","      <td>-0.155320</td>\n","      <td>0.323154</td>\n","      <td>-0.170813</td>\n","      <td>0.294938</td>\n","      <td>-0.306081</td>\n","      <td>0.482148</td>\n","      <td>-0.470129</td>\n","      <td>-0.305693</td>\n","      <td>-0.362654</td>\n","      <td>0.507459</td>\n","      <td>...</td>\n","      <td>-0.999895</td>\n","      <td>-0.988055</td>\n","      <td>-1.0</td>\n","      <td>1.000000</td>\n","      <td>0.678921</td>\n","      <td>-0.701131</td>\n","      <td>-0.909639</td>\n","      <td>-0.989413</td>\n","      <td>-0.987836</td>\n","      <td>-0.986850</td>\n","      <td>-0.986749</td>\n","      <td>-0.996199</td>\n","      <td>-0.989413</td>\n","      <td>-0.999876</td>\n","      <td>-0.989136</td>\n","      <td>-0.720891</td>\n","      <td>-1.000000</td>\n","      <td>-0.035684</td>\n","      <td>-0.230091</td>\n","      <td>-0.511217</td>\n","      <td>-0.995221</td>\n","      <td>-0.995237</td>\n","      <td>-0.995722</td>\n","      <td>-0.995273</td>\n","      <td>-0.995732</td>\n","      <td>-0.995221</td>\n","      <td>-0.999974</td>\n","      <td>-0.995226</td>\n","      <td>-0.955696</td>\n","      <td>-0.936508</td>\n","      <td>0.404573</td>\n","      <td>-0.117290</td>\n","      <td>-0.482845</td>\n","      <td>-0.036788</td>\n","      <td>-0.012892</td>\n","      <td>0.640011</td>\n","      <td>-0.485366</td>\n","      <td>-0.848649</td>\n","      <td>0.181935</td>\n","      <td>-0.047663</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.276629</td>\n","      <td>-0.016570</td>\n","      <td>-0.115362</td>\n","      <td>-0.998139</td>\n","      <td>-0.980817</td>\n","      <td>-0.990482</td>\n","      <td>-0.998321</td>\n","      <td>-0.979672</td>\n","      <td>-0.990441</td>\n","      <td>-0.942469</td>\n","      <td>-0.569174</td>\n","      <td>-0.824705</td>\n","      <td>0.849095</td>\n","      <td>0.683250</td>\n","      <td>0.837869</td>\n","      <td>-0.992653</td>\n","      <td>-0.999991</td>\n","      <td>-0.999856</td>\n","      <td>-0.999757</td>\n","      <td>-0.998004</td>\n","      <td>-0.981232</td>\n","      <td>-0.991325</td>\n","      <td>-0.786553</td>\n","      <td>-0.559477</td>\n","      <td>-0.761434</td>\n","      <td>0.313276</td>\n","      <td>-0.131208</td>\n","      <td>0.191161</td>\n","      <td>0.086904</td>\n","      <td>0.257615</td>\n","      <td>-0.272505</td>\n","      <td>0.434728</td>\n","      <td>-0.315375</td>\n","      <td>0.439744</td>\n","      <td>-0.269069</td>\n","      <td>0.179414</td>\n","      <td>-0.088952</td>\n","      <td>-0.155804</td>\n","      <td>-0.189763</td>\n","      <td>0.599213</td>\n","      <td>...</td>\n","      <td>-0.999941</td>\n","      <td>-0.994169</td>\n","      <td>-1.0</td>\n","      <td>-1.000000</td>\n","      <td>0.559058</td>\n","      <td>-0.528901</td>\n","      <td>-0.858933</td>\n","      <td>-0.991433</td>\n","      <td>-0.989059</td>\n","      <td>-0.987744</td>\n","      <td>-0.991462</td>\n","      <td>-0.998353</td>\n","      <td>-0.991433</td>\n","      <td>-0.999902</td>\n","      <td>-0.989321</td>\n","      <td>-0.763372</td>\n","      <td>-0.897436</td>\n","      <td>-0.273582</td>\n","      <td>-0.510282</td>\n","      <td>-0.830702</td>\n","      <td>-0.995093</td>\n","      <td>-0.995465</td>\n","      <td>-0.995279</td>\n","      <td>-0.995609</td>\n","      <td>-0.997418</td>\n","      <td>-0.995093</td>\n","      <td>-0.999974</td>\n","      <td>-0.995487</td>\n","      <td>-1.000000</td>\n","      <td>-0.936508</td>\n","      <td>0.087753</td>\n","      <td>-0.351471</td>\n","      <td>-0.699205</td>\n","      <td>0.123320</td>\n","      <td>0.122542</td>\n","      <td>0.693578</td>\n","      <td>-0.615971</td>\n","      <td>-0.847865</td>\n","      <td>0.185151</td>\n","      <td>-0.043892</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 561 columns</p>\n","</div>"],"text/plain":["1  tBodyAcc-mean()-X  ...  angle(Z,gravityMean)\n","0           0.288585  ...             -0.058627\n","1           0.278419  ...             -0.054317\n","2           0.279653  ...             -0.049118\n","3           0.279174  ...             -0.047663\n","4           0.276629  ...             -0.043892\n","\n","[5 rows x 561 columns]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"aBSXkFAoTvcN","colab":{"base_uri":"https://localhost:8080/","height":239},"executionInfo":{"status":"error","timestamp":1618792703420,"user_tz":-540,"elapsed":12547,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"8624564e-c18a-41e7-fbb7-97390935f4fa"},"source":["#랜덤포레스트 분류로 해보기\n","\n","\n","\n","select_model = SelectFromModel(RandomForestClassifier(n_estimators=100, random_state=0), threshold=\"median\")\n","select_model.fit(X_train, y_train)\n","X_train_sm = select_model.transform(X_train)\n","X_test_sm = select_model.transform(X_test)\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-605ca9956f57>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mselect_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSelectFromModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"median\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mselect_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mX_train_sm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselect_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'SelectFromModel' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VCHL-NBaZ7Te","executionInfo":{"status":"ok","timestamp":1618556398160,"user_tz":-540,"elapsed":1810,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"0edb155b-dc92-4ee8-84de-bc75bb1514f3"},"source":["model_rf = RandomForestClassifier(n_estimators=10,max_depth=10).fit(X_train,y_train)\n","model_rf.score(X_train,y_train),model_rf.score(X_test,y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.9918389553862894, 0.9019341703427214)"]},"metadata":{"tags":[]},"execution_count":114}]},{"cell_type":"code","metadata":{"id":"uOzM3FuKdmRx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618559077860,"user_tz":-540,"elapsed":26636,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"972b2cb6-7c12-4da6-b206-64c2c465d84e"},"source":["#SVC\n","\n","# 훈련데이터에 대한 스케일링 초기화\n","scaler.fit(X_train)           \n","\n","# 스케일링 적용\n","X_train_scaled = scaler.transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","\n","#그리드 서치를 이용하여 모델 학습\n","# param_grid_SVC={'C':np.logspace(-4,4,1), 'gamma':np.logspace(-4,4,1)}\n","\n","# ss = ShuffleSplit(n_splits=5, train_size=0.5, test_size=0.3) # 교차검증\n","# grid_search_SVC = GridSearchCV(SVC(), param_grid=param_grid_SVC, cv=3, return_train_score=True)  #그리드 서치\n","\n","# grid_search_SVC.fit(X_train_scaled, y_train)\n","# grid_search_SVC.score(X_test_scaled,y_test)\n","\n","\n","\n","\n","\n","#그냥 하자.\n","model_svc = SVC().fit(X_train_scaled,y_train)\n","model_svc.score(X_train_scaled,y_train),model_svc.score(X_test_scaled,y_test)\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.9797334058759521, 0.9480827960637936)"]},"metadata":{"tags":[]},"execution_count":121}]},{"cell_type":"markdown","metadata":{"id":"b7CcWb_trcUe"},"source":["## 캐글 산탄데르 고객 만족 예측\n","\n","370개 특성으로 주어진 데이터 세트 기반에서 고객 만족 여부를 예측하는 머신러닝 모델을 수립\n","\n","- [데이터세트 다운로드](https://www.kaggle.com/c/santander-customer-satisfaction/data)\n","\n","- 규칙준수 동의를 하고 Download All 버튼을 클릭해 압축 파일을 내려받은 후 train.csv를 추출하거나 왼쪽의 'Data Explorer'에서 train.csv 파일만 클릭해서 다운받은 후 이용\n","\n","- 특성 이름은 모두 익명 처리돼 이름만을 가지고 어떤 속성인지 추정이 어려움. 클래스 레이블 명은 TARGET이며, 이 값이 1이면 불만, 0이면 만족한 고객\n","\n","- 데이터 전처리 후 XGBoost와 LightGBM을 이용하여 모델 작성 및 ROC-AUC를 이용한 성능 평가와 GridSearch를 이용한 최적의 하이퍼파라미터를 확인"]},{"cell_type":"code","metadata":{"id":"TtP7wmIlxLTP"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pF2KeeD_xPgd"},"source":["## 캐글 신용카드 사기 검출\n","\n","매우 불균형한 분포를 가지고 있는 데이터 세트 기반에서 신용카드 사기 검출 머신러닝 모델을 수립\n","\n","- [데이터세트 다운로드](https://www.kaggle.com/mlg-ulb/creditcardfraud)\n","\n","- 규칙준수 동의를 하고 Download(144 MB) 버튼을 클릭해 압축 파일을 내려받은 후 creditcard.csv를 추출하거나 왼쪽의 'Data Explorer'에서 creditcard.csv 파일만 클릭해서 다운받은 후 이용\n","\n","- 클래스 레이블 명은 Class 이며, 이 값이 1이면 사기 트랜잭션, 0이면 정상 트랜잭션\n","\n","- 모델 적용 후 성능 평가 지표를 확인 (오차행렬, 정확도, 정밀도, 재현율, F1스코어, AUC)\n"]},{"cell_type":"code","metadata":{"id":"mAQ9DhPo1IZq","colab":{"base_uri":"https://localhost:8080/","height":924},"executionInfo":{"status":"ok","timestamp":1619359296099,"user_tz":-540,"elapsed":3882,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"955e1e64-64a7-4e8f-f4d8-4bb1f066efe7"},"source":["\n","data = pd.read_csv(drive_path + 'creditcard.csv')\n","data.info()\n","data.describe()\n","\n","data.head()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 284807 entries, 0 to 284806\n","Data columns (total 31 columns):\n"," #   Column  Non-Null Count   Dtype  \n","---  ------  --------------   -----  \n"," 0   Time    284807 non-null  float64\n"," 1   V1      284807 non-null  float64\n"," 2   V2      284807 non-null  float64\n"," 3   V3      284807 non-null  float64\n"," 4   V4      284807 non-null  float64\n"," 5   V5      284807 non-null  float64\n"," 6   V6      284807 non-null  float64\n"," 7   V7      284807 non-null  float64\n"," 8   V8      284807 non-null  float64\n"," 9   V9      284807 non-null  float64\n"," 10  V10     284807 non-null  float64\n"," 11  V11     284807 non-null  float64\n"," 12  V12     284807 non-null  float64\n"," 13  V13     284807 non-null  float64\n"," 14  V14     284807 non-null  float64\n"," 15  V15     284807 non-null  float64\n"," 16  V16     284807 non-null  float64\n"," 17  V17     284807 non-null  float64\n"," 18  V18     284807 non-null  float64\n"," 19  V19     284807 non-null  float64\n"," 20  V20     284807 non-null  float64\n"," 21  V21     284807 non-null  float64\n"," 22  V22     284807 non-null  float64\n"," 23  V23     284807 non-null  float64\n"," 24  V24     284807 non-null  float64\n"," 25  V25     284807 non-null  float64\n"," 26  V26     284807 non-null  float64\n"," 27  V27     284807 non-null  float64\n"," 28  V28     284807 non-null  float64\n"," 29  Amount  284807 non-null  float64\n"," 30  Class   284807 non-null  int64  \n","dtypes: float64(30), int64(1)\n","memory usage: 67.4 MB\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V8</th>\n","      <th>V9</th>\n","      <th>V10</th>\n","      <th>V11</th>\n","      <th>V12</th>\n","      <th>V13</th>\n","      <th>V14</th>\n","      <th>V15</th>\n","      <th>V16</th>\n","      <th>V17</th>\n","      <th>V18</th>\n","      <th>V19</th>\n","      <th>V20</th>\n","      <th>V21</th>\n","      <th>V22</th>\n","      <th>V23</th>\n","      <th>V24</th>\n","      <th>V25</th>\n","      <th>V26</th>\n","      <th>V27</th>\n","      <th>V28</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>-1.359807</td>\n","      <td>-0.072781</td>\n","      <td>2.536347</td>\n","      <td>1.378155</td>\n","      <td>-0.338321</td>\n","      <td>0.462388</td>\n","      <td>0.239599</td>\n","      <td>0.098698</td>\n","      <td>0.363787</td>\n","      <td>0.090794</td>\n","      <td>-0.551600</td>\n","      <td>-0.617801</td>\n","      <td>-0.991390</td>\n","      <td>-0.311169</td>\n","      <td>1.468177</td>\n","      <td>-0.470401</td>\n","      <td>0.207971</td>\n","      <td>0.025791</td>\n","      <td>0.403993</td>\n","      <td>0.251412</td>\n","      <td>-0.018307</td>\n","      <td>0.277838</td>\n","      <td>-0.110474</td>\n","      <td>0.066928</td>\n","      <td>0.128539</td>\n","      <td>-0.189115</td>\n","      <td>0.133558</td>\n","      <td>-0.021053</td>\n","      <td>149.62</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.191857</td>\n","      <td>0.266151</td>\n","      <td>0.166480</td>\n","      <td>0.448154</td>\n","      <td>0.060018</td>\n","      <td>-0.082361</td>\n","      <td>-0.078803</td>\n","      <td>0.085102</td>\n","      <td>-0.255425</td>\n","      <td>-0.166974</td>\n","      <td>1.612727</td>\n","      <td>1.065235</td>\n","      <td>0.489095</td>\n","      <td>-0.143772</td>\n","      <td>0.635558</td>\n","      <td>0.463917</td>\n","      <td>-0.114805</td>\n","      <td>-0.183361</td>\n","      <td>-0.145783</td>\n","      <td>-0.069083</td>\n","      <td>-0.225775</td>\n","      <td>-0.638672</td>\n","      <td>0.101288</td>\n","      <td>-0.339846</td>\n","      <td>0.167170</td>\n","      <td>0.125895</td>\n","      <td>-0.008983</td>\n","      <td>0.014724</td>\n","      <td>2.69</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>-1.358354</td>\n","      <td>-1.340163</td>\n","      <td>1.773209</td>\n","      <td>0.379780</td>\n","      <td>-0.503198</td>\n","      <td>1.800499</td>\n","      <td>0.791461</td>\n","      <td>0.247676</td>\n","      <td>-1.514654</td>\n","      <td>0.207643</td>\n","      <td>0.624501</td>\n","      <td>0.066084</td>\n","      <td>0.717293</td>\n","      <td>-0.165946</td>\n","      <td>2.345865</td>\n","      <td>-2.890083</td>\n","      <td>1.109969</td>\n","      <td>-0.121359</td>\n","      <td>-2.261857</td>\n","      <td>0.524980</td>\n","      <td>0.247998</td>\n","      <td>0.771679</td>\n","      <td>0.909412</td>\n","      <td>-0.689281</td>\n","      <td>-0.327642</td>\n","      <td>-0.139097</td>\n","      <td>-0.055353</td>\n","      <td>-0.059752</td>\n","      <td>378.66</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>-0.966272</td>\n","      <td>-0.185226</td>\n","      <td>1.792993</td>\n","      <td>-0.863291</td>\n","      <td>-0.010309</td>\n","      <td>1.247203</td>\n","      <td>0.237609</td>\n","      <td>0.377436</td>\n","      <td>-1.387024</td>\n","      <td>-0.054952</td>\n","      <td>-0.226487</td>\n","      <td>0.178228</td>\n","      <td>0.507757</td>\n","      <td>-0.287924</td>\n","      <td>-0.631418</td>\n","      <td>-1.059647</td>\n","      <td>-0.684093</td>\n","      <td>1.965775</td>\n","      <td>-1.232622</td>\n","      <td>-0.208038</td>\n","      <td>-0.108300</td>\n","      <td>0.005274</td>\n","      <td>-0.190321</td>\n","      <td>-1.175575</td>\n","      <td>0.647376</td>\n","      <td>-0.221929</td>\n","      <td>0.062723</td>\n","      <td>0.061458</td>\n","      <td>123.50</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","      <td>-1.158233</td>\n","      <td>0.877737</td>\n","      <td>1.548718</td>\n","      <td>0.403034</td>\n","      <td>-0.407193</td>\n","      <td>0.095921</td>\n","      <td>0.592941</td>\n","      <td>-0.270533</td>\n","      <td>0.817739</td>\n","      <td>0.753074</td>\n","      <td>-0.822843</td>\n","      <td>0.538196</td>\n","      <td>1.345852</td>\n","      <td>-1.119670</td>\n","      <td>0.175121</td>\n","      <td>-0.451449</td>\n","      <td>-0.237033</td>\n","      <td>-0.038195</td>\n","      <td>0.803487</td>\n","      <td>0.408542</td>\n","      <td>-0.009431</td>\n","      <td>0.798278</td>\n","      <td>-0.137458</td>\n","      <td>0.141267</td>\n","      <td>-0.206010</td>\n","      <td>0.502292</td>\n","      <td>0.219422</td>\n","      <td>0.215153</td>\n","      <td>69.99</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Time        V1        V2        V3  ...       V27       V28  Amount  Class\n","0   0.0 -1.359807 -0.072781  2.536347  ...  0.133558 -0.021053  149.62      0\n","1   0.0  1.191857  0.266151  0.166480  ... -0.008983  0.014724    2.69      0\n","2   1.0 -1.358354 -1.340163  1.773209  ... -0.055353 -0.059752  378.66      0\n","3   1.0 -0.966272 -0.185226  1.792993  ...  0.062723  0.061458  123.50      0\n","4   2.0 -1.158233  0.877737  1.548718  ...  0.219422  0.215153   69.99      0\n","\n","[5 rows x 31 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"nGzjcNdgS0_p","executionInfo":{"status":"ok","timestamp":1619359482765,"user_tz":-540,"elapsed":590,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"c283c051-464c-45b2-ac98-ff909e40f673"},"source":["display(data[\"Class\"].value_counts())\n","\n","data.iloc[:,1:-2].sum(axis=1)\n","\n","\n","# 매우 불균형 함"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["0    284315\n","1       492\n","Name: Class, dtype: int64"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["0         3.081757\n","1         4.439726\n","2         1.091311\n","3        -2.409596\n","4         5.378728\n","            ...   \n","284802   -0.204756\n","284803    0.536769\n","284804    6.784787\n","284805    5.644074\n","284806   -2.417888\n","Length: 284807, dtype: float64"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"5cIYw4tNVwa4","executionInfo":{"status":"ok","timestamp":1619359663928,"user_tz":-540,"elapsed":610,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}}},"source":["# 필요한 모듈\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.datasets import make_moons\n","import matplotlib.pyplot as plt\n","from sklearn.ensemble import VotingClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.datasets import load_breast_cancer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","\n","from warnings import filterwarnings\n","filterwarnings('ignore')\n","\n"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x2g-M0XGWePz","executionInfo":{"status":"ok","timestamp":1619360867448,"user_tz":-540,"elapsed":30177,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"c2faab02-fde7-434e-e7ca-5038e4ed29e9"},"source":["X = data.iloc[:,1:-2]\n","y = data.iloc[:,-1]\n","\n","X_train, X_test, y_train, y_test = train_test_split(X,\n","                                                    y,\n","                                                    stratify=y,\n","                                                    random_state=0)\n","\n","\n","model_rf = RandomForestClassifier(n_estimators=12 ,random_state=42)\n","model_rf.fit(X_train,y_train)\n","\n","model_rf.score(X_train,y_train), model_rf.score(X_test,y_test)\n","\n","# display(model_rf2.feature_importances_)\n","# 당연히 과적합 뜨겠지"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.9999157323096369, 0.9994382180275835)"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JS3dm7T9Xr4k","executionInfo":{"status":"ok","timestamp":1619360879423,"user_tz":-540,"elapsed":2861,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"ae64fbd3-1fc1-4649-c1e1-ff7d588222c4"},"source":["#시각화 by PCA\n","\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","# 특성의 분산이 1이 되도록 데이터의 스케일을 조정\n","\n","# 데이터로드\n","\n","# 스케일 조정                                           #PCA 사용할 땐 스케일 조정이 필수라고 합니다. 중간을 0으로 맞춰야 한다나?\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","pca = PCA(n_components=2)\n","pca.fit(X_scaled)\n","X_pca = pca.transform(X_scaled)             \n","X_scaled.shape, X_pca.shape"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((284807, 28), (284807, 2))"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"DeeDfFXxbkTU","executionInfo":{"status":"ok","timestamp":1619361633821,"user_tz":-540,"elapsed":5688,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"a6df6230-e5d4-482e-fe62-cdaafe581470"},"source":["dfX = pd.DataFrame(X_pca)\n","dfy = pd.DataFrame(y)\n","\n","result = pd.concat([dfX,dfy],axis=1)\n","label = [0,1]\n","markers=['^', 's']\n","for i, marker in enumerate(markers):\n","  xdata = result[result[\"Class\"] == i][0]\n","  ydata = result[result[\"Class\"] == i][1]\n","  \n","  plt.scatter(xdata, ydata, marker=marker, label=label[i] )\n","plt.legend()"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f6715480a90>"]},"metadata":{"tags":[]},"execution_count":59},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":377,"height":248},"needs_background":"light"}}]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"내꺼ml_05_지도학습_Linear_Classifier.ipynb의 사본","provenance":[{"file_id":"1bPZSgWKwnkewZ8qbs73rDo50A0r8ZdYs","timestamp":1617858350443}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"JpPDNLyjxy2-"},"source":["# Linear Classifier (선형분류)"]},{"cell_type":"markdown","metadata":{"id":"UyQchOwzx2eo"},"source":["- 계산한 값이 0보다 작은 클래스는 -1, 0보다 크면 +1이라고 예측(분류)\n","> ŷ = w[0] * x[0] + w[1] * x[1] + … + w[p] * x[p] + b > 0 <br>\n","> Linear Regression와 매우 비슷하지만 가중치(w) 합을 사용하는 대신 예측한 값을 임계치 0 과 비교\n","\n","- 이진 선형 분류기는 선, 평면, 초평면을 이용하여 2개의 클래스를 구분하는 분류기\n"]},{"cell_type":"markdown","metadata":{"id":"DDseWGpl6e03"},"source":["경사하강법(Gradient Descent) 최적화 알고리즘을 사용하여 선형 모델을 작성\n","\n","[SGDClassifier()](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html)\n","\n","```\n","SGDClassifier(alpha, average, class_weight, epsilon, eta0, fit_intercept, l1_ratio, learning_rat, loss, max_iter, n_iter, n_jobs, penalty, power_t, random_state, shuffle, tol, verbose, warm_start)\n","```\n","확률적 경사하강법(SGD, Stochastic Gradient Descent)을 이용하여 선형모델을 구현\n","\n","- lossstr : 손실함수 (default='hinge')\n","- penalty : {'l2', 'l1', 'elasticnet'}, default='l2'\n","- alpha : 값이 클수록 강력한 정규화(규제) 설정 (default=0.0001)\n","- l1_ratio : L1 규제의 비율(Elastic-Net 믹싱 파라미터 경우에만 사용) (default=0.15)\n","- fit_intercept : 모형에 상수항 (절편)이 있는가 없는가를 결정하는 인수 (default=True)\n","- max_iter : 계산에 사용할 작업 수 (default=1000)\n","- tol : 정밀도\n","- shuffle : 에포크 후에 트레이닝 데이터를 섞는 유무 (default=True)\n","- epsilon : 손실 함수에서의 엡실론, 엡실론이 작은 경우, 현재 예측과 올바른 레이블 간의 차이가 임계 값보다 작으면 무시 (default=0.1)\n","- n_jobs : 병렬 처리 할 때 사용되는 CPU 코어 수\n","- random_state : 난수 seed 설정\n","- learning_rate : 학습속도 (default='optimal')\n","- eta0 : 초기 학습속도 (default=0.0)\n","- power_t : 역 스케일링 학습률 (default=0.5)\n","- early_stopping : 유효성 검사 점수가 향상되지 않을 때 조기 중지여부 (default=False)\n","- validation_fraction : 조기 중지를위한 검증 세트로 설정할 교육 데이터의 비율 (default=0.1)\n","- n_iter_no_change : 조기중지 전 반복횟수 (default=5)\n","- class_weight : 클래스와 관련된 가중치 {class_label: weight} or “balanced”, default=None\n","- warm_start : 초기화 유무 (default=False)\n","- average : True로 설정하면 모든 업데이트에 대한 평균 SGD 가중치를 계산하고 결과를 coef_속성에 저장 (default=False)\n"]},{"cell_type":"markdown","metadata":{"id":"7AuxaPtIEKD-"},"source":["#### LinearClassifier 실습 01\n","\n","붓꽃 데이터 셋에 선형분류 적용"]},{"cell_type":"code","metadata":{"id":"X4AvkNOtroC2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617891504799,"user_tz":-540,"elapsed":1220,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"f652d7f9-9a08-4bdf-afde-c9d748087caa"},"source":["from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","\n","iris = load_iris()            \n","print(type(iris))       #Bunchtype의 아이리스 예제 모델 불러오기\n","print(iris.feature_names)     # feature names에 뭐가 들어있나 봤더니. 꽃받침길이, 꽃받침넓이, 꽃잎길이, 꽃잎넓이로 구성되어있다.\n","\n","X = iris.data[:,:2]       # 꽃받침길이, 꽃받침넓이에 관한 데이터만 담기\n","y = iris.target           # 그에 따른 분류 라벨 담기\n","\n","# print(X,y)\n","# print( [y==1])\n","# plt.scatter(X[:,0],X[:,1],y[(y==1)] )\n","\n"],"execution_count":28,"outputs":[{"output_type":"stream","text":["<class 'sklearn.utils.Bunch'>\n","['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fEIWZ_Qw_9JV","executionInfo":{"status":"ok","timestamp":1617891504800,"user_tz":-540,"elapsed":1213,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"d5bc16da-6caa-4d89-9c10-b32136e62640"},"source":["y2 = y.copy()\n","y2[(y2 == 2)] = 1         \n","y2 \n","#이진 분류를 하기 위해 target이 현재 0 1 2 세 종류인데, target 값이 2인 넘들을 다 1로 고쳐버림."],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"r95K-3ITosEs","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1617891505444,"user_tz":-540,"elapsed":1851,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"e8e02b9c-acbb-4a30-b1d3-95451416be1b"},"source":["import numpy as np\n","from sklearn.linear_model import SGDClassifier      #싸이킷런의 선형모델 중 SGDClassfier(경사하강모델)를 사용할 거다.\n","\n","#데이터 정제\n","X_train, X_test, y_train, y_test = train_test_split(X, y2, random_state=0, test_size=0.5)\n","\n","#시각화\n","markers = ['o', '+', '^']\n","for i in range(3):  \n","  xs = X_train[:, 0][y_train == i]\n","  ys = X_train[:, 1][y_train == i]\n","  plt.scatter(xs, ys, marker=markers[i])\n","\n","plt.legend(['setosa', 'nonsetosa'])\n","\n","\n","#---------------------------------------\n","\n","#모델 생성, 학습\n","model = SGDClassifier()\n","model.fit(X_train, y_train)                   # 두가지 속성 다 넣었네\n","\n","model.coef_, model.intercept_                 # 속성에 대한 가중치 w1, w2 그리고 절편 b\n","\n","#평가\n","w1 = model.coef_[0,0]\n","w2 = model.coef_[0,1]\n","b = model.intercept_\n","\n","xx= np.linspace(4,8,1000)\n","yy= -(w1 * xx + b) / w2           # (-w1/w2) * xx +  (-b/w2)   #속성값이 두개니까 이렇게 2차원 평면에 나타낼 수 있는것.\n","\n","plt.scatter(xx,yy, marker='^', s=5, color ='g')"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7f88ce2b8d10>"]},"metadata":{"tags":[]},"execution_count":30},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ha9Y6_-jx8Rk"},"source":["* -(a* xx + c) / b 이렇게 표현할 수도 있습니다.\n","* -는 기울기가 위에서 아래방향으로 향하게 되므로 반대로 바꾸기 위해 '/' 주었습니다.\n","* b로 나눈것은 꽂받침 길이의 가중치를(a), 넓이의 가중치(b) 비율로 선을 긋기 위해서입니다.\n","* 그래서 두 가중치 비율만큼의 경계선에 선이 그려지게 됩니다."]},{"cell_type":"markdown","metadata":{"id":"Xb7SWFmlroDd"},"source":["#### 4개 속성 모두 이용\n","\n","세가지 꽃 구분"]},{"cell_type":"code","metadata":{"id":"EcJl93ESroDe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617891505445,"user_tz":-540,"elapsed":1846,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"911bf277-9189-4232-9246-9fae64b389be"},"source":["# 물론 속성이 많을 떈 SGD분류기 보다는 로지스틱 분류기를 더 많이 쓴다고 한다. 다음시간에 배움.\n","\n","# w1x1 +  w2x2 + w3x3 + w4x4 + b = 0\n","\n","from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import SGDClassifier\n","from sklearn import metrics\n","\n","iris = datasets.load_iris()\n","\n","X = iris.data\n","y = iris.target\n","# plt.scatter(X[:,0],y)\n","# plt.scatter(X[:,1],y)\n","# plt.scatter(X[:,2],y)\n","# plt.legend()\n","# plt.show()\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)         # 데이터 수가 작을때는 random_state 영향도 크다.\n","\n","model = SGDClassifier(random_state=0)\n","model.fit(X_train,y_train)\n","\n","\n"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n","              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n","              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n","              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l2',\n","              power_t=0.5, random_state=0, shuffle=True, tol=0.001,\n","              validation_fraction=0.1, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QuJNHAp0KKF4","executionInfo":{"status":"ok","timestamp":1617891505445,"user_tz":-540,"elapsed":1841,"user":{"displayName":"심훈용","photoUrl":"","userId":"17506418350267611748"}},"outputId":"2cc9e40d-deb3-41a6-89ea-8391ed47cb61"},"source":["model.score(X_train,y_train), model.score(X_test,y_test)"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.9196428571428571, 0.8421052631578947)"]},"metadata":{"tags":[]},"execution_count":32}]}]}